<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="external.syncstock">

	<resultMap id="erpProductInfo" autoMapping="true" type="gcp.pms.model.PmsProduct">
		<id property="storeId" column="STORE_ID" />
		<id property="productId" column="PRODUCT_ID" />
		<collection property="pmsSaleproducts" ofType="gcp.pms.model.PmsSaleproduct">
			<id property="storeId" column="STORE_ID" />
			<id property="productId" column="PRODUCT_ID" />
			<id property="saleproductId" column="SALEPRODUCT_ID" />
			<result property="erpStockQty" column="STOCK_QTY" />
		</collection>
	</resultMap>
	<select id="getErpStockListOfProductUnit" parameterType="hashMap" resultMap="erpProductInfo">
	/* [external.syncstock.getErpStockListOfProductUnit][peter][2016. 9. 2.] */
		SELECT
			PP.PRODUCT_ID
			, PS.SALEPRODUCT_ID
			, ERP.STOCK_QTY
		FROM TB_TMP_ERP_STOCK_QTY ERP
		INNER JOIN PMS_PRODUCT PP
				ON PP.STORE_ID = #{storeId}
			   AND PP.ERP_PRODUCT_ID = ERP.ITEM_CODE
			<if test="gbnCd == '1'">
			   AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL','PRODUCT_TYPE_CD.PRESENT')
			</if>
			<if test="gbnCd != '1'">
			   AND PP.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
			   AND PP.CONTROL_NO IS NULL
			</if>
			   AND PP.RESERVE_YN = 'N'
			   AND PP.USE_YN = 'Y'
			   AND PP.EXPORT_ERP_PRODUCT_ID IS NULL
		INNER JOIN PMS_SALEPRODUCT PS
				ON PS.STORE_ID = PP.STORE_ID
			   AND PS.ERP_SALEPRODUCT_ID = ERP.BARCODE
			   AND PS.PRODUCT_ID = PP.PRODUCT_ID
		WHERE ERP.GBN_CD = #{gbnCd}
		  AND ERP.UPDATE_YN = 'N'
		  AND ERP.INSERT_DATE &gt;= TRUNC(SYSDATE)
		GROUP BY PP.PRODUCT_ID
				, PS.SALEPRODUCT_ID
				, ERP.STOCK_QTY
		ORDER BY TO_NUMBER(PP.PRODUCT_ID)
				, TO_NUMBER(PS.SALEPRODUCT_ID)
	</select>

	<select id="getErpStockListOfSaleproductUnit" parameterType="hashMap" resultType="pmsSaleproduct">
	/* [external.syncstock.getErpStockListOfSaleproductUnit][peter][2016. 9. 2.] */
		SELECT
			PS.SALEPRODUCT_ID
			, ERP.STOCK_QTY
		FROM TB_TMP_ERP_STOCK_QTY ERP
		INNER JOIN PMS_PRODUCT PP
				ON PP.STORE_ID = #{storeId}
			   AND PP.ERP_PRODUCT_ID = ERP.ITEM_CODE
			<if test="gbnCd == '1'">
			   AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL','PRODUCT_TYPE_CD.PRESENT')
			</if>
			<if test="gbnCd != '1'">
			   AND PP.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
			   AND PP.CONTROL_NO IS NULL
			</if>
			   AND PP.RESERVE_YN = 'N'
			   AND PP.USE_YN = 'Y'
			   AND PP.EXPORT_ERP_PRODUCT_ID IS NULL
		INNER JOIN PMS_SALEPRODUCT PS
				ON PS.STORE_ID = PP.STORE_ID
			   AND PS.ERP_SALEPRODUCT_ID = ERP.BARCODE
			   AND PS.PRODUCT_ID = PP.PRODUCT_ID
		WHERE ERP.GBN_CD = #{gbnCd}
		  AND ERP.UPDATE_YN = 'N'
		  AND ERP.INSERT_DATE &gt;= TRUNC(SYSDATE)
		GROUP BY PP.PRODUCT_ID
				, PS.SALEPRODUCT_ID
				, ERP.STOCK_QTY
		ORDER BY TO_NUMBER(PP.PRODUCT_ID)
				, TO_NUMBER(PS.SALEPRODUCT_ID)
	</select>

	<select id="getOrderQtyCancelQty" parameterType="String" resultType="omsOrder">
	/* [external.syncstock.getOrderQtyCancelQty][peter][2016. 7. 19.] */
		SELECT
			SUM(OOP.ORDER_QTY)	AS ORDER_QTY
			, SUM(OOP.CANCEL_QTY)	AS CANCEL_QTY
		  FROM OMS_ORDER ORD
		  INNER JOIN OMS_ORDERPRODUCT OOP
		  		  ON OOP.SALEPRODUCT_ID = #{saleproductId}
		  		 AND OOP.ORDER_ID = ORD.ORDER_ID
		  		 AND OOP.ORDER_PRODUCT_STATE_CD IN (
						'ORDER_PRODUCT_STATE_CD.READY'
						, 'ORDER_PRODUCT_STATE_CD.DELIVERY_ORDER'
					)
				 AND OOP.ORDER_DT BETWEEN TRUNC(ADD_MONTHS(SYSDATE,-2)+1) - TO_CHAR(SYSDATE,'DD') AND TRUNC(SYSDATE)
		 WHERE ORD.ORDER_STATE_CD IN (
		   		'ORDER_STATE_CD.PAYED'
		   		, 'ORDER_STATE_CD.COMPLETE'
		   	  )
		   AND ORD.ORDER_DT BETWEEN TRUNC(ADD_MONTHS(SYSDATE,-2)+1) - TO_CHAR(SYSDATE,'DD') AND TRUNC(SYSDATE)
		GROUP BY SALEPRODUCT_ID
	</select>

	<update id="updateSaleproductStock" parameterType="pmsSaleproduct">
	/* [external.syncstock.updateSaleproductStock][peter][2016. 9. 2.] */
		UPDATE PMS_SALEPRODUCT
		   SET REAL_STOCK_QTY = #{realStockQty}
		   	 , UPD_ID = #{updId}
		   	 , UPD_DT = SYSDATE
		  WHERE STORE_ID = #{storeId}
		    AND PRODUCT_ID = #{productId}
		    AND SALEPRODUCT_ID = #{saleproductId}
	</update>

	<resultMap id="productInfo" autoMapping="true" type="gcp.pms.model.PmsProduct">
		<id property="storeId" column="STORE_ID" />
		<id property="productId" column="PRODUCT_ID" />
		<result property="erpProductId" column="ERP_PRODUCT_ID" />
		<result property="name" column="PRODUCT_NAME" />
		<result property="adCopy" column="AD_COPY" />
		<result property="productTypeCd" column="PRODUCT_TYPE_CD" />
		<result property="saleStateCd" column="SALE_STATE_CD" />
		<result property="listPrice" column="LIST_PRICE" />
		<result property="salePrice" column="SALE_PRICE" />
		<result property="supplyPrice" column="SUPPLY_PRICE" />
		<result property="optionYn" column="OPTION_YN" />
		<collection property="pmsSaleproducts" ofType="gcp.pms.model.PmsSaleproduct">
			<id property="storeId" column="STORE_ID" />
			<id property="productId" column="PRODUCT_ID" />
			<id property="saleproductId" column="SALEPRODUCT_ID" />
			<result property="name" column="SALEPRODUCT_NAME" />
			<result property="realStockQty" column="REAL_STOCK_QTY" />
			<result property="addSalePrice" column="ADD_SALE_PRICE" />
			<result property="saleproductStateCd" column="SALEPRODUCT_STATE_CD" />
		</collection>
	</resultMap>
	<select id="getProductInfo" parameterType="hashMap" resultMap="productInfo">
	/* [external.syncstock.getProductInfo][peter][2016. 9. 2.] */
		SELECT 
			PP.PRODUCT_ID
			, PP.ERP_PRODUCT_ID
			, PP.NAME			AS PRODUCT_NAME
			, PP.AD_COPY
			, PP.PRODUCT_TYPE_CD
			, DECODE(PP.SALE_STATE_CD,'SALE_STATE_CD.SALE','2','SALE_STATE_CD.SOLDOUT','4','SALE_STATE_CD.STOP','3','SALE_STATE_CD.MDSTOP','3','SALE_STATE_CD.END','5','1')		AS SALE_STATE_CD
			, PP.LIST_PRICE
			, PP.SALE_PRICE
			, PP.SUPPLY_PRICE
			, PP.OPTION_YN
			, PS.SALEPRODUCT_ID
			, PS.NAME			AS SALEPRODUCT_NAME
			, PS.REAL_STOCK_QTY
			, PS.ADD_SALE_PRICE
			, DECODE(PS.SALEPRODUCT_STATE_CD, 'SALEPRODUCT_STATE_CD.SALE', '002', 'SALEPRODUCT_STATE_CD.SOLDOUT', '004', '005')		AS SALEPRODUCT_STATE_CD
		FROM PMS_PRODUCT PP
		INNER JOIN PMS_SALEPRODUCT PS
				ON PS.STORE_ID = PP.STORE_ID
			   AND PS.PRODUCT_ID = PP.PRODUCT_ID
		WHERE PP.STORE_ID = #{storeId}
		  AND PP.PRODUCT_ID = #{productId}
		  AND PP.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
		  AND PP.RESERVE_YN = 'N'
		  AND PP.USE_YN = 'Y'
		  AND PP.EXPORT_ERP_PRODUCT_ID IS NULL
		  AND PP.CONTROL_NO IS NULL
	</select>

	<insert id="insertSendgoodsSummary" parameterType="sendgoodsSummarymapping">
	/* [external.syncstock.insertSendgoodsSummary][peter][2016. 6. 22.] */
		<selectKey keyProperty="seq" resultType="Integer" order="BEFORE">
			SELECT NVL (SEQ, 1) SEQ
			  FROM (SELECT MAX(SEQ)+1 SEQ FROM ZTS_TERM.SEND_GOODS_SUMMARY) DUAL
		</selectKey>
			INSERT INTO ZTS_TERM.SEND_GOODS_SUMMARY (
				SEQ
				, GOODS_NM
				, COMPAYNY_GOODS_CD
				, STATUS
				, GOODS_COST
				, GOODS_PRICE
				, GOODS_CONSUMER_PRICE
				, CHAR_1_VAL
				, REGIST_DATE
			)
			VALUES (
				#{seq, jdbcType=INTEGER}
				, #{goodsNm, jdbcType=VARCHAR}
				, #{companyGoodsCd, jdbcType=VARCHAR}
				, #{status, jdbcType=VARCHAR}
				, #{goodsCost, jdbcType=VARCHAR}
				, #{goodsPrice, jdbcType=VARCHAR}
				, #{goodsConsumerPrice, jdbcType=VARCHAR}
				, #{char1Val, jdbcType=VARCHAR}
				, SYSDATE
			)
	</insert>

	<update id="updateErpStockResult" parameterType="String">
	/* [external.syncstock.updateErpStockResult][peter][2016. 7. 14.] */
		UPDATE TB_TMP_ERP_STOCK_QTY
		   SET UPDATE_YN = 'Y'
			 , UPDATE_DATE = SYSDATE 
		 WHERE GBN_CD = #{gbnCd}
		   AND UPDATE_YN = 'N'
		   AND INSERT_DATE &gt;= TRUNC(SYSDATE)
	</update>

</mapper>