<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sps.deal">
	
	<select id="getDealList" resultType="spsDeal" parameterType="spsDealSearch">
		/* [sps.deal.getDealList][allen][2016. 06. 13.] */
		SELECT 
				 T1.STORE_ID
		       , T1.DEAL_ID
		       , T1.NAME
		       , T1.DEAL_TYPE_CD
		       , T1.CONTROL_NO
		       , T1.SORT_NO
		       , T1.DISPLAY_YN
		       , T1.CHILDRENCARD_TYPE_CD
		       , T1.INS_DT
		       , T1.INS_ID
		       , (SELECT NAME FROM CCS_USER WHERE USER_ID = T1.INS_ID) INS_NAME
		       , T1.UPD_DT
		       , T1.UPD_ID
		       , (SELECT NAME FROM CCS_USER WHERE USER_ID = T1.UPD_ID) UPD_NAME
		  FROM SPS_DEAL T1
		  WHERE T1.STORE_ID = #{storeId}
		  <if test="dealId != null and dealId != ''">
		  	AND T1.DEAL_ID = #{dealId}
		  </if>
	 	  <if test="dealTypeCd != null and dealTypeCd != ''">
		    AND DEAL_TYPE_CD = #{dealTypeCd}
		  </if>
		  <if test="childrencardTypeCd != null and childrencardTypeCd != ''">
		    AND CHILDRENCARD_TYPE_CD = #{childrencardTypeCd}
		  </if>
	</select>
	
	
	<select id="getOneDepthDealGroupList" parameterType="spsDealSearch" resultType="spsDealgroup">
		 /* [sps.deal.getOneDepthDealGroupList][allen][2016. 06. 13.] */  
   		<include refid="ccs.common.pagingPre"/>
   		SELECT 
				STORE_ID
			  , DEAL_ID
			  , DEAL_GROUP_NO
			  , UPPER_DEAL_GROUP_NO
			  , NAME
			  , SORT_NO
			  , DISPLAY_YN
			  , INS_DT
			  , INS_ID
			  , UPD_DT
			  , UPD_ID
			  ,(SELECT US.NAME FROM CCS_USER US WHERE SPS_DEALGROUP.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  ,(SELECT US.NAME FROM CCS_USER US WHERE SPS_DEALGROUP.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME			  
		  FROM SPS_DEALGROUP
		  WHERE DEAL_ID = #{dealId}
		   AND UPPER_DEAL_GROUP_NO IS NULL
		   ORDER BY SORT_NO, DEAL_GROUP_NO
		  <include refid="ccs.common.pagingPost"/>
	</select>
	
	<select id="getTwoDepthDealGroupList" parameterType="spsDealSearch" resultType="spsDealgroup">
		 /* [sps.deal.getTwoDepthDealGroupList][allen][2016. 06. 13.] */  
   		<include refid="ccs.common.pagingPre"/>
   		SELECT 
				STORE_ID
			  , DEAL_ID
			  , DEAL_GROUP_NO
			  , UPPER_DEAL_GROUP_NO
			  , NAME
			  , IMG
			  , SORT_NO
			  , DISPLAY_YN
			  , INS_DT
			  , INS_ID
			  , UPD_DT
			  , UPD_ID
			  ,(SELECT US.NAME FROM CCS_USER US WHERE SPS_DEALGROUP.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  ,(SELECT US.NAME FROM CCS_USER US WHERE SPS_DEALGROUP.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
		  FROM SPS_DEALGROUP
		  WHERE DEAL_ID = #{dealId}
		   AND UPPER_DEAL_GROUP_NO = #{dealGroupNo}
		   ORDER BY SORT_NO, DEAL_GROUP_NO
		  <include refid="ccs.common.pagingPost"/>
	</select>
	
	
	<update id="updateDealInfo" parameterType="spsDeal">
		/* [sps.deal.updateDealInfo][allen][2016. 06. 13.] */  
		UPDATE SPS_DEAL
		   SET 
		         NAME         = #{name, jdbcType=VARCHAR}
		       , DEAL_TYPE_CD = #{dealTypeCd, jdbcType=VARCHAR}
		       , CONTROL_NO   = #{controlNo, jdbcType=INTEGER}
		       , SORT_NO      = #{sortNo, jdbcType=NUMERIC}
		       , DISPLAY_YN   = #{displayYn, jdbcType=VARCHAR}
		       , UPD_DT       = SYSDATE
		       , UPD_ID       = #{updId, jdbcType=VARCHAR}
		WHERE STORE_ID = #{storeId}
		  AND DEAL_ID = #{dealId}
	</update>
	
	<select id="getDealGroupTree" resultType="spsDealGroup">
		/* [sps.deal.getDealgroupTreeList][allen][2016. 06. 13.] */
		SELECT 	  A.* 
       			, DECODE(A.DEPTH, 2, 'Y', 
                    					DECODE((SELECT COUNT(1) FROM SPS_DEALGROUP WHERE UPPER_DEAL_GROUP_NO = A.DEAL_GROUP_NO), 0 , 'Y', 'N')) AS leafYn
          FROM (
		        SELECT LEVEL AS DEPTH
		             , T1.*
		             , (SELECT NAME FROM SPS_DEALGROUP WHERE DEAL_GROUP_NO = T1.UPPER_DEAL_GROUP_NO AND DEAL_ID = #{dealId}) AS UPPER_GROUP_NAME
		          FROM SPS_DEALGROUP T1
		         WHERE STORE_ID = #{storeId}
		         AND DEAL_ID = #{dealId}
		         START WITH UPPER_DEAL_GROUP_NO IS NULL AND STORE_ID = #{storeId} AND DEAL_ID = #{dealId}
		         CONNECT BY PRIOR DEAL_GROUP_NO = UPPER_DEAL_GROUP_NO AND STORE_ID = #{storeId} AND DEAL_ID = #{dealId}
		         ORDER SIBLINGS BY SORT_NO
         		) A
	</select>
	
	<delete id="deleteDealSaleProductPrice">
		/* [sps.deal.deleteDealSaleProductPrice][allen][2016. 06. 17.] */
		DELETE 
		  FROM SPS_DEALSALEPRODUCTPRICE 
		 WHERE STORE_ID = #{storeId}
		   AND DEAL_ID = #{dealId}
		   AND DEAL_PRODUCT_NO = #{dealProductNo}
	</delete>
	
	<delete id="deleteDealMember">
		/* [sps.deal.deleteDealMember][allen][2016. 06. 17.] */
		DELETE 
		  FROM SPS_DEALMEMBER
		 WHERE STORE_ID = #{storeId}
		   AND DEAL_ID = #{dealId}
		   AND DEAL_PRODUCT_NO = #{dealProductNo}
	</delete>
	
	<delete id="deleteDealGroup">
		/* [sps.deal.deleteDealGroup][allen][2016. 06. 17.] */
		DELETE 
		  FROM SPS_DEALGROUP
		 WHERE STORE_ID = #{storeId}
		   AND DEAL_ID = #{dealId}
		   <if test="upperDealGroupNo != null and upperDealGroupNo != ''">
		   AND UPPER_DEAL_GROUP_NO = #{upperDealGroupNo}
		   </if>
	</delete>
	
	
	<resultMap type="spsDealproduct" id="dealProductMap" autoMapping="true">
		<id property="storeId" column="STORE_ID" />
		<id property="dealId" column="DEAL_ID" />
		<id property="dealProductNo" column="DEAL_PRODUCT_NO" />
		<result property="dealGroupNo" column="DEAL_GROUP_NO" />
		<result property="productId" column="PRODUCT_ID" />
		<result property="productName" column="NAME" />
		<result property="startDt" column="START_DT" />
		<result property="endDt" column="END_DT" />
		<result property="totalDealStockQty" column="TOTAL_DEAL_STOCK_QTY" />
		<result property="dealStockQty" column="DEAL_STOCK_QTY" />
		<result property="listPrice" column="LIST_PRICE" />
		<result property="salePrice" column="SALE_PRICE" />
		<result property="pointSaveRate" column="POINT_SAVE_RATE" />
		<result property="supplyPrice" column="SUPPLY_PRICE" />
		<result property="commissionRate" column="COMMISSION_RATE" />
		<result property="deliveryFeeFreeYn" column="DELIVERY_FEE_FREE_YN" />
<!-- 		<result property="personQty" column="PERSON_QTY" /> -->
		<result property="dealStateCd" column="DEAL_STATE_CD" />
		<result property="displayYn" column="DISPLAY_YN" />
		<result property="sortNo" column="SORT_NO" />
		<result property="divTitDepth" column="DIV_TITLE_DEPTH" />
		<result property="grossProfitAmount" column="GROSS_PROFIT_AMOUNT" />
		<result property="saleProductTotalStock" column="SALEPRODUCT_TOTAL_STOCK" />
		<result property="insDt" column="INS_DT" />
		<result property="insId" column="INS_ID" />
		<result property="updDt" column="UPD_DT" />
		<result property="updId" column="UPD_ID" />
		<result property="insName" column="INS_NAME" />
		<result property="updName" column="UPD_NAME" />
		<association property="pmsProduct" javaType="pmsProduct">
			<id property="productId" column="PRODUCT_ID" />
			<result property="deliveryFeeFreeYn" column="PRODUCT_DELIVERY_FEE_FREE_YN" />
		</association>
	</resultMap>
	
	<select id="getDealProductList" parameterType="spsDealProductSearch" resultMap="dealProductMap">
		/* [sps.deal.getDealProductList][allen][2016. 06. 17.] */
		<include refid="ccs.common.pagingPre" />
		SELECT 
				  T2.STORE_ID
				, T2.DEAL_ID
				, T2.DEAL_PRODUCT_NO
				, T2.DEAL_GROUP_NO
				, T2.PRODUCT_ID
				, T3.NAME
				, T2.START_DT
				, T2.END_DT
				, T2.TOTAL_DEAL_STOCK_QTY
				, T2.DEAL_STOCK_QTY 
				, T2.LIST_PRICE
				, T2.SALE_PRICE
				, T2.POINT_SAVE_RATE
				, T2.SUPPLY_PRICE
				, T2.COMMISSION_RATE
				, T2.DELIVERY_FEE_FREE_YN
				, T2.DEAL_STATE_CD
				, T2.DISPLAY_YN
				, T2.SORT_NO
				, T2.INS_DT
				, T2.INS_ID
				, (SELECT NAME FROM CCS_USER WHERE USER_ID = T2.INS_ID) INS_NAME 
				, T2.UPD_DT
				, T2.UPD_ID
				, (SELECT NAME FROM CCS_USER WHERE USER_ID = T2.UPD_ID) UPD_NAME
			    , DECODE(T2.DEAL_GROUP_NO, NULL, '설정', (DECODE((SELECT UPPER_DEAL_GROUP_NO FROM SPS_DEALGROUP WHERE DEAL_GROUP_NO = T2.DEAL_GROUP_NO AND DEAL_ID = #{dealId})
                 			, NULL
                 			, (SELECT NAME FROM SPS_DEALGROUP WHERE DEAL_GROUP_NO = T2.DEAL_GROUP_NO AND DEAL_ID = #{dealId})
                 			, (SELECT DISTINCT B.NAME || ' > ' || A.NAME AS PATH
                      			 FROM SPS_DEALGROUP A
                    			 INNER JOIN SPS_DEALGROUP B
                    				ON A.UPPER_DEAL_GROUP_NO = B.DEAL_GROUP_NO
                    			 WHERE A.DEAL_GROUP_NO = T2.DEAL_GROUP_NO
                    			 AND A.DEAL_ID = #{dealId} AND B.DEAL_ID = #{dealId})
                    	))) AS DIV_TITLE_DEPTH
                , (T2.SALE_PRICE - T2.SUPPLY_PRICE) AS GROSS_PROFIT_AMOUNT
                , ( SELECT SUM(T2.REAL_STOCK_QTY) FROM PMS_PRODUCT T1 JOIN PMS_SALEPRODUCT T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID WHERE T1.PRODUCT_ID = T3.PRODUCT_ID GROUP BY T1.PRODUCT_ID) AS SALEPRODUCT_TOTAL_STOCK
                , T3.DELIVERY_FEE_FREE_YN AS PRODUCT_DELIVERY_FEE_FREE_YN
		  FROM SPS_DEAL T1
		  JOIN SPS_DEALPRODUCT T2
		    ON T1.DEAL_ID = T2.DEAL_ID
		  JOIN PMS_PRODUCT T3
		    ON T2.PRODUCT_ID = T3.PRODUCT_ID
		 WHERE T1.STORE_ID = #{storeId} 
		   AND T1.DEAL_ID = #{dealId}
			<if test="saleStateCds != null and saleStateCds != ''">
			   AND T3.SALE_STATE_CD IN (${saleStateCds})
			</if>
			<if test="productName != null and productName != ''">
			   AND T3.NAME LIKE '%' || #{productName} || '%'
			</if>
			<if test="businessId != null and businessId != ''">
			   AND T3.BUSINESS_ID = #{businessId}
			</if> 
			<if test="brandId != null and brandId != ''">
			   AND T3.BRAND_ID = #{brandId}
			</if>
			<if test="startDate != null and startDate != ''">
	      	 	<if test="endDate != null and endDate != ''">
	      	 		AND	T2.INS_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
					AND T2.INS_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
	     	 	</if> 
	      	 </if>
	      	 <if test="productInfoType != null and productInfoType == 'NAME'">
				<if test="productSearchKeyword != null and productSearchKeyword != ''">
					AND T3.NAME LIKE '%' || #{productSearchKeyword} || '%'
				</if>
			</if>
			<if test="productInfoType != null and productInfoType == 'PRODUCTID'">
				<if test="productSearchKeyword != null and productSearchKeyword != ''">
					AND T3.PRODUCT_ID = #{productSearchKeyword}
				</if>		
			</if>
			
      	 <include refid="ccs.common.pagingPost" />
	</select>
	
	<select id="getExistsDealProductList" resultType="spsDealproduct">
		/* [dms.exhibit.getExistsDealProductList][allen][2016. 05. 27.] */
	   SELECT PRODUCT_ID 
         FROM SPS_DEALPRODUCT
         WHERE STORE_ID = #{storeId}
           AND DEAL_ID = #{dealId}
           <if test="productIdArray != null and productIdArray.length > 0">
	           AND PRODUCT_ID IN 
	           <foreach collection="productIdArray" item="productId" open="(" separator=","  close=")">
	           		#{productId}
	           </foreach>
           </if>  
	</select>
	
	
	<select id="checkDealProductPeriod" resultType="int">
	/* [dms.exhibit.checkDealProductPeriod][allen][2016. 08. 29.] */
		SELECT 
     			COUNT(*)
		  FROM SPS_DEALPRODUCT
		  WHERE STORE_ID = #{storeId}  
			AND DEAL_ID = #{dealId}
			AND PRODUCT_ID = #{productId}
   			AND (START_DT &lt; TO_DATE (#{endDt}, 'YYYY-MM-DD HH24:MI:SS')
            AND END_DT &gt; TO_DATE (#{startDt}, 'YYYY-MM-DD HH24:MI:SS'))   
	</select>
	
	
	<update id="updateDealproduct">
		UPDATE SPS_DEALPRODUCT
		   SET
			     DEAL_GROUP_NO = NULL
			   , UPD_ID		 = #{updId}		
			   , UPD_DT		 = SYSDATE
		 WHERE STORE_ID = #{storeId} 
		   AND DEAL_ID = #{dealId}
		   AND DEAL_GROUP_NO IN (
           							SELECT T1.DEAL_GROUP_NO
             						  FROM SPS_DEALGROUP T1
             						  JOIN SPS_DEALPRODUCT T2
               							ON T1.DEAL_GROUP_NO = T2.DEAL_GROUP_NO
              						  WHERE (T2.DEAL_GROUP_NO = #{dealGroupNo} OR T1.UPPER_DEAL_GROUP_NO = #{dealGroupNo}))
	</update>
	
	<resultMap type="spsDealproduct" id="dealMainProductResult" autoMapping="true">
		<id property="productId" column="PRODUCT_ID" />
		<association property="pmsProduct" javaType="pmsProduct">
			<id property="productId" column="PRODUCT_ID" />
			<result property="name" column="NAME" />
	    </association>
	</resultMap>
	<select id="getShockingzeroMainProduct" parameterType="spsDealProductSearch" resultMap="dealMainProductResult">
		/* [sps.deal.getShockingzeroMainProduct][stella][2016. 08. 03.] */
		SELECT
			SP.*
			, PRI.SALE_PRICE
			, 100 - ROUND((PRI.SALE_PRICE / SP.LIST_PRICE * 100), 0)   AS DEAL_PRICE_RATE
		 FROM
		  	PMS_PRODUCTPRICE PRI
		  	, (SELECT
		  		DP.STORE_ID
				, DP.PRODUCT_ID
			    , P.NAME
			    , DP.START_DT
			    , DP.END_DT
			    , DP.TOTAL_DEAL_STOCK_QTY
			    , NVL(DP.DEAL_STOCK_QTY, 0)		AS DEAL_STOCK_QTY
			    , DP.LIST_PRICE
			    , (CASE WHEN EXTRACT(DAY FROM DP.END_DT - SYSTIMESTAMP)*24*60*60 
				    			+ EXTRACT(HOUR FROM DP.END_DT - SYSTIMESTAMP) <![CDATA[<=]]> 24 THEN '1'
			    		WHEN SUBSTR(TO_CHAR(DP.START_DT, 'YYYYMMDD HH24:MI:SS'), 0, 8) = SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD HH24:MI:SS'), 0, 8) THEN '2'
			    		WHEN DEAL_STOCK_QTY <![CDATA[<]]> 10 THEN '3' END)		AS BADGE_GUBUN
			 FROM
			    SPS_DEALPRODUCT DP	    
			    JOIN DMS_DISPLAYITEM DI
			        ON DI.STORE_ID = DP.STORE_ID
			        AND DI.DISPLAY_ITEM_ID = DP.PRODUCT_ID
			        AND DI.DISPLAY_ID = #{productSearchKeyword}
			    JOIN PMS_PRODUCT P
			        ON P.STORE_ID = DP.STORE_ID
			        AND P.PRODUCT_ID = DP.PRODUCT_ID
			WHERE
			    DP.STORE_ID = #{storeId}
			    AND DP.DEAL_ID = '1'
			    AND (DP.START_DT <![CDATA[<=]]> SYSDATE AND DP.END_DT <![CDATA[>=]]> SYSDATE)
			    AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN'
			ORDER BY
				DP.SORT_NO
			) SP
		 WHERE
		 	PRI.STORE_ID = SP.STORE_ID
		 	AND PRI.PRODUCT_ID = SP.PRODUCT_ID			
	</select>

	<resultMap type="spsDealproduct" id="dealProductResult" autoMapping="true">
		<id property="productId" column="PRODUCT_ID" />
		<association property="pmsProduct" javaType="pmsProduct">
			<id property="productId" column="PRODUCT_ID" />
			<result property="name" column="NAME" />
			<result property="deliveryFeeFreeYn" column="DELIVERY_FEE_FREE_YN" />
			<association property="pmsProductprice" javaType="pmsProductprice">
				<id property="productId" column="PRODUCT_ID" />
				<result property="deliveryFeeFreeYn" column="DELIVERY_FEE_FREE_YN" />
				<result property="pointYn" column="POINT_YN" />
				<result property="couponId" column="COUPON_ID" />
			</association>
	    </association>
	</resultMap>
	<select id="getShockingzeroProductList" parameterType="spsDealProductSearch" resultMap="dealProductResult">
		/* [sps.deal.getShockingzeroProductList][stella][2016. 08. 03.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT
			SP.*
			, PRI.SALE_PRICE
			, PRI.DELIVERY_FEE_FREE_YN
			, PRI.COUPON_ID
			, PRI.POINT_YN
			, 100 - ROUND((PRI.SALE_PRICE / SP.LIST_PRICE * 100), 0)   AS DEAL_PRICE_RATE
		 FROM
		  	PMS_PRODUCTPRICE PRI
		  	, (SELECT		  	
				DP.*
			    , (CASE WHEN DP.INTERVAL <![CDATA[<=]]> 24 THEN '1'
			    		WHEN SUBSTR(TO_CHAR(DP.START_DT, 'YYYYMMDD HH24:MI:SS'), 0, 8) = SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD HH24:MI:SS'), 0, 8) THEN '2'
			    		WHEN DEAL_STOCK_QTY <![CDATA[<=]]> 10 THEN '3' END)		AS BADGE_GUBUN    		
			  FROM
			  	(SELECT
			  		DP.STORE_ID
				  	, DP.PRODUCT_ID
				    , P.NAME
				    , DP.START_DT
				    , DP.END_DT
				    , DP.TOTAL_DEAL_STOCK_QTY
				    , NVL(DP.DEAL_STOCK_QTY, 0)		AS DEAL_STOCK_QTY
				    , DP.LIST_PRICE		AS LIST_PRICE      
				    , DP.TOTAL_DEAL_STOCK_QTY - NVL(DP.DEAL_STOCK_QTY, 0)       AS SALE_PRODUCT_TOTAL_STOCK
				    , EXTRACT(DAY FROM DP.END_DT - SYSTIMESTAMP)*24*60*60 
				    	+ EXTRACT(HOUR FROM DP.END_DT - SYSTIMESTAMP)     AS INTERVAL
				   	, (SELECT PRESENT_ID 
				   		 FROM SPS_PRESENT
				   		WHERE PRESENT_ID IN (SELECT PRESENT_ID 
				   							   FROM SPS_PRESENTPRODUCT 
				   							  WHERE STORE_ID = #{storeId} AND PRODUCT_ID = DP.PRODUCT_ID)
	                          AND PRESENT_TYPE_CD = 'PRESENT_TYPE_CD.PRODUCT'
	                          AND PRESENT_STATE_CD = 'PRESENT_STATE_CD.RUN')      AS PRESENT_YN
	                , DP.INS_DT
	                , DP.SORT_NO
	                , P.INS_DT AS PRODUCT_INS_DT
				 FROM
				    SPS_DEALPRODUCT DP
				    JOIN PMS_PRODUCT P
				        ON DP.STORE_ID = P.STORE_ID
				        AND DP.PRODUCT_ID = P.PRODUCT_ID
				WHERE
				    DP.STORE_ID = #{storeId}
				    AND DP.DEAL_ID = '1'
				    AND (DP.START_DT <![CDATA[<=]]> SYSDATE AND DP.END_DT <![CDATA[>=]]> SYSDATE)
				    AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN'
				    AND DP.DEAL_STOCK_QTY <![CDATA[>]]> 0
			  	) DP
			) SP
		 WHERE
		 	PRI.STORE_ID = SP.STORE_ID
		 	AND PRI.PRODUCT_ID = SP.PRODUCT_ID
		<if test="sortType != null and sortType != ''">
			ORDER BY
				<if test="sortType == 'popular'">
					SALE_PRODUCT_TOTAL_STOCK DESC, SP.SORT_NO, SP.DEAL_STOCK_QTY, SP.INS_DT DESC, SP.PRODUCT_INS_DT DESC
				</if>
				<if test="sortType == 'new'">
					SP.INS_DT DESC, SP.SORT_NO, SP.DEAL_STOCK_QTY DESC, SP.PRODUCT_INS_DT DESC 
				</if>
				<if test="sortType == 'end'">
					SP.INTERVAL, SP.SORT_NO, SP.DEAL_STOCK_QTY, SP.INS_DT DESC, SP.PRODUCT_INS_DT DESC
				</if>
		</if>
		<include refid="ccs.common.pagingPost"/>
	</select>
	
	<select id="checkShockingzeroCount" parameterType="spsDealProductSearch" resultType="String">
		/* [sps.deal.checkShockingzeroCount][stella][2016. 10. 13.] */
		SELECT
			DP.PRODUCT_ID
		 FROM
		  	SPS_DEALPRODUCT DP
		    JOIN PMS_PRODUCT P
		        ON DP.STORE_ID = P.STORE_ID
		        AND DP.PRODUCT_ID = P.PRODUCT_ID
		WHERE
		    DP.STORE_ID = #{storeId}
		    AND DP.DEAL_ID = '1'
		    AND (DP.START_DT <![CDATA[<=]]> SYSDATE AND DP.END_DT <![CDATA[>=]]> SYSDATE)
		    AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN'
		    AND DP.DEAL_STOCK_QTY <![CDATA[>]]> 0
		GROUP BY
			DP.PRODUCT_ID		      
	</select>
	
	<sql id="getApplyDeal">
	SELECT S.*
	  FROM (SELECT S.*,		   
				   (SALE_PRICE + ADD_SALE_PRICE) AS TOTAL_SALE_PRICE,
				   RANK() OVER(PARTITION BY S.PRODUCT_ID ORDER BY (SALE_PRICE + ADD_SALE_PRICE)) AS RN,
				   OS.ORDER_SEQ
			FROM (
				SELECT	S.DEAL_ID,
		  	   			S.NAME,
		  	   			S.DEAL_TYPE_CD,
		  	   			SD.PRODUCT_ID,
		  	   			SD.DEAL_PRODUCT_NO,
		  	   			SDS.SALEPRODUCT_ID,
		  	   			SD.LIST_PRICE,
		  	   			SD.SALE_PRICE,
		  	   			SD.SUPPLY_PRICE,
		  	   			SD.COMMISSION_RATE,
		  	   			SD.POINT_SAVE_RATE,
		  	   			SD.DELIVERY_FEE_FREE_YN,
<!-- 		  	   			SD.PERSON_QTY,	 -->
		  	   			SD.END_DT,
		  	   			S.CONTROL_NO,
		  	   			SD.DEAL_STOCK_QTY,	  	   					  	   			
		  	   			(NVL(SDS.ADD_SALE_PRICE,0) - NVL(SM.ADD_SALE_PRICE,0)) AS ADD_SALE_PRICE,
		  	   			RANK() OVER (PARTITION BY SD.DEAL_ID ORDER BY SD.INS_DT DESC) DT_RN	<!-- DEAL이 겹치면 최신것 -->		  	   					  	   				  	   					  	   
		  	     FROM SPS_DEAL S
		  	     JOIN SPS_DEALPRODUCT SD
			  	 	ON S.DEAL_ID = SD.DEAL_ID 		  	   
		  	     LEFT OUTER JOIN SPS_DEALMEMBER SM		  	   		  
			  	    ON SD.DEAL_ID = SM.DEAL_ID
			  	   AND SD.DEAL_PRODUCT_NO = SM.DEAL_PRODUCT_NO			  	   
			  	   AND SM.MEM_GRADE_CD = #{memGradeCd}
			  	 LEFT OUTER JOIN SPS_DEALSALEPRODUCTPRICE SDS
			  	 	ON SDS.DEAL_ID = SD.DEAL_ID
			  	   AND SDS.DEAL_PRODUCT_NO = SD.DEAL_PRODUCT_NO			  	   
			  	   AND SDS.SALEPRODUCT_ID = #{saleproductId} 			  	   
			  	WHERE ( /* 멤버등급별 선오픈일수 계산*/
			  			  (SM.MEM_GRADE_CD IS NOT NULL AND SD.START_DT &lt;= (SYSDATE - SM.PRE_OPEN_DAYS) AND SD.END_DT &gt;= SYSDATE) 
			  		   OR (SM.MEM_GRADE_CD IS NULL AND SD.START_DT &lt;= SYSDATE AND SD.END_DT &gt;= SYSDATE)
			  		  )
			  	   AND SD.DEAL_STOCK_QTY &gt; 0			  	   
			  	   AND S.DISPLAY_YN = 'Y'
			  	   AND SD.DISPLAY_YN = 'Y'
<!-- 				   AND SD.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN' -->
			  	   AND SD.PRODUCT_ID = #{productId}			
			  	   <if test="dealTypeCds !=null and dealTypeCds !=''">	  	   			  	   			  	   
			  	   AND S.DEAL_TYPE_CD IN (${dealTypeCds})			  
			  	   </if>
			  	   <if test="dealId !=null and dealId !=''">	  	   			  	   			  	   
			  	   AND S.DEAL_ID = #{dealId}			  
			  	   </if>	   			  	   		  	  
			  	   ) S
			  	   LEFT OUTER JOIN (SELECT 1 AS ORDER_SEQ, 'DEAL_TYPE_CD.PREMIUM' AS DEAL_TYPE_CD FROM DUAL
						  	   		 UNION ALL
						  	   		 SELECT 2 AS ORDER_SEQ, 'DEAL_TYPE_CD.CHILDREN' AS DEAL_TYPE_CD FROM DUAL
						  	   		 UNION ALL
						  	   		 SELECT 3 AS ORDER_SEQ, 'DEAL_TYPE_CD.B2E' AS DEAL_TYPE_CD FROM DUAL
						  	   		 UNION ALL
						  	   		 SELECT 4 AS ORDER_SEQ, 'DEAL_TYPE_CD.SHOCKDEAL' AS DEAL_TYPE_CD FROM DUAL
						  	   		 UNION ALL
						  	   		 SELECT 5 AS ORDER_SEQ, 'DEAL_TYPE_CD.MEMBER' AS DEAL_TYPE_CD FROM DUAL
						  	   		 UNION ALL
						  	   		 SELECT 6 AS ORDER_SEQ, 'DEAL_TYPE_CD.EMPLOYEE' AS DEAL_TYPE_CD FROM DUAL
						  	   		) OS
			  	   	ON S.DEAL_TYPE_CD = OS.DEAL_TYPE_CD			  	   		 
			 WHERE S.DT_RN = 1	 
			) S						
	</sql>	
	
	<select id="getProductShockDeal" resultType="SpsDeal">
	/* [sps.deal.getProductShockDeal][eddie][2016. 08. 25.] */
		SELECT *
		  FROM (SELECT DEAL.DEAL_ID,
		  			   DEAL.CONTROL_NO,
		               DPRD.END_DT,
                       ROUND (100 - DPRD.SALE_PRICE / DPRD.LIST_PRICE * 100) SALE_RATE,
		               ROW_NUMBER () OVER (ORDER BY DPRD.INS_DT DESC) AS RN
		          FROM    SPS_DEAL DEAL
		               INNER JOIN
		                  SPS_DEALPRODUCT DPRD
		               ON     DEAL.DEAL_ID = DPRD.DEAL_ID
		                  AND DEAL.STORE_ID = DPRD.STORE_ID
		                  AND DPRD.PRODUCT_ID = #{productId}
		                  AND SYSDATE BETWEEN START_DT AND END_DT
		                  AND DEAL_STOCK_QTY > 0
		         WHERE DEAL.DISPLAY_YN = 'Y' AND DEAL.STORE_ID = #{storeId} AND DEAL.DEAL_TYPE_CD = 'DEAL_TYPE_CD.SHOCKDEAL')
		 WHERE RN = 1
	</select>
	<resultMap type="spsDeal" id="getApplyDealListResult" autoMapping="true">
		<id property="dealId" column="DEAL_ID" />
		<collection property="spsDealproducts" resultMap="getApplyDealListResult1"/>
	</resultMap>
	<resultMap type="spsDealproduct" id="getApplyDealListResult1" autoMapping="true">
		<id property="dealId" column="DEAL_ID" />		
		<id property="dealProductNo" column="DEAL_PRODUCT_NO" />
	</resultMap>
	<select id="getApplyDealList" resultMap="getApplyDealListResult">		
		/* [sps.deal.getApplyDealList][dennis][2016. 9. 6.] */
		<include refid="getApplyDeal"/>
		ORDER BY ORDER_SEQ
	</select>		
	
	<select id="getApplyDealOne" resultMap="getApplyDealListResult">		
		/* [sps.deal.getApplyDealOne][dennis][2016. 9. 6.] */
		<include refid="getApplyDeal"/>		
	</select>
	
	<resultMap id="dealgroupList" type="spsDealgroup" >
		<id property="sotreId" column="STORE_ID" />
		<id property="dealId" column="DEAL_ID" />
		<id property="dealGroupNo" column="DEAL_GROUP_NO" />
		
		<result property="dealGroupNo" column="DEAL_GROUP_NO"/>
		<result property="name" column="NAME"/>
		<result property="sortNo" column="SORT_NO"/>
		<collection property="spsDealgroups" ofType="spsDealgroup">
			<id property="sotreId" column="STORE_ID" />
			<id property="dealId" column="DEAL_ID" />
			<id property="dealGroupNo" column="DEPTH2_DEAL_GROUP_NO" />
			
			<result property="dealGroupNo" column="DEPTH2_DEAL_GROUP_NO"/>
			<result property="name" column="DEPTH2_NAME"/>
			<result property="sortNo" column="DEPTH2_SORT_NO"/>
			<result property="img" column="IMG" />
		</collection>
	</resultMap>
	<select id="getDealDepthList" resultMap="dealgroupList">
	SELECT 
		   T1.DEAL_ID,
		   T1.DEAL_GROUP_NO, <!-- 1DEPTH KEY -->
	       T1.NAME,
	       T1.SORT_NO,
	       T2.DEAL_GROUP_NO AS DEPTH2_DEAL_GROUP_NO, <!-- 2DEPT KEY -->
	       T2.NAME AS DEPTH2_NAME,
	       T2.SORT_NO AS DEPTH2_SORT_NO,
	       T2.IMG
	  FROM    SPS_DEALGROUP T1
	       LEFT OUTER JOIN
	          SPS_DEALGROUP T2
	       ON     T2.DEAL_ID = T1.DEAL_ID
	          AND T2.STORE_ID = T1.STORE_ID
	          AND T1.DEAL_GROUP_NO = T2.UPPER_DEAL_GROUP_NO
	          AND T2.DISPLAY_YN = 'Y'
	 WHERE     T1.STORE_ID = #{storeId}
	       AND T1.DEAL_ID = #{dealId}
	       AND T1.UPPER_DEAL_GROUP_NO IS NULL
	       AND T1.DISPLAY_YN = 'Y'
	       ORDER BY T1.SORT_NO ASC, T2.SORT_NO ASC
	</select>
	
	
	
	<select id="getMemberGradeBenefit" resultType="spsDealmember">
	   SELECT T1.* FROM SPS_DEALMEMBER T1 
            JOIN CCS_CODE T2
              ON T1.MEM_GRADE_CD = T2.CD
             AND T2.CD_GROUP_CD = 'MEM_GRADE_CD'
           WHERE  STORE_ID = #{storeId}
            AND DEAL_ID = #{dealId}
            AND DEAL_PRODUCt_NO = #{dealProductNo}
            AND T2.USE_YN = 'Y'
            ORDER BY T2.SORT_NO
	</select>
	
	<select id="getSaleProductPrice" resultType="spsDealsaleproductprice">
            SELECT * FROM SPS_DEALSALEPRODUCTPRICE 
            WHERE  STORE_ID = #{storeId}
            AND DEAL_ID = #{dealId}
            AND DEAL_PRODUCt_NO = #{dealProductNo}
	</select>
	
	
	<update id="updateStock" parameterType="spsDealproduct" statementType="CALLABLE">		
		{call
			DECLARE
					v_dealStockQty INTEGER;
					v_return VARCHAR2(1000);
					v_msg VARCHAR2(1000);
					
			CURSOR data_cur IS
					SELECT DEAL_STOCK_QTY 
			           FROM SPS_DEALPRODUCT
			          WHERE STORE_ID = #{storeId}
			          AND PRODUCT_ID = #{productId}
			          AND DEAL_PRODUCT_NO = #{dealProductNo}
			          AND DEAL_ID = #{dealId}
			        FOR UPDATE OF DEAL_STOCK_QTY WAIT 10;			         						        			 				
			 BEGIN
			       OPEN data_cur;
			       FETCH data_cur INTO v_dealStockQty;
			       CLOSE data_cur;
			       
		       		IF #{stockMinus} = 'MINUS'
		       		   OR (#{dealStockQty} &lt; 0 AND v_dealStockQty &gt;= ABS(#{dealStockQty}))	/* 재고차감 */
		       		   OR #{dealStockQty} &gt;= 0 /* 재고증가 */
		       		THEN
		       			UPDATE SPS_DEALPRODUCT
						   SET UPD_DT = SYSDATE
						      ,UPD_ID = #{updId}
						      ,DEAL_STOCK_QTY = (DEAL_STOCK_QTY + #{dealStockQty})
						 WHERE store_id = #{storeId}
						   AND DEAL_ID = #{dealId}
						   AND PRODUCT_ID = #{productId}
						   AND DEAL_PRODUCT_NO = #{dealProductNo};
						
						v_return := 'SUCCESS';
					ELSE v_return := 'FAIL';
						 v_msg := '딜 재고수량이 부족합니다.';
					END IF;		
						
					#{result,jdbcType=VARCHAR,mode=OUT} := v_return;		
					#{msg,jdbcType=VARCHAR,mode=OUT} := v_msg;
										
			 END
		 }
	</update>
	
</mapper>