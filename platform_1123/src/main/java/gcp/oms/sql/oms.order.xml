<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="oms.order">

	<select id="getOrderLogin" resultType="omsOrder">
		/* [oms.order.getOrderLogin][dennis][2016. 7. 1.] */
		SELECT *
		FROM OMS_ORDER
		WHERE ORDER_ID = #{orderId}	
		 AND ORDER_PWD = #{orderPwd}	
	</select>
	
	<select id="getOrderLoginSearch" resultType="omsOrder">
		/* [osm.order.getOrderLoginSearch][dennis][2016. 7. 1.] */
		SELECT * 
		FROM (
				SELECT	ROWNUM AS CNT,
						ORDER_ID,
						ORDER_PWD
				FROM OMS_ORDER
				WHERE NAME1 = #{name1}
				AND REPLACE(PHONE2,'-','') = #{phone2}
				<choose>
				<when test="orderPwd != null and orderPwd != ''">
					AND ORDER_PWD = #{orderPwd}
				</when>
				<otherwise>
					AND ORDER_DT &lt;= #{orderDt} || '235959'
					AND ORDER_DT &gt;= #{orderDt}
				</otherwise>
				</choose>				
				ORDER BY ORDER_ID DESC
			)
		WHERE CNT = 1
	</select>

	<select id="getNewOrderId" resultType="String">
		/* [oms.order.getNewOrderId][dennis][2016. 7. 26.] */		
		SELECT TO_CHAR (SYSDATE, 'YYYYMMDDHH24MISS')
		          || LPAD (SQ_OMS_ORDER_ID_SEQ.NEXTVAL, 3, 0)		          
		  FROM DUAL
	</select>
	
	<select id="getNewDeliveryAddressNo" resultType="java.math.BigDecimal">
		/* [oms.order.getNewDeliveryAddressNo][dennis][2016. 8. 11.] */
		SELECT NVL((SELECT MAX(DELIVERY_ADDRESS_NO) FROM OMS_DELIVERYADDRESS),0) + 1 FROM DUAL		
	</select>
	
	<resultMap type="omsOrder" id="getOmsOrderByCartResult">
		<id column="STORE_ID" property="storeId"/>
		<id column="ORDER_ID" property="orderId"/>
		<result column="CHANNEL_ID" property="channelId"/>
		<collection property="omsOrderproducts" ofType="omsOrderproduct">
			<id column="ORDER_ID" property="orderId"/>	
			<id column="ORDER_PRODUCT_NO" property="orderProductNo"/>
			<result column="PRODUCT_ID" property="productId"/>
			<result column="SALEPRODUCT_ID" property="saleproductId"/>
			<result column="DEAL_ID" property="dealId"/>
			<result column="OFFSHOP_ID" property="offshopId"/>
			<result column="COUPON_ID" property="couponId"/>
			<result column="STYLE_NO" property="styleNo"/>
			<result column="ORDER_QTY" property="orderQty"/>
			<collection property="omsOrderproducts" ofType="omsOrderproduct">
				<id column="ORDER_ID" property="orderId"/>
				<id column="SUB_ORDER_PRODUDCT_NO" property="orderProductNo"/>		
				<result column="SUB_PRODUCT_ID" property="productId"/>
				<result column="SUB_SALEPRODUCT_ID" property="saleproductId"/>
				<result column="OFFSHOP_ID" property="offshopId"/>
			</collection>
		</collection>
	</resultMap>
	<select id="getOmsOrderByCart" resultMap="getOmsOrderByCartResult">
		SELECT  C.STORE_ID,
				C.CHANNEL_ID,
				C.DEAL_ID,
				C.PRODUCT_ID,
				C.SALEPRODUCT_ID,
				C.QTY AS ORDER_QTY,
				C.OFFSHOP_ID,
				C.COUPON_ID,
				C.STYLE_NO,
				C.CART_PRODUCT_NO AS ORDER_PRODUCT_NO,
				MAX(C.CART_PRODUCT_NO) OVER () + ROWNUM SUB_ORDER_PRODUDCT_NO,
				CU.PRODUCT_ID AS SUB_PRODUCT_ID,
				CU.SALEPRODUCT_ID AS SUB_SALEPRODUCT_ID
		FROM OMS_CART C
			 LEFT OUTER JOIN OMS_CART CU
			 ON C.STORE_ID = CU.STORE_ID
			AND C.CART_PRODUCT_NO = CU.UPPER_CART_PRODUCT_NO 
			AND CU.CART_PRODUCT_TYPE_CD = 'CART_PRODUCT_TYPE_CD.SUB'
			JOIN PMS_PRODUCT PP
			ON C.PRODUCT_ID = PP.PRODUCT_ID
			AND C.STORE_ID = PP.STORE_ID
			AND PP.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
		WHERE C.CART_STATE_CD = 'CART_STATE_CD.REG'	
		AND C.CART_PRODUCT_TYPE_CD IN ('CART_PRODUCT_TYPE_CD.GENERAL','CART_PRODUCT_TYPE_CD.SET')	
		AND C.END_DT &gt;= SYSDATE
		AND C.CART_PRODUCT_NO IN (${cartProductNos})		
		ORDER BY PP.DELIVERY_POLICY_NO DESC,C.PRODUCT_ID, CU.PRODUCT_ID, CU.SALEPRODUCT_ID 
	</select>

	
	<resultMap type="omsOrderproduct" id="getOmsOrderproductByPmsResult" autoMapping="true">
		<result column="REAL_STOCK_QTY" property="realStockQty"/>
		<association property="ccsDeliverypolicy" javaType="ccsDeliverypolicy" resultMap="getOmsOrderproductByPmsResult1"/>			
	</resultMap>
	<resultMap type="ccsDeliverypolicy" id="getOmsOrderproductByPmsResult1" autoMapping="true">
		<id column="DELIVERY_POLICY_NO" property="deliveryPolicyNo"/>
		<result column="DELIVERY_NAME" property="name"/>
		<result column="DELIVERY_FEE" property="deliveryFee"/>
	</resultMap>
	<select id="getOmsOrderproductByPms" resultMap="getOmsOrderproductByPmsResult" flushCache="true">
		/* [oms.order.getOmsOrderproductByPms][dennis][2016. 7. 1.] */
		SELECT	PS.STORE_ID,
				DECODE(PP.PRODUCT_TYPE_CD, 'PRODUCT_TYPE_CD.SET', 'ORDER_PRODUCT_TYPE_CD.SET'
										 , 'PRODUCT_TYPE_CD.GENERAL', 'ORDER_PRODUCT_TYPE_CD.GENERAL'										 
										 , 'PRODUCT_TYPE_CD.PRESENT', 'ORDER_PRODUCT_TYPE_CD.PRESENT'
										 , ''
						) AS ORDER_PRODUCT_TYPE_CD,
				'ORDER_DELIVERY_TYPE_CD.ORDER' AS ORDER_DELIVERY_TYPE_CD	/*발송유형*/,
				PP.CATEGORY_ID,
				PP.BRAND_ID,
				PP.PRODUCT_ID,
				NVL2(PB.NAME,'[' || PB.NAME || '] ','') || PP.NAME AS PRODUCT_NAME,
				PP.PRODUCT_TYPE_CD,
				PP.BUSINESS_ID,
				
				CB.NAME AS BUSINESS_NAME,
				CB.ERP_BUSINESS_ID,
				CB.SALE_TYPE_CD,
				CB.PURCHASE_YN,				
				
				(CASE WHEN CB.SALE_TYPE_CD = 'SALE_TYPE_CD.CONSIGN' AND CB.PURCHASE_YN = 'N'
				 	 THEN PC.ERP_PRODUCT_ID	/* 표준카테고리 */
					 ELSE PP.ERP_PRODUCT_ID
					 END
					 ) AS ERP_PRODUCT_ID,
				PP.SALE_STATE_CD,
				PP.BUSINESS_PRODUCT_ID,
<!-- 				PP.AGE_TYPE_CD, -->
				PP.PRODUCT_NOTICE_TYPE_CD,
				PP.TAX_TYPE_CD,
				PS.SALEPRODUCT_ID,
				PS.SALEPRODUCT_STATE_CD,
				PS.ERP_SALEPRODUCT_ID,
				PS.ERP_COLOR_ID,
				PS.ERP_SIZE_ID,
				PS.BUSINESS_SALEPRODUCT_ID,
				PS.NAME AS SALEPRODUCT_NAME,
				PS.WAREHOUSE_ID,
				PS.LOCATION_ID,
				PS.REAL_STOCK_QTY,
				PS.DELIVERY_TOGETHER_QTY,
				
<!-- 				#{sabangOrderId} AS SABANG_ORDER_ID, -->
<!-- 				#{siteProductId} AS SITE_PRODUCT_ID, -->
<!-- 				#{sabangProductId} AS SABANG_PRODUCT_ID, -->
<!-- 				#{sabangSaleproductId} AS SABANG_SALEPRODUCT_ID, -->
<!-- 				#{lpNo} AS LP_NO, -->
<!-- 				#{currencyCd} AS CURRENCY_CD, -->
<!-- 				#{currencyPrice} AS CURRENCY_PRICE, -->
<!-- 				#{emsNo} AS EMS_NO, -->
<!-- 				#{alipayTransId} AS ALIPAY_TRANS_ID, -->
<!-- 				#{partnerTransId} AS PARTNER_TRANS_ID, -->
				
				PP.OPTION_YN,
				PP.TEXT_OPTION_YN,
				PP.TEXT_OPTION_NAME,
				PP.CONTROL_NO,			
				NVL(PP.PERSON_QTY,0) AS PERSON_QTY,	
				
				SD.DEAL_ID,
				SD.NAME AS DEAL_NAME,
				SD.DEAL_TYPE_CD,
				SD.DEAL_PRODUCT_NO,
				SD.CONTROL_NO AS DEAL_CONTROL_NO,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.LIST_PRICE
					  ELSE PP.LIST_PRICE
					  END) AS LIST_PRICE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.SALE_PRICE
					  ELSE PP.SALE_PRICE
					  END) AS SALE_PRICE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.SUPPLY_PRICE
					  ELSE PP.SUPPLY_PRICE
					  END) AS SUPPLY_PRICE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.ADD_SALE_PRICE
					  ELSE PS.ADD_SALE_PRICE
					  END) AS ADD_SALE_PRICE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.TOTAL_SALE_PRICE
					  ELSE PP.SALE_PRICE + PS.ADD_SALE_PRICE
					  END) AS TOTAL_SALE_PRICE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.COMMISSION_RATE
					  ELSE PP.COMMISSION_RATE
					  END) AS COMMISSION_RATE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.POINT_SAVE_RATE
					  ELSE PP.POINT_SAVE_RATE
					  END) AS POINT_SAVE_RATE,
				(CASE WHEN SD.DEAL_ID IS NOT NULL AND PP.DELIVERY_FEE_FREE_YN = 'N'
					  THEN SD.DELIVERY_FEE_FREE_YN
					  ELSE PP.DELIVERY_FEE_FREE_YN
					  END) AS DELIVERY_FEE_FREE_YN,
				(CASE WHEN SD.DEAL_ID IS NOT NULL
					  THEN SD.TOTAL_SALE_PRICE * SD.POINT_SAVE_RATE  * 0.01
					  ELSE (PP.SALE_PRICE + PS.ADD_SALE_PRICE) * PP.POINT_SAVE_RATE * 0.01
					  END) AS  PRODUCT_POINT,	
				(PP.SALE_PRICE + PS.ADD_SALE_PRICE) AS  ORG_TOTAL_SALE_PRICE,							
				
				#{orderQty} AS ORDER_QTY,
				0 AS CANCEL_QTY,
				0 AS RETURN_QTY,
				0 AS EXCHANGE_QTY,
				0 AS REDELIVERY_QTY,
				0 AS OUT_QTY,
				
				
				PP.DELIVERY_POLICY_NO,
				
				'N' AS RESERVE_YN,
				'N' AS FIXED_DELIVERY_YN,
<!-- 				DECODE(PP.RESERVE_YN,'Y',PP.RESERVE_DELIVERY_DT,SYSDATE) AS DELIVERY_RESERVE_DT, -->
				SYSDATE AS DELIVERY_RESERVE_DT,
				PP.WRAP_YN,
				PP.WRAP_VOLUME,
				PP.OVERSEAS_PURCHASE_YN,
				PP.BOX_DELIVERY_YN,
				PP.BOX_UNIT_CD,
				PP.BOX_UNIT_QTY,
				PP.MIN_QTY,
				
				CD.NAME AS DELIVERY_NAME,
				CD.DELIVERY_SERVICE_CD,
<!-- 				CD.DELIVERY_FEE_TYPE_CD, -->
				NVL(CD.DELIVERY_FEE,0) AS DELIVERY_FEE,
				CD.MIN_DELIVERY_FREE_AMT,
				
				#{offshopId} AS OFFSHOP_ID,
				#{couponId} AS COUPON_ID,
				#{styleNo} AS STYLE_NO														
				
		FROM PMS_PRODUCT PP
			 LEFT OUTER JOIN CCS_BUSINESS CB
			   ON PP.BUSINESS_ID = CB.BUSINESS_ID
<!-- 			  AND CB.BUSINESS_STATE_CD = 'BUSINESS_STATE_CD.RUN' -->
			 LEFT OUTER JOIN PMS_BRAND PB
			   ON PP.BRAND_ID = PB.BRAND_ID
			 LEFT OUTER JOIN PMS_CATEGORY PC
			   ON PP.CATEGORY_ID = PC.CATEGORY_ID
			 LEFT OUTER JOIN CCS_DELIVERYPOLICY CD
			   ON PP.DELIVERY_POLICY_NO = CD.DELIVERY_POLICY_NO
			 JOIN PMS_SALEPRODUCT PS
			   ON PP.PRODUCT_ID = PS.PRODUCT_ID
			  AND PS.SALEPRODUCT_ID = #{saleproductId}
			 LEFT OUTER JOIN
		  	   (
		  	   <include refid="sps.deal.getApplyDeal"/>		  	   		  	  
		  	   ) SD
		  	   ON PS.PRODUCT_ID = SD.PRODUCT_ID
		  	   AND SD.DEAL_ID = #{dealId}		  	   			
		WHERE PP.PRODUCT_ID = #{productId}
	</select>	
	
	<select id="getProductTotalSalePrice" resultType="BigDecimal">
		SELECT PP.SALE_PRICE + NVL(PS.ADD_SALE_PRICE,0) AS TOTAL_SALE_PRICE
		FROM PMS_PRODUCT PP,
			 PMS_SALEPRODUCT PS
		WHERE PP.PRODUCT_ID = PS.PRODUCT_ID
		AND PP.PRODUCT_ID = #{productId}
		AND PS.SALEPRODUCT_ID = #{saleproductId}
	</select>
			
	<resultMap type="omsOrder" id="getOrderCompleteResult" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<collection property="omsDeliveryaddresss" ofType="omsDeliveryaddress" resultMap="getOrderCompleteResult1"/>
		<collection property="omsPayments" ofType="omsPayment" resultMap="getOrderCompleteResult4"/>
		<collection property="omsOrdercoupons" ofType="omsOrdercoupon" resultMap="getOrderCompleteResult5"/>		
	</resultMap>
	<resultMap type="omsDeliveryaddress" id="getOrderCompleteResult1" autoMapping="true">
		<id column="DELIVERY_ADDRESS_NO" property="deliveryAddressNo"/>
		<collection property="omsDeliverys" ofType="omsDelivery" resultMap="getOrderCompleteResult2"/>		
	</resultMap>
	<resultMap type="omsDelivery" id="getOrderCompleteResult2" autoMapping="true">
		<id column="DELIVERY_ADDRESS_NO" property="deliveryAddressNo"/>
		<id column="DELIVERY_POLICY_NO" property="deliveryPolicyNo"/>
		<collection property="omsOrderproducts" ofType="omsOrderproduct" resultMap="getOrderCompleteResult3"/>
	</resultMap>
	<resultMap type="omsOrderproduct" id="getOrderCompleteResult3" autoMapping="true">
		<id column="ORDER_PRODUCT_NO" property="orderProductNo"/>
		<collection property="omsOrderproducts" ofType="omsOrderproduct">
			<id column="SUB_ORDER_PRODUCT_NO" property="orderProductNo"/>
			<result column="SUB_ORDER_PRODUCT_TYPE_CD" property="orderProductTypeCd"/>
			<result column="SUB_PRODUCT_NAME" property="productName"/>
			<result column="SUB_SALEPRODUCT_NAME" property="saleproductName"/>
			<result column="SET_QTY" property="setQty"/>			
		</collection>
	</resultMap>
	<resultMap type="omsPayment" id="getOrderCompleteResult4" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<id column="PAYMENT_NO" property="paymentNo"/>
	</resultMap>
	<resultMap type="omsOrdercoupon" id="getOrderCompleteResult5" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<id column="COUPON_ID" property="couponId"/>
		<id column="COUPON_ISSUE_NO" property="couponIssueNo"/>
		<result column="COUPON_NAME" property="name"/>
	</resultMap>
	<select id="getOrderComplete" resultMap="getOrderCompleteResult">
		/* [oms.order.getOrderComplete][dennis][2016. 7. 22.] */
		SELECT O.ORDER_ID,
			   O.ORDER_DT,
			   O.ORDER_AMT,		
			   O.DEVICE_TYPE_CD,
			   O.ORDER_TYPE_CD,
			   O.GIFT_NAME,
			   O.GIFT_PHONE,
			   O.MEMBER_NO,	   
			   
			   OA.DELIVERY_ADDRESS_NO,
			   OA.NAME1,
			   OA.COUNTRY_NO,
			   OA.PHONE1,
			   OA.PHONE2,
			   OA.ZIP_CD,
			   OA.ADDRESS1,
			   OA.ADDRESS2,
			   OA.EMAIL,
			   OA.NOTE,
			   
			   OD.DELIVERY_POLICY_NO,
			   OD.ORDER_DELIVERY_FEE,
			   OD.APPLY_DELIVERY_FEE,
			   OD.APPLY_WRAP_FEE,
			   
			   OP.ORDER_PRODUCT_NO,
			   OP.ORDER_PRODUCT_TYPE_CD,
			   OP.PRODUCT_ID,
			   OP.SALEPRODUCT_ID,
			   OP.PRODUCT_NAME,			   
			   OP.SALEPRODUCT_NAME,
			   OP.ORDER_QTY,
<!-- 			   (OP.TOTAL_SALE_PRICE - OP.PRODUCT_COUPON_DC_AMT - OP.PLUS_COUPON_DC_AMT) AS TOTAL_SALE_PRICE, -->
			   OP.TOTAL_SALE_PRICE,
			   OP.PRODUCT_COUPON_DC_AMT,
			   OP.PLUS_COUPON_DC_AMT,
			   OP.ORDER_COUPON_DC_AMT,
			   OP.TOTAL_POINT,	
			   OP.WRAP_YN,	   
			   
			   OPP.ORDER_PRODUCT_NO AS SUB_ORDER_PRODUCT_NO,
			   OPP.ORDER_PRODUCT_TYPE_CD AS SUB_ORDER_PRODUCT_TYPE_CD,
			   DECODE (OP.ORDER_PRODUCT_TYPE_CD, 'ORDER_PRODUCT_TYPE_CD.SUB',
			   (SELECT SE.NAME 
			   	  FROM PMS_SETPRODUCT SE 
			   	 WHERE SE.PRODUCT_ID = OP.PRODUCT_ID 
			   	   AND SE.STORE_ID = OP.STORE_ID
			   	   AND SE.SUB_PRODUCT_ID = OPP.PRODUCT_ID), OPP.PRODUCT_NAME) AS SUB_PRODUCT_NAME,
			   OPP.SALEPRODUCT_NAME AS SUB_SALEPRODUCT_NAME,
			   OPP.SET_QTY,			   
			   
			   PA.PAYMENT_NO,
			   PA.PAYMENT_METHOD_CD,
			   PA.PAYMENT_TYPE_CD,
			   PA.PAYMENT_STATE_CD,
			   PA.PAYMENT_AMT,
			   PA.PAYMENT_FEE,
			   PA.PARTIAL_CANCEL_YN,			   
			   
			   PA.PAYMENT_BUSINESS_CD,
			   PA.PAYMENT_BUSINESS_NM,
			   PA.INSTALLMENT_CNT,
			   PA.INTEREST_FREE_YN,
			   PA.CREDITCARD_NO,
			   PA.ESCROW_YN,
			   
			   PA.ACCOUNT_NO,
			   PA.ACCOUNT_HOLDER_NAME,
			   PA.DEPOSITOR_NAME,
			   TO_CHAR(PA.PAYMENT_DT 
					   + TO_NUMBER(NVL((SELECT CP.VALUE FROM CCS_POLICY CP
										WHERE POLICY_ID = 'VIRTUAL_END_DT'
										AND POLICY_TYPE_CD = 'POLICY_TYPE_CD.ORDER')
									,'7'
									)
						),'YYYY/MM/DD') AS VIRTUAL_IN_PERIOD,
			   
			   PA.MOBILE_PHONE,
			   
			   PA.CASH_RECEIPT_APPROVAL_NO,
			   PA.CASH_RECEIPT_TYPE_CD,
			   
			   PA.PG_SHOP_ID,
			   PA.PG_APPROVAL_NO,			   			   
			   
			   
			   OC.COUPON_ID,
			   OC.COUPON_ISSUE_NO,
			   OC.NAME AS COUPON_NAME,
			   OC.COUPON_TYPE_CD,
			   OC.DC_APPLY_TYPE_CD,
			   OC.DC_VALUE,
			   OC.COUPON_DC_AMT,
			   
			   OP.PRESENT_ID,
			   SP.NAME AS PRESENT_NAME,
			   SP.START_DT,
			   SP.END_DT,
			   SP.MIN_ORDER_AMT
			   
		FROM OMS_ORDER O
		JOIN OMS_DELIVERYADDRESS OA
			ON O.ORDER_ID = OA.ORDER_ID
		JOIN OMS_DELIVERY OD
			ON OA.ORDER_ID = OD.ORDER_ID
			AND OA.DELIVERY_ADDRESS_NO = OD.DELIVERY_ADDRESS_NO
		JOIN OMS_ORDERPRODUCT OP
			ON OD.ORDER_ID = OP.ORDER_ID
			AND OD.DELIVERY_ADDRESS_NO = OP.DELIVERY_ADDRESS_NO
			AND OD.DELIVERY_POLICY_NO = OP.DELIVERY_POLICY_NO
			AND OP.UPPER_ORDER_PRODUCT_NO IS NULL
			AND OP.ORDER_PRODUCT_TYPE_CD IN ('ORDER_PRODUCT_TYPE_CD.GENERAL','ORDER_PRODUCT_TYPE_CD.SET','ORDER_PRODUCT_TYPE_CD.ORDERPRESENT')
		LEFT OUTER JOIN OMS_ORDERPRODUCT OPP
			ON OP.ORDER_ID = OPP.ORDER_ID
			AND OP.ORDER_PRODUCT_NO = OPP.UPPER_ORDER_PRODUCT_NO			
			AND OPP.ORDER_PRODUCT_TYPE_CD IN ('ORDER_PRODUCT_TYPE_CD.SUB','ORDER_PRODUCT_TYPE_CD.PRODUCTPRESENT')
		LEFT OUTER JOIN SPS_PRESENT SP
			ON OP.PRESENT_ID = SP.PRESENT_ID				
		LEFT OUTER JOIN OMS_PAYMENT PA			 
			ON O.ORDER_ID = PA.ORDER_ID
		LEFT OUTER JOIN OMS_ORDERCOUPON OC
			ON O.ORDER_ID = OC.ORDER_ID		
		WHERE O.ORDER_ID = #{orderId}
<!-- 		AND O.MEMBER_NO = #{memberNo}  -->
		ORDER BY OP.ORDER_PRODUCT_NO
	</select>
	
	
	<resultMap type="omsRegulardelivery" id="getOrderRegularCompleteResult" autoMapping="true">
		<id column="REGULAR_DELIVERY_ID" property="regularDeliveryId"/>
		<association property="mmsMemberZts" javaType="mmsMemberZts">
			<result column="BILLING_KEY" property="billingKey"/>
			<result column="REGULAR_PAYMENT_BUSINESS_CD" property="regularPaymentBusinessCd"/>
			<result column="REGULAR_PAYMENT_BUSINESS_NM" property="regularPaymentBusinessNm"/>
		</association>
		<collection property="omsRegulardeliveryproducts" resultMap="getOrderRegularCompleteResult1"/>
	</resultMap>
	<resultMap type="omsRegulardeliveryproduct" id="getOrderRegularCompleteResult1" autoMapping="true">
		<id column="REGULAR_DELIVERY_ID" property="regularDeliveryId"/>
		<id column="DELIVERY_PRODUCT_NO" property="deliveryProductNo"/>
		<association property="pmsProduct" javaType="pmsProduct">		
			<result column="PRODUCT_NAME" property="name"/>
			<result column="BRAND_NAME" property="brandName"/>
			<association property="ccsDeliverypolicy" javaType="ccsDeliverypolicy">
				<result column="DELIVERY_FEE" property="deliveryFee"/>
				<result column="MIN_DELIVERY_FREE_AMT" property="minDeliveryFreeAmt"/>
			</association>
		</association>
		<association property="pmsSaleproduct" javaType="pmsSaleproduct">
			<result column="SALEPRODUCT_NAME" property="name"/>
		</association>
		<collection property="omsRegulardeliveryproducts" resultMap="getOrderRegularCompleteResult2"/>
	</resultMap>
	<resultMap type="omsRegulardeliveryproduct" id="getOrderRegularCompleteResult2" autoMapping="true">
		<id column="REGULAR_DELIVERY_ID" property="regularDeliveryId"/>
		<id column="SUB_DELIVERY_PRODUCT_NO" property="deliveryProductNo"/>
		<result column="SUB_PRODUCT_ID" property="productId"/>
		<result column="SUB_SALEPRODUCT_ID" property="saleproductId"/>		
		<result column="SET_QTY" property="setQty"/>
		<association property="pmsProduct" javaType="pmsProduct">
			<result column="SUB_PRODUCT_NAME" property="name"/>
			<result column="SUB_BRAND_NAME" property="brandName"/>			
		</association>
		<association property="pmsSaleproduct" javaType="pmsSaleproduct">
			<result column="SUB_SALEPRODUCT_NAME" property="name"/>
		</association>		
	</resultMap>
	<select id="getOrderRegularComplete" resultMap="getOrderRegularCompleteResult">
		/* [oms.order.getOrderRegularComplete][dennis][2016. 9. 8.] */
		SELECT 	A.*,
				PB.NAME AS BRAND_NAME,
				DECODE(A.DELIVERY_PRODUCT_TYPE_CD,'DELIVERY_PRODUCT_TYPE_CD.SUB',
						(SELECT SE.NAME FROM PMS_SETPRODUCT SE
							WHERE A.PRODUCT_ID = SE.PRODUCT_ID		
							AND SE.STORE_ID = #{storeId}
							AND A.SUB_PRODUCT_ID = SE.SUB_PRODUCT_ID
							),PP.NAME) AS SUB_PRODUCT_NAME,
				SP.NAME AS SUB_SALEPRODUCT_NAME,
				PB2.NAME AS SUB_BRAND_NAME 
		FROM 
			(
				SELECT 
						O.REGULAR_DELIVERY_ID,
						O.NAME1,
						O.PHONE1,
						O.PHONE2,
						O.DELIVERY_NAME1,
						O.DELIVERY_ADDRESS1,
						O.DELIVERY_ADDRESS2,
						O.DELIVERY_ZIP_CD,
						O.DELIVERY_PHONE1,
						O.DELIVERY_PHONE2,
						O.INS_DT,
						
						OP.DELIVERY_PRODUCT_NO,
						OP.DELIVERY_PRODUCT_TYPE_CD,
						OP.PRODUCT_ID,
						OP.SALEPRODUCT_ID,
						PP.NAME AS PRODUCT_NAME,
						SP.NAME AS SALEPRODUCT_NAME,
						OP.LIST_PRICE,
						OP.SALE_PRICE,
						OP.REGULAR_DELIVERY_PRICE,
						OP.SUPPLY_PRICE,
						OP.ORDER_QTY,
						OP.POINT_SAVE_RATE,
						OP.DELIVERY_FEE_FREE_YN,
						OP.DELIVERY_CNT,
						OP.DELIVERY_PERIOD_CD,
						OP.DELIVERY_PERIOD_VALUE,
						
						OPP.DELIVERY_PRODUCT_NO AS SUB_DELIVERY_PRODUCT_NO,
						OPP.SET_QTY,
						OPP.PRODUCT_ID AS SUB_PRODUCT_ID,
						OPP.SALEPRODUCT_ID AS SUB_SALEPRODUCT_ID,
						
						M.BILLING_KEY,
						M.REGULAR_PAYMENT_BUSINESS_CD,
						M.REGULAR_PAYMENT_BUSINESS_NM,
						
						PP.BRAND_ID,
						
						CD.DELIVERY_FEE,
						CD.MIN_DELIVERY_FREE_AMT
					   
				FROM OMS_REGULARDELIVERY O
				JOIN OMS_REGULARDELIVERYPRODUCT OP
					ON OP.REGULAR_DELIVERY_ID = O.REGULAR_DELIVERY_ID
					AND OP.DELIVERY_PRODUCT_TYPE_CD IN ('DELIVERY_PRODUCT_TYPE_CD.GENERAL','DELIVERY_PRODUCT_TYPE_CD.SET')
				JOIN PMS_PRODUCT PP
					ON OP.PRODUCT_ID = PP.PRODUCT_ID
				JOIN PMS_SALEPRODUCT SP
					ON OP.PRODUCT_ID = SP.PRODUCT_ID
					AND OP.SALEPRODUCT_ID = SP.SALEPRODUCT_ID
				LEFT OUTER JOIN CCS_DELIVERYPOLICY CD
			   		ON PP.DELIVERY_POLICY_NO = CD.DELIVERY_POLICY_NO					
				JOIN MMS_MEMBER_ZTS	M
					ON M.MEMBER_NO = O.MEMBER_NO
				LEFT OUTER JOIN OMS_REGULARDELIVERYPRODUCT OPP
					ON OPP.REGULAR_DELIVERY_ID = OP.REGULAR_DELIVERY_ID
					AND OPP.UPPER_DELIVERY_PRODUCT_NO = OP.DELIVERY_PRODUCT_NO
<!-- 					AND OP.DELIVERY_PRODUCT_TYPE_CD = 'DELIVERY_PRODUCT_TYPE_CD.SUB' -->
				WHERE O.REGULAR_DELIVERY_ID = #{regularDeliveryId}
			) A				
			LEFT OUTER JOIN PMS_PRODUCT PP
					ON A.SUB_PRODUCT_ID = PP.PRODUCT_ID
			LEFT OUTER JOIN PMS_SALEPRODUCT SP
				ON A.SUB_PRODUCT_ID = SP.PRODUCT_ID
				AND A.SUB_SALEPRODUCT_ID = SP.SALEPRODUCT_ID
			LEFT OUTER JOIN PMS_BRAND PB
				ON A.BRAND_ID = PB.BRAND_ID
			LEFT OUTER JOIN PMS_BRAND PB2
				ON PP.BRAND_ID = PB2.BRAND_ID
	</select>
	
	<resultMap type="omsPickup" id="getOrderPickupCompleteResult" autoMapping="true">
		<id column="PICKUP_ID" property="pickupId"/>
		<collection property="omsPickupproducts" resultMap="getOrderPickupCompleteResult1"/>
	</resultMap>
	<resultMap type="omsPickupproduct" id="getOrderPickupCompleteResult1" autoMapping="true">
		<id column="PICKUP_ID" property="pickupId"/>
		<id column="PRODUCT_NO" property="productNo"/>
		<id column="OFFSHOP_ID" property="offshopId"/>		
		<association property="pmsProduct" javaType="pmsProduct">
			<result column="PRODUCT_NAME" property="name"/>
			<result column="BRAND_NAME" property="brandName"/>
		</association>
		<association property="pmsSaleproduct" javaType="pmsSaleproduct">
			<result column="SALEPRODUCT_NAME" property="name"/>
		</association>
		<association property="ccsOffshop" javaType="ccsOffshop" column="{storeId=STORE_ID,offshopId=OFFSHOP_ID}" select="ccs.offshop.getCcsOffshop"/>
	</resultMap>
	<select id="getOrderPickupComplete" resultMap="getOrderPickupCompleteResult">
		/* [oms.order.getOrderPickupComplete][dennis][2016. 10. 19.] */
		SELECT		
				O.PICKUP_ID,
				O.PICKUP_REQ_DT,
				
				OP.PRODUCT_NO,
				OP.STORE_ID,
				OP.OFFSHOP_ID,
				OP.PRODUCT_ID,
				OP.SALEPRODUCT_ID,
				OP.ORDER_QTY,
				OP.SALE_PRICE,
				OP.ADD_SALE_PRICE,
				OP.TOTAL_SALE_PRICE,
				TO_CHAR(OP.PICKUP_RESERVE_DT, 'YYYY-MM-DD') AS PICKUP_RESERVE_DT,
				TO_CHAR(OP.PICKUP_RESERVE_DT,'dy','NLS_DATE_LANGUAGE=korean') AS PICKUP_RESERVE_DY,
				
				PP.NAME AS PRODUCT_NAME,
				SP.NAME AS SALEPRODUCT_NAME,
				PB.NAME AS BRAND_NAME
		FROM OMS_PICKUP O
		JOIN OMS_PICKUPPRODUCT OP
			ON O.PICKUP_ID = OP.PICKUP_ID
		JOIN PMS_PRODUCT PP
			ON PP.PRODUCT_ID = OP.PRODUCT_ID
		JOIN PMS_SALEPRODUCT SP
			ON SP.PRODUCT_ID = OP.PRODUCT_ID
			AND SP.SALEPRODUCT_ID = OP.SALEPRODUCT_ID
		LEFT OUTER JOIN PMS_BRAND PB
			ON OP.BRAND_ID = PB.BRAND_ID			
		WHERE O.PICKUP_ID = #{pickupId}		
	</select>
	
	<resultMap type="omsPickup" id="getOmsPickupByCartResult" autoMapping="true">
		<id column="PICKUP_ID" property="pickupId"/>						
		<result column="PICKUP_REQ_DT" property="pickupReqDt"/>					
		<collection property="omsPickupproducts" ofType="omsPickupproduct" resultMap="getOmsPickupByCartResult1"/>
	</resultMap>
	<resultMap type="omsPickupproduct" id="getOmsPickupByCartResult1" autoMapping="true">	
		<result column="PICKUP_REQ_DT" property="pickupReqDt"/>		
		<association property="ccsOffshop" javaType="ccsOffshop">
			<result column="OFFSHOP_NAME" property="name"/>
			<result column="MANAGER_PHONE" property="managerPhone"/>
		</association>
	</resultMap> 
	<select id="getOmsPickupByCart" resultMap="getOmsPickupByCartResult">
		/* [oms.order.getOmsPickupByCart][dennis][2016. 10. 19.] */
		SELECT  C.STORE_ID,
				C.CART_PRODUCT_NO,
				C.OFFSHOP_ID,
				#{memberNo} AS MEMBER_NO,
				'PICKUP_PRODUCT_STATE_CD.REQ' AS PICKUP_PRODUCT_STATE_CD,
				
				PP.BRAND_ID,
				PP.CATEGORY_ID,
				PP.PRODUCT_TYPE_CD,
				PP.PRODUCT_ID,
				PP.ERP_PRODUCT_ID,
				PP.NAME AS PRODUCT_NAME,
				PP.OFFSHOP_PICKUP_YN,
				
				PS.SALEPRODUCT_ID,
				PS.ERP_SALEPRODUCT_ID,
				PS.ERP_COLOR_ID,
				PS.ERP_SIZE_ID,
				PS.NAME AS SALEPRODUCT_NAME,
				
				SYSDATE AS PICKUP_REQ_DT,				
				PP.LIST_PRICE,
				C.SALE_PRICE,
				C.ADD_SALE_PRICE,
				C.TOTAL_SALE_PRICE,
				PP.SUPPLY_PRICE,
				PP.COMMISSION_RATE,
				PP.SALE_STATE_CD,
				PS.SALEPRODUCT_STATE_CD,
				(C.TOTAL_SALE_PRICE * C.QTY) AS ORDER_AMT,
				'PICKUP_SALEPRODUCT_STATE_CD.REQ' AS PICKUP_SALEPRODUCT_STATE_CD,
				C.QTY AS ORDER_QTY,																
				CC.NAME AS OFFSHOP_NAME,
				CC.MANAGER_PHONE 
		FROM OMS_CART C
			 JOIN PMS_PRODUCT PP
			 	ON C.PRODUCT_ID = PP.PRODUCT_ID
			 JOIN PMS_SALEPRODUCT PS
			 	ON C.PRODUCT_ID = PS.PRODUCT_ID
			 	AND C.SALEPRODUCT_ID = PS.SALEPRODUCT_ID
			 JOIN CCS_OFFSHOP CC
			 	ON C.STORE_ID = CC.STORE_ID
			 	AND C.OFFSHOP_ID = CC.OFFSHOP_ID			 			 	
		WHERE C.CART_STATE_CD = 'CART_STATE_CD.REG'	
		AND C.CART_TYPE_CD = 'CART_TYPE_CD.PICKUP'
		AND C.CART_PRODUCT_TYPE_CD = 'CART_PRODUCT_TYPE_CD.GENERAL'	
		AND C.END_DT &gt;= SYSDATE		
		AND C.CART_PRODUCT_NO IN (${cartProductNos})		
		ORDER BY C.OFFSHOP_ID,C.PRODUCT_ID, C.SALEPRODUCT_ID 
	</select>
	
	<resultMap type="omsRegulardelivery" id="getOmsRegulardeliveryByCartResult" autoMapping="true">
		<id column="REGULAR_DELIVERY_ID" property="regularDeliveryId"/>
		<result column="MEMBER_NO" property="memberNo"/>
		<association property="mmsMemberZts" javaType="mmsMemberZts">
			<result property="billingKey" column="BILLING_KEY"/>
			<result property="regularPaymentBusinessCd" column="REGULAR_PAYMENT_BUSINESS_CD"/>
			<result property="regularPaymentBusinessNm" column="REGUALR_PAYMENT_BUSINESS_NM"/>
		</association>				
		<collection property="omsRegulardeliveryproducts" ofType="omsRegulardeliveryproduct">
			<id column="REGULAR_DELIVERY_ID" property="regularDeliveryId"/>			
			<id column="DELIVERY_PRODUCT_NO" property="deliveryProductNo"/>
			<result column="PRODUCT_ID" property="productId"/>
			<result column="SALEPRODUCT_ID" property="saleproductId"/>
			<result column="ORDER_QTY" property="orderQty"/>
			<result column="DELIVERY_CNT" property="deliveryCnt"/>
			<result column="DELIVERY_PERIOD_CD" property="deliveryPeriodCd"/>
			<result column="DELIVERY_PERIOD_VALUE" property="deliveryPeriodValue"/>
			<collection property="omsRegulardeliveryproducts" ofType="omsRegulardeliveryproduct">				
				<id column="SUB_DELIVERY_PRODUDCT_NO" property="deliveryProductNo"/>		
				<result column="SUB_PRODUCT_ID" property="productId"/>
				<result column="SUB_SALEPRODUCT_ID" property="saleproductId"/>
			</collection>
		</collection>
	</resultMap>
	<select id="getOmsRegulardeliveryByCart" resultMap="getOmsRegulardeliveryByCartResult">
		/* [oms.order.getOmsRegulardeliveryByCart][dennis][2016. 8. 3.] */
		SELECT  '1' AS REGULAR_DELIVERY_ID,
				#{memberNo} AS MEMBER_NO,
				RE.BILLING_KEY,
				RE.REGULAR_PAYMENT_BUSINESS_CD,
				RE.REGULAR_PAYMENT_BUSINESS_NM,
				C.PRODUCT_ID,
				C.SALEPRODUCT_ID,
				C.QTY AS ORDER_QTY,
				C.CART_PRODUCT_NO AS DELIVERY_PRODUCT_NO,
				C.DELIVERY_CNT,
				C.DELIVERY_PERIOD_CD,
				C.DELIVERY_PERIOD_VALUE,
				MAX(C.CART_PRODUCT_NO) OVER () + ROWNUM SUB_DELIVERY_PRODUDCT_NO,
				CU.PRODUCT_ID AS SUB_PRODUCT_ID,
				CU.SALEPRODUCT_ID AS SUB_SALEPRODUCT_ID
		FROM OMS_CART C
			 LEFT OUTER JOIN OMS_CART CU
				 ON C.STORE_ID = CU.STORE_ID
				AND C.CART_PRODUCT_NO = CU.UPPER_CART_PRODUCT_NO 
				AND CU.CART_PRODUCT_TYPE_CD = 'CART_PRODUCT_TYPE_CD.SUB'
			JOIN PMS_PRODUCT PP
				ON C.STORE_ID = PP.STORE_ID
				AND C.PRODUCT_ID = PP.PRODUCT_ID
				AND PP.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
			LEFT OUTER JOIN MMS_MEMBER_ZTS RE
				ON RE.MEMBER_NO = #{memberNo}			   
		WHERE C.CART_STATE_CD = 'CART_STATE_CD.REG'	
		AND C.CART_PRODUCT_TYPE_CD IN ('CART_PRODUCT_TYPE_CD.GENERAL','CART_PRODUCT_TYPE_CD.SET')	
		AND C.END_DT &gt;= SYSDATE
		AND C.CART_PRODUCT_NO IN (${cartProductNos})		
		ORDER BY C.PRODUCT_ID, CU.PRODUCT_ID, CU.SALEPRODUCT_ID 
	</select>
	
	<resultMap type="omsRegulardeliveryproduct" id="gopResult" autoMapping="true">		
		<association property="pmsProduct" javaType="pmsProduct" resultMap="gopResult1"/>		
		<association property="pmsSaleproduct" javaType="pmsSaleproduct" resultMap="gopResult2"/>		
	</resultMap>
	<resultMap type="pmsProduct" id="gopResult1" autoMapping="true">
		<id column="PRODUCT_ID" property="productId"/>
		<result column="PRODUCT_NAME" property="name"/>
		<result column="SALE_STATE_CD" property="saleStateCd"/>
		<association property="ccsDeliverypolicy" javaType="ccsDeliverypolicy" resultMap="gopResult3"/>		
	</resultMap>
	<resultMap type="pmsSaleproduct" id="gopResult2" autoMapping="true">
		<id column="PRODUCT_ID" property="productId"/>
		<id column="SALEPRODUCT_ID" property="saleproductId"/>
		<result column="SALEPRODUCT_NAME" property="name"/>
		<result column="SALEPRODUCT_STATE_CD" property="saleproductStateCd"/>
	</resultMap>
	<resultMap type="ccsDeliverypolicy" id="gopResult3" autoMapping="true">
		<id column="DELIVERY_POLICY_NO" property="deliveryPolicyNo"/>
		<result column="DELIVERY_NAME" property="name"/>
	</resultMap>
	<select id="getOmsRegulardeliveryproductByPms" resultMap="gopResult" flushCache="true">
		/* [oms.order.getOmsRegulardeliveryproductByPms][dennis][2016. 8. 2.] */
		SELECT																	
				#{regularDeliveryId} AS REGULAR_DELIVERY_ID,
				DECODE(PP.PRODUCT_TYPE_CD, 'PRODUCT_TYPE_CD.SET', 'DELIVERY_PRODUCT_TYPE_CD.SET'
										 , 'PRODUCT_TYPE_CD.GENERAL', 'DELIVERY_PRODUCT_TYPE_CD.GENERAL'
										 , ''
						) AS DELIVERY_PRODUCT_TYPE_CD,
				PP.STORE_ID,
				PP.PRODUCT_ID,
				PP.SALE_STATE_CD,
				PS.SALEPRODUCT_ID,
				PS.SALEPRODUCT_STATE_CD,
				PP.LIST_PRICE,
				(PP.SALE_PRICE + PS.ADD_SALE_PRICE) AS SALE_PRICE,
				PP.REGULAR_DELIVERY_PRICE,
				PP.SUPPLY_PRICE,
				PP.COMMISSION_RATE,
				DECODE(PP.REGULAR_DELIVERY_POINT_SAVE_YN,'Y',PP.POINT_SAVE_RATE,0) AS POINT_SAVE_RATE,
<!-- 				PP.DELIVERY_FEE_FREE_YN, -->
				#{orderQty} AS ORDER_QTY,
				'DELIVERY_PRODUCT_STATE_CD.REQ' AS DELIVERY_PRODUCT_STATE_CD,
				
				NVL2(PB.NAME,'[' || PB.NAME || '] ','') || PP.NAME AS PRODUCT_NAME,
				
				PP.DELIVERY_POLICY_NO,
				NVL(PP.REGULAR_DELIVERY_FEE_FREE_YN,'N') AS DELIVERY_FEE_FREE_YN,
				
				PP.REGULAR_DELIVERY_MIN_CNT,
				PP.REGULAR_DELIVERY_MAX_CNT,				
				#{deliveryCnt} AS DELIVERY_CNT,
				#{deliveryPeriodCd} AS DELIVERY_PERIOD_CD,
				#{deliveryPeriodValue} AS DELIVERY_PERIOD_VALUE,
				PP.REGULAR_DELIVERY_POINT_SAVE_YN,
				PS.NAME AS SALEPRODUCT_NAME,
												
				CD.DELIVERY_FEE,
				CD.MIN_DELIVERY_FREE_AMT,				
				
				PP.REGULAR_DELIVERY_YN
		FROM PMS_PRODUCT PP
			 LEFT OUTER JOIN CCS_BUSINESS CB
			   ON PP.BUSINESS_ID = CB.BUSINESS_ID
<!-- 			  AND CB.BUSINESS_STATE_CD = 'BUSINESS_STATE_CD.RUN' -->
			 LEFT OUTER JOIN PMS_BRAND PB
			   ON PP.BRAND_ID = PB.BRAND_ID
			 LEFT OUTER JOIN CCS_DELIVERYPOLICY CD
			   ON PP.DELIVERY_POLICY_NO = CD.DELIVERY_POLICY_NO
			 JOIN PMS_SALEPRODUCT PS
			   ON PP.PRODUCT_ID = PS.PRODUCT_ID
			  AND PS.SALEPRODUCT_ID = #{saleproductId}			 			 			
		WHERE PP.PRODUCT_ID = #{productId}		
	</select>
	
	<select id="calcRegularWeek" resultType="map">
		/* [oms.order.calcRegularWeek][dennis][2016. 8. 3.] */
		WITH DATA
		     AS (SELECT TARGET_DATE + CNT AS TARGET_DATE
		           FROM (SELECT (CASE
		                            WHEN SYSDATE + 3 &gt; TARGET_DATE
		                            THEN
		                               TARGET_DATE + 7
		                            ELSE
		                               TARGET_DATE
		                         END)
		                           TARGET_DATE
		                   FROM (SELECT (SYSDATE + (TO_NUMBER(#{deliveryPeriodValue}) + 7 - TO_CHAR (SYSDATE, 'd')))
		                                   AS TARGET_DATE
		                           FROM DUAL)),
		                (    SELECT (LEVEL-1) * 7 * TO_NUMBER(#{deliveryPeriodCd}) AS CNT
		                       FROM DUAL
		                 CONNECT BY LEVEL &lt;= TO_NUMBER(#{deliveryCnt})))
			SELECT    TO_CHAR (TARGET_DATE, 'YYYY-MM-DD')
			       || '('
			       || TO_CHAR (TARGET_DATE, 'dy','NLS_DATE_LANGUAGE=korean')
			       || ') '
			          AS TARGET_DATE,
			       TO_CHAR(TARGET_DATE,'YYYY-MM-DD') AS DELIVERY_DATE,
			       ROWNUM AS DELIVERY_ORDER
			  FROM DATA
	</select>
	
	<select id="calcRegularMonth" resultType="map">
		/* [oms.order.calcRegularMonth][dennis][2016. 8. 3.] */
		WITH DATA
		     AS (SELECT (CASE
		                    WHEN TO_CHAR (ADD_MONTHS (TARGET_DATE, CNT), 'd') = 1
		                    THEN
		                       ADD_MONTHS (TARGET_DATE, CNT) + 1
		                    WHEN TO_CHAR (ADD_MONTHS (TARGET_DATE, CNT), 'd') = 7
		                    THEN
		                       ADD_MONTHS (TARGET_DATE, CNT) + 2
		                    ELSE
		                       ADD_MONTHS (TARGET_DATE, CNT)
		                 END)
		                   AS TARGET_DATE
		           FROM (SELECT (CASE
		                            WHEN SYSDATE + 3 &gt; TARGET_DATE
		                            THEN
		                               ADD_MONTHS (TARGET_DATE, 1)
		                            ELSE
		                               TARGET_DATE
		                         END)
		                           TARGET_DATE
		                   FROM (SELECT TO_DATE (
		                                      SUBSTR (TO_CHAR (SYSDATE, 'YYYYMMDD'),
		                                              0,
		                                              6)
		                                   || LPAD(${deliveryPeriodValue},2,'0'),
		                                   'YYYYMMDD')
		                                   AS TARGET_DATE
		                           FROM DUAL)),
		                (    SELECT (LEVEL-1) * TO_NUMBER(#{deliveryPeriodCd}) AS CNT
		                       FROM DUAL
		                 CONNECT BY LEVEL &lt;= TO_NUMBER(#{deliveryCnt})))
		SELECT    TO_CHAR (TARGET_DATE, 'YYYY-MM-DD')
		       || '('
		       || TO_CHAR (TARGET_DATE, 'dy','NLS_DATE_LANGUAGE=korean')
		       || ') '
		          AS TARGET_DATE,
		       TO_CHAR(TARGET_DATE,'YYYY-MM-DD') AS DELIVERY_DATE,
		       ROWNUM AS DELIVERY_ORDER
		  FROM DATA
		ORDER BY TARGET_DATE
	</select>
	
	<select id="getOrdercouponByCoupon" resultType="omsOrdercoupon">
		/* [oms.order.getOrdercouponByCoupon][dennis][2016. 10. 8.] */
		SELECT
				SI.COUPON_ID,
				SI.COUPON_ISSUE_NO,
				SI.STORE_ID,
				#{orderId} AS ORDER_ID,
				S.NAME,
				S.COUPON_TYPE_CD,
				S.DC_APPLY_TYPE_CD,
				S.DC_VALUE,
				NVL(S.MAX_DC_AMT,999999) AS MAX_DC_AMT,
				S.AFFILIATE_YN,
				S.BUSINESS_ID,
				S.BUSINESS_BURDEN_RATE,
				NVL(S.MIN_ORDER_AMT,0) AS MIN_ORDER_AMT,
				S.FEE_LIMIT_APPLY_YN,
				'COUPON_STATE_CD.APPLY' AS COUPON_STATE_CD,
				SI.COUPON_ISSUE_STATE_CD,
				S.SINGLE_APPLY_YN
		FROM SPS_COUPONISSUE SI,
			 SPS_COUPON S
		WHERE SI.COUPON_ID = S.COUPON_ID		
		AND SI.COUPON_ID = #{couponId}
		AND SI.COUPON_ISSUE_NO = #{couponIssueNo}		
	</select>
	
	<select id="getOrderproductList" resultType="omsOrderproduct">
		/* [oms.order.ordergetOrderproductList][dennis][2016. 10. 22.] */
		SELECT
				STORE_ID,
				ORDER_ID,
				ORDER_PRODUCT_NO,
				SALEPRODUCT_ID,
				PRODUCT_NAME,
				SALEPRODUCT_NAME,
				ORDER_QTY,
				PRODUCT_ID,
				DEAL_ID,
				DEAL_PRODUCT_NO
		FROM OMS_ORDERPRODUCT
		WHERE ORDER_ID = #{orderId}
	</select>
	
	<update id="insertOmsERPIF">
		/* [oms.order.insertOmsERPIF][dennis][2016. 8. 11.] */
		INSERT INTO OMS_ERPIF (ORDER_ID,
		                       ORDER_PRODUCT_NO,
		                       ERP_IF_NO,
		                       ERP_PRODUCT_TYPE_CD,
		                       QTY,
		                       SALE_AMT,
		                       OWN_DC_AMT,
		                       BUSINESS_DC_AMT,
		                       PLUS_COUPON_DC_AMT,
		                       ORDER_COUPON_DC_AMT,
		                       DEPOSIT_AMT,
		                       USE_POINT,
		                       SAVE_POINT,
		                       INS_ID,
		                       INS_DT,
		                       UPD_ID,
		                       UPD_DT)
		 	SELECT OP.ORDER_ID,
			       OP.ORDER_PRODUCT_NO,
			       (SELECT   NVL ( (SELECT MAX (ERP_IF_NO)
			                          FROM OMS_ERPIF OI
			                         WHERE OI.ORDER_ID = OP.ORDER_ID),
			                      0)
			               + 1
			          FROM DUAL)
			          AS ERP_IF_NO,
			       'ERP_PRODUCT_TYPE_CD.ORDER' AS ERP_PRODUCT_TYPE_CD,
			       OP.ORDER_QTY,
			       NVL (OP.TOTAL_SALE_PRICE, 0) AS SALE_AMT,
			       NVL (OP.OWN_DC_AMT, 0) AS OWN_DC_AMT,
			       NVL (OP.BUSINESS_DC_AMT, 0) AS BUSINESS_DC_AMT,
			       NVL (OP.PLUS_COUPON_DC_AMT, 0) AS PLUS_COUPON_DC_AMT,
			       NVL (OP.ORDER_COUPON_DC_AMT, 0) AS ORDER_COUPON_DC_AMT,
			       NVL (OP.USE_DEPOSIT, 0) AS USE_DEPOSIT,
			       NVL (OP.USE_POINT, 0) AS USE_POINT,
			       NVL (OP.SAVE_POINT, 0) AS SAVE_POINT,
			       #{insId} AS INS_ID,
			       SYSDATE AS INS_DT,
			       #{updId} AS UPD_ID,
			       SYSDATE AS UPD_DT
			  FROM (SELECT ORDER_ID,
			               ORDER_PRODUCT_NO,
			               ORDER_QTY,
			               TOTAL_SALE_PRICE,
			               OWN_DC_AMT,
			               BUSINESS_DC_AMT,
			               PLUS_COUPON_DC_AMT,
			               (CASE
			                   WHEN LV = TOTAL_CNT
			                   THEN
			                        ORDER_COUPON_DC_AMT
			                      + TOTAL_ORDER_COUPON_DC_AMT
			                      - SUM_ORDER_COUPON_DC_AMT
			                   ELSE
			                      ORDER_COUPON_DC_AMT
			                END)
			                  AS ORDER_COUPON_DC_AMT,
			               (CASE
			                   WHEN LV = TOTAL_CNT
			                   THEN
			                      USE_DEPOSIT + TOTAL_USE_DEPOSIT - SUM_USE_DEPOSIT
			                   ELSE
			                      USE_DEPOSIT
			                END)
			                  AS USE_DEPOSIT,
			               (CASE
			                   WHEN LV = TOTAL_CNT
			                   THEN
			                      USE_POINT + TOTAL_USE_POINT - SUM_USE_POINT
			                   ELSE
			                      USE_POINT
			                END)
			                  AS USE_POINT,
			               SAVE_POINT
			          FROM (SELECT OP.ORDER_ID,
			                       OP.ORDER_PRODUCT_NO,
			                       OP.ORDER_QTY,
			                       OP.TOTAL_SALE_PRICE,
			                       OP.OWN_DC_AMT,
			                       OP.BUSINESS_DC_AMT,
			                       OP.PLUS_COUPON_DC_AMT,
			                       ROUND (OC.COUPON_DC_AMT * OP.ORDER_COUPON_RATE)
			                          AS ORDER_COUPON_DC_AMT,
			                       COUPON_DC_AMT AS TOTAL_ORDER_COUPON_DC_AMT,
			                       SUM (ROUND (OC.COUPON_DC_AMT * OP.ORDER_COUPON_RATE))
			                          OVER (PARTITION BY OP.ORDER_ID)
			                          AS SUM_ORDER_COUPON_DC_AMT,
			                       ROUND (PA2.TOTAL_USE_DEPOSIT * RATE) AS USE_DEPOSIT,
			                       PA2.TOTAL_USE_DEPOSIT,
			                       SUM (ROUND (PA2.TOTAL_USE_DEPOSIT * RATE))
			                          OVER (PARTITION BY OP.ORDER_ID)
			                          AS SUM_USE_DEPOSIT,
			                       ROUND (PA.TOTAL_USE_POINT * RATE) AS USE_POINT,
			                       PA.TOTAL_USE_POINT,
			                       SUM (ROUND (PA.TOTAL_USE_POINT * RATE))
			                          OVER (PARTITION BY OP.ORDER_ID)
			                          AS SUM_USE_POINT,
			                       OP.SAVE_POINT,
			                       LV,
			                       TOTAL_CNT
			                  FROM (SELECT ROW_NUMBER ()
			                               OVER (PARTITION BY OP.ORDER_ID
			                                     ORDER BY OP.ORDER_PRODUCT_NO)
			                                  AS LV,
			                               COUNT (1) OVER (PARTITION BY OP.ORDER_ID)
			                                  AS TOTAL_CNT,
			                               OP.ORDER_ID,
			                               OP.ORDER_PRODUCT_NO,
			                               OP.TOTAL_SALE_PRICE,
			                               OP.SUM_PRICE,
			                               ROUND (OP.TOTAL_SALE_PRICE / OP.SUM_PRICE, 2)
			                                  AS RATE,
			                               OP.ORDER_COUPON_ID,
			                               OP.ORDER_COUPON_ISSUE_NO,
			                               (CASE
			                                   WHEN OP.ORDER_COUPON_ISSUE_NO IS NOT NULL
			                                   THEN
			                                      ROUND (
			                                           OP.TOTAL_SALE_PRICE
			                                         / OP.SUM_COUPON_APPLY_PRICE,
			                                         2)
			                                   ELSE
			                                      0
			                                END)
			                                  AS ORDER_COUPON_RATE,
			                               OP.ORDER_QTY,
			                               OP.SAVE_POINT,
			                               (OP.TOTAL_DC_AMT - OP.BUSINESS_DC_AMT)
			                                  AS OWN_DC_AMT,
			                               OP.BUSINESS_DC_AMT,
			                               OP.PLUS_COUPON_DC_AMT
			                          FROM (SELECT OP.ORDER_ID,
			                                       OP.ORDER_PRODUCT_NO,
			                                       (  (OP.TOTAL_SALE_PRICE * OP.ORDER_QTY)
			                                        + OP.CALIBRATE_SALE_PRICE)
			                                          AS TOTAL_SALE_PRICE,
			                                       SUM (
			                                            (  OP.TOTAL_SALE_PRICE
			                                             * OP.ORDER_QTY)
			                                          + OP.CALIBRATE_SALE_PRICE)
			                                       OVER (PARTITION BY OP.ORDER_ID)
			                                          AS SUM_PRICE,
			                                       OP.ORDER_COUPON_ID,
			                                       OP.ORDER_COUPON_ISSUE_NO,
			                                       SUM (
			                                          (CASE
			                                              WHEN OP.ORDER_COUPON_ISSUE_NO
			                                                      IS NOT NULL
			                                              THEN
			                                                 (  (  OP.TOTAL_SALE_PRICE
			                                                     * OP.ORDER_QTY)
			                                                  + OP.CALIBRATE_SALE_PRICE)
			                                              ELSE
			                                                 0
			                                           END))
			                                       OVER (PARTITION BY OP.ORDER_ID)
			                                          AS SUM_COUPON_APPLY_PRICE,
			                                       OP.ORDER_QTY,
			                                       (  (OP.TOTAL_POINT * OP.ORDER_QTY)
			                                        + OP.CALIBRATE_POINT)
			                                          AS SAVE_POINT,
			                                       (  (  OP.PRODUCT_COUPON_DC_AMT * OP.ORDER_QTY)
			                                        + OP.CALIBRATE_PRODUCT_DC_AMT)
			                                          AS TOTAL_DC_AMT,
			                                         ROUND (
			                                              OP.PRODUCT_COUPON_DC_AMT
			                                            * OP.ORDER_QTY
			                                            * NVL (OP.PRODUCT_RATE, 0)
			                                            / 100,
			                                            2) AS BUSINESS_DC_AMT,
			                                       (OP.PLUS_COUPON_DC_AMT * OP.ORDER_QTY) AS PLUS_COUPON_DC_AMT
			                                  FROM (SELECT OP.ORDER_ID,
			                                               OP.ORDER_PRODUCT_NO,
			                                               OP.ORDER_QTY,
			                                               OP.TOTAL_SALE_PRICE,
			                                               OP.TOTAL_POINT,
			                                               OP.ORDER_COUPON_ID,
			                                               OP.ORDER_COUPON_ISSUE_NO,
			                                               OP.PRODUCT_COUPON_DC_AMT,
			                                               OP.PLUS_COUPON_DC_AMT,
			                                               (CASE
			                                                   WHEN     OP.ORDER_PRODUCT_TYPE_CD =
			                                                               'ORDER_PRODUCT_TYPE_CD.SUB'
			                                                        AND RANK ()
			                                                            OVER (
			                                                               PARTITION BY OP.ORDER_ID,
			                                                                            OP.UPPER_ORDER_PRODUCT_NO
			                                                               ORDER BY
			                                                                  OP.TOTAL_SALE_PRICE DESC) =
			                                                               COUNT (
			                                                                  *)
			                                                               OVER (
			                                                                  PARTITION BY OP.ORDER_ID,
			                                                                               OP.UPPER_ORDER_PRODUCT_NO)
			                                                   THEN
			                                                      SETOP.CALIBRATE_SALE_PRICE
			                                                   ELSE
			                                                      0
			                                                END)
			                                                  AS CALIBRATE_SALE_PRICE,
			                                               (CASE
			                                                   WHEN     OP.ORDER_PRODUCT_TYPE_CD =
			                                                               'ORDER_PRODUCT_TYPE_CD.SUB'
			                                                        AND RANK ()
			                                                            OVER (
			                                                               PARTITION BY OP.ORDER_ID,
			                                                                            OP.UPPER_ORDER_PRODUCT_NO
			                                                               ORDER BY
			                                                                  OP.TOTAL_SALE_PRICE DESC) =
			                                                               COUNT (
			                                                                  *)
			                                                               OVER (
			                                                                  PARTITION BY OP.ORDER_ID,
			                                                                               OP.UPPER_ORDER_PRODUCT_NO)
			                                                   THEN
			                                                      SETOP.CALIBRATE_POINT
			                                                   ELSE
			                                                      0
			                                                END)
			                                                  AS CALIBRATE_POINT,
			                                               (CASE
			                                                   WHEN     OP.ORDER_PRODUCT_TYPE_CD =
			                                                               'ORDER_PRODUCT_TYPE_CD.SUB'
			                                                        AND RANK ()
			                                                            OVER (
			                                                               PARTITION BY OP.ORDER_ID,
			                                                                            OP.UPPER_ORDER_PRODUCT_NO
			                                                               ORDER BY
			                                                                  OP.TOTAL_SALE_PRICE DESC) =
			                                                               COUNT (
			                                                                  *)
			                                                               OVER (
			                                                                  PARTITION BY OP.ORDER_ID,
			                                                                               OP.UPPER_ORDER_PRODUCT_NO)
			                                                   THEN
			                                                      SETOP.CALIBRATE_ORDER_DC_AMT
			                                                   ELSE
			                                                      0
			                                                END)
			                                                  AS CALIBRATE_ORDER_DC_AMT,
			                                               OC.BUSINESS_BURDEN_RATE
			                                                  PRODUCT_RATE,
			                                               OC2.BUSINESS_BURDEN_RATE
			                                                  PLUS_RATE
			                                          FROM OMS_ORDERPRODUCT OP
			                                               LEFT OUTER JOIN OMS_ORDERPRODUCT SETOP
			                                                  ON     SETOP.ORDER_ID =
			                                                            OP.ORDER_ID
			                                                     AND SETOP.ORDER_PRODUCT_NO =
			                                                            OP.UPPER_ORDER_PRODUCT_NO
			                                                     AND SETOP.ORDER_PRODUCT_TYPE_CD =
			                                                            'ORDER_PRODUCT_TYPE_CD.SET'
			                                                     AND SETOP.ORDER_PRODUCT_STATE_CD =
			                                                            'ORDER_PRODUCT_STATE_CD.READY'
			                                               LEFT OUTER JOIN OMS_ORDERCOUPON OC
			                                                  ON     OP.ORDER_ID =
			                                                            OC.ORDER_ID
			                                                     AND OP.PRODUCT_COUPON_ISSUE_NO =
			                                                            OC.COUPON_ISSUE_NO
			                                                     AND OP.PRODUCT_COUPON_ID =
			                                                            OC.COUPON_ID
			                                                     AND OC.COUPON_STATE_CD =
			                                                            'COUPON_STATE_CD.APPLY'
			                                               LEFT OUTER JOIN OMS_ORDERCOUPON OC2
			                                                  ON     OP.ORDER_ID =
			                                                            OC2.ORDER_ID
			                                                     AND OP.PLUS_COUPON_ISSUE_NO =
			                                                            OC2.COUPON_ISSUE_NO
			                                                     AND OP.PLUS_COUPON_ID =
			                                                            OC2.COUPON_ID
			                                                     AND OC.COUPON_STATE_CD =
			                                                            'COUPON_STATE_CD.APPLY'
			                                         WHERE     OP.ORDER_PRODUCT_TYPE_CD IN
			                                                      ('ORDER_PRODUCT_TYPE_CD.GENERAL',
			                                                       'ORDER_PRODUCT_TYPE_CD.SUB')
			                                               AND OP.ORDER_PRODUCT_STATE_CD =
			                                                      'ORDER_PRODUCT_STATE_CD.READY'
			                                               AND OP.ORDER_ID =
			                                                      #{orderId}) OP) OP) OP,
			                       (SELECT OP.ORDER_ID, OP.PAYMENT_AMT AS TOTAL_USE_POINT
			                          FROM OMS_PAYMENT OP
			                         WHERE     OP.PAYMENT_METHOD_CD =
			                                      'PAYMENT_METHOD_CD.POINT'
			                               AND OP.PAYMENT_STATE_CD =
			                                      'PAYMENT_STATE_CD.PAYMENT'
			                               AND OP.ORDER_ID = #{orderId}) PA,
			                       (SELECT OP.ORDER_ID,
			                               OP.PAYMENT_AMT AS TOTAL_USE_DEPOSIT
			                          FROM OMS_PAYMENT OP
			                         WHERE     OP.PAYMENT_METHOD_CD =
			                                      'PAYMENT_METHOD_CD.DEPOSIT'
			                               AND OP.PAYMENT_STATE_CD =
			                                      'PAYMENT_STATE_CD.PAYMENT'
			                               AND OP.ORDER_ID = #{orderId}) PA2,
			                       (SELECT OC.COUPON_ID,
			                               OC.COUPON_ISSUE_NO,
			                               OC.ORDER_ID,
			                               OC.COUPON_DC_AMT
			                          FROM OMS_ORDERCOUPON OC
			                         WHERE     OC.COUPON_STATE_CD =
			                                      'COUPON_STATE_CD.APPLY'
			                               AND OC.COUPON_TYPE_CD = 'COUPON_TYPE_CD.ORDER'
			                               AND OC.ORDER_ID = #{orderId}) OC
			                 WHERE     OP.ORDER_ID = PA.ORDER_ID(+)
			                       AND OP.ORDER_ID = PA2.ORDER_ID(+)
			                       AND OP.ORDER_ID = OC.ORDER_ID(+)
			                       AND OP.ORDER_COUPON_ID = OC.COUPON_ID(+)
			                       AND OP.ORDER_COUPON_ISSUE_NO = OC.COUPON_ISSUE_NO(+))
			        UNION ALL
			        SELECT OP.ORDER_ID,
			               OP.ORDER_PRODUCT_NO,
			               OP.ORDER_QTY,
			               OP.TOTAL_SALE_PRICE,
			               0 AS OWN_DC_AMT,
			               0 AS BUSINESS_DC_AMT,
			               0 AS PLUS_COUPON_DC_AMT,
			               0 AS ORDER_COUPON_DC_AMT,
			               0 AS USE_DEPOSIT,
			               0 AS USE_POINT,
			               0 AS SAVE_POINT
			          FROM OMS_ORDERPRODUCT OP
			         WHERE     OP.ORDER_PRODUCT_TYPE_CD IN
			                      ('ORDER_PRODUCT_TYPE_CD.ORDERPRESENT',
			                       'ORDER_PRODUCT_TYPE_CD.PRODUCTPRESENT')
			               AND OP.ORDER_PRODUCT_STATE_CD = 'ORDER_PRODUCT_STATE_CD.READY'
			               AND OP.ORDER_ID = #{orderId}
			        ORDER BY ORDER_ID DESC, ORDER_PRODUCT_NO) OP
	</update>
	
	<select id="getPaymentData" resultType="omsPayment">
		/* [oms.order.getPaymentData][dennis][2016. 9. 9.] */
		SELECT
			*
		FROM OMS_PAYMENT 
		WHERE ORDER_ID = #{orderId}		
		<if test="paymentMethodCd != null and paymentMethodCd !=''">
		AND PAYMENT_METHOD_CD = #{paymentMethodCd}
		</if>
		<if test="pgApprovalNo != null and pgApprovalNo !=''">
		AND PG_APPROVAL_NO = #{pgApprovalNo}
		AND PAYMENT_STATE_CD = 'PAYMENT_STATE_CD.PAYMENT'
		</if>
	</select>
	
	<resultMap type="omsOrder" id="getRegularDeliveryListByDateResult" autoMapping="true">
		<id property="orderId" column="ORDER_ID"/>
		<result property="orderAmt" column="TOTAL_ORDER_SALE_PRICE"/>
		<result property="totalOrderSalePrice" column="TOTAL_ORDER_SALE_PRICE"/>
		<result property="dcAmt" column="TOTAL_ORDER_SALE_PRICE"/>
		<result property="paymentAmt" column="PAYMENT_AMT"/>		
		<collection property="omsDeliveryaddresss" resultMap="getRegularDeliveryListByDateResult1"/>
		<collection property="omsOrderproducts" resultMap="getRegularDeliveryListByDateResult4"/>
		<collection property="omsPayments" resultMap="getRegularDeliveryListByDateResult6"/>
	</resultMap>
	<resultMap type="omsDeliveryaddress" id="getRegularDeliveryListByDateResult1">
		<id property="orderId" column="ORDER_ID"/>
		<id property="deliveryAddressNo" column="DELIVERY_ADDRESS_NO"/>
		<result property="name1" column="DELIVERY_NAME1"/>
		<result property="phone1" column="DELIVERY_PHONE1"/>
		<result property="phone2" column="DELIVERY_PHONE2"/>
		<result property="countryNo" column="DELIVERY_COUNTRY_NO"/>
		<result property="address1" column="DELIVERY_ADDRESS1"/>
		<result property="address2" column="DELIVERY_ADDRESS2"/>
		<result property="zipCd" column="DELIVERY_ZIP_CD"/>
		<result property="note" column="NOTE"/>
		<collection property="omsDeliverys" resultMap="getRegularDeliveryListByDateResult2"/>
		<collection property="omsOrderproducts" resultMap="getRegularDeliveryListByDateResult4"/>
	</resultMap>
	<resultMap type="omsDelivery" id="getRegularDeliveryListByDateResult2" autoMapping="true">
		<id property="orderId" column="ORDER_ID"/>
		<id property="deliveryAddressNo" column="DELIVERY_ADDRESS_NO"/>
		<id property="deliveryPolicyNo" column="DELIVERY_POLICY_NO"/>
		<result property="name" column="DELIVERY_NAME"/>
	</resultMap>
	<resultMap type="omsOrderproduct" id="getRegularDeliveryListByDateResult4" autoMapping="true"><!-- 상품 -->
		<id property="orderId" column="ORDER_ID"/>
		<id property="orderProductNo" column="ORDER_PRODUCT_NO"/>
		<result property="paymentAmt" column="PRD_PAYMENT_AMT"/>
		<collection property="omsOrderproducts" resultMap="getRegularDeliveryListByDateResult5"/>
	</resultMap>
	<resultMap type="omsOrderproduct" id="getRegularDeliveryListByDateResult5"><!-- sub 상품 -->
		<id property="orderId" column="ORDER_ID"/>
		<id property="orderProductNo" column="SUB_ORDER_PRODUCT_NO"/>
		<result property="upperOrderProductNo" column="SUB_UPPER_ORDER_PRODUCT_NO"/>
		<result property="productId" column="SUB_PRODUCT_ID"/>
		<result property="saleproductId" column="SUB_SALEPRODUCT_ID"/>
		<result property="listPrice" column="SUB_LIST_PRICE"/>
		<result property="setQty" column="SUB_SET_QTY"/>
	</resultMap>
	<resultMap type="omsPayment" id="getRegularDeliveryListByDateResult6" autoMapping="true">
		<id property="orderId" column="ORDER_ID"/>
		<result property="paymentAmt" column="PAYMENT_AMT"/>
	</resultMap>
	<select id="getRegularDeliveryListByDate" resultMap="getRegularDeliveryListByDateResult">
		/* [oms.order.getRegularDeliveryListByDate][dennis][2016. 9. 21.] */
		SELECT
				A.*,
				NVL2(PB.NAME,'[' || PB.NAME || '] ','') || A.PR_PRODUCT_NAME AS PRODUCT_NAME,
				CB.NAME AS BUSINESS_NAME,
				CB.ERP_BUSINESS_ID,
				CB.SALE_TYPE_CD,
				CB.PURCHASE_YN,				
				
				(CASE WHEN CB.SALE_TYPE_CD = 'SALE_TYPE_CD.CONSIGN' AND CB.PURCHASE_YN = 'Y'
				 	 THEN PC.ERP_PRODUCT_ID	/* 표준카테고리 */
					 ELSE A.PRD_ERP_PRODUCT_ID
					 END
					 ) AS ERP_PRODUCT_ID,
				
				SUM(DECODE(A.RN,1,A.TOTAL_SALE_PRICE * A.ORDER_QTY,0)) OVER (PARTITION BY A.REGULAR_DELIVERY_DT,A.ORDER_ID) AS TOTAL_ORDER_SALE_PRICE,	<!-- 상품총주문금액 -->
				
				SUM(DECODE(A.RN,1,A.SUB_LIST_PRICE * A.SUB_SET_QTY,0)) OVER (PARTITION BY A.REGULAR_DELIVERY_DT,A.SUB_UPPER_ORDER_PRODUCT_NO) AS SET_TOTAL_SALE_PRICE,	<!-- SET의 원판매가 * SET구성수량 * 수량의 합 -->
				
				(A.SUB_SALE_PRICE + PS.ADD_SALE_PRICE) AS SUB_TOTAL_SALE_PRICE,
				
				(
					SUM(DECODE(A.RN,1,A.TOTAL_SALE_PRICE * A.ORDER_QTY,0)) OVER (PARTITION BY A.REGULAR_DELIVERY_DT,A.ORDER_ID)
					+ SUM(DECODE(A.RN2,1,A.ORDER_DELIVERY_FEE,0))  OVER (PARTITION BY A.REGULAR_DELIVERY_DT,A.ORDER_ID)
				 ) AS PAYMENT_AMT,
				 
				ORDER_DELIVERY_FEE AS APPLY_DELIVERY_FEE
		FROM (
					SELECT
							R.REGULAR_DELIVERY_ID,
							RD.REGULAR_DELIVERY_ORDER,
							RD.DELIVERY_PRODUCT_NO,
							RD.REGULAR_DELIVERY_DT,
							<!-- OMS_ORDER -->
							'1001' AS STORE_ID,
							R.REGULAR_DELIVERY_ID || TO_CHAR(RD.REGULAR_DELIVERY_DT,'YYYYMMDD') || TO_CHAR(RD.REGULAR_DELIVERY_ORDER) AS ORDER_ID,	<!-- 임시 ORDER ID -->
							'ORDER_TYPE_CD.REGULARDELIVERY' AS ORDER_TYPE_CD,							
							R.MEMBER_NO,
							R.MEMBER_ID,
							R.NAME1,
							R.NAME2,
							R.NAME3,
							R.NAME4,
							R.PHONE1,
							R.PHONE2,
							'ORDER_STATE_CD.COMPLETE' AS ORDER_STATE_CD,
							'ORDER_DELIVERY_STATE_CD.READY' AS ORDER_DELIVERY_STATE_CD,
							
							'ORDERSHEET' AS ORDER_STAT,				
							
							<!-- OMS_DELIVERYADDRESS -->
							1 AS DELIVERY_ADDRESS_NO,
							R.DELIVERY_NAME1,
							R.DELIVERY_NAME2,
							R.DELIVERY_COUNTRY_NO,
							R.DELIVERY_PHONE1,
							R.DELIVERY_PHONE2,
							R.DELIVERY_ADDRESS1,
							R.DELIVERY_ADDRESS2,
							R.DELIVERY_ZIP_CD,
							R.NOTE,
							
							<!-- OMS_DELIVERY -->
							PP.DELIVERY_POLICY_NO,
							CD.NAME AS DELIVERY_NAME,
							CD.DELIVERY_SERVICE_CD,
<!-- 							CD.DELIVERY_FEE_TYPE_CD, -->
							NVL(CD.DELIVERY_FEE,0) AS DELIVERY_FEE,
							CD.MIN_DELIVERY_FREE_AMT,
							(CASE WHEN SUM(RP.REGULAR_DELIVERY_PRICE * RP.ORDER_QTY) OVER (PARTITION BY RD.REGULAR_DELIVERY_DT, R.REGULAR_DELIVERY_ID,CD.DELIVERY_POLICY_NO) &gt;= CD.MIN_DELIVERY_FREE_AMT
									OR MAX(RP.DELIVERY_FEE_FREE_YN) OVER (PARTITION BY RD.REGULAR_DELIVERY_DT, R.REGULAR_DELIVERY_ID,CD.DELIVERY_POLICY_NO) = 'Y'
								  THEN 0
								  ELSE NVL(CD.DELIVERY_FEE,0)
								  END) AS ORDER_DELIVERY_FEE,
							0 AS DELIVERY_COUPON_DC_AMT,							 
							'N' AS WRAP_TOGETHER_YN,
							0 AS ORDER_WRAP_FEE,
							0 AS WRAP_COUPON_DC_AMT,
							0 AS APPLY_WRAP_FEE,
							
							<!-- OMS_ORDERPRODUCT -->
							RP.DELIVERY_PRODUCT_NO AS ORDER_PRODUCT_NO,
							DECODE(RP.DELIVERY_PRODUCT_TYPE_CD, 'DELIVERY_PRODUCT_TYPE_CD.GENERAL', 'ORDER_PRODUCT_TYPE_CD.GENERAL'
															  , 'DELIVERY_PRODUCT_TYPE_CD.SET', 'ORDER_PRODUCT_TYPE_CD.SET'
									) AS ORDER_PRODUCT_TYPE_CD	,			
							RP.PRODUCT_ID,
							RP.SALEPRODUCT_ID,
							RP.ORDER_QTY,
							RP.LIST_PRICE,
							RP.SALE_PRICE,
							0 AS ADD_SALE_PRICE,
							RP.REGULAR_DELIVERY_PRICE AS TOTAL_SALE_PRICE,
							RP.SUPPLY_PRICE,
							'N' AS WRAP_YN,
							RP.REGULAR_DELIVERY_PRICE * RP.ORDER_QTY AS PRD_PAYMENT_AMT,
							RP.POINT_SAVE_RATE,
							RP.DELIVERY_FEE_FREE_YN,
							RP.COMMISSION_RATE,
							PP.NAME AS PR_PRODUCT_NAME,							
							'ORDER_DELIVERY_TYPE_CD.ORDER' AS ORDER_DELIVERY_TYPE_CD,
							
							PP.CATEGORY_ID,
							PP.BRAND_ID,
							PP.PRODUCT_TYPE_CD,
							PP.BUSINESS_ID,
							PP.BUSINESS_PRODUCT_ID,
							PP.PRODUCT_NOTICE_TYPE_CD,
							PP.TAX_TYPE_CD,
							PP.OPTION_YN,
							PP.TEXT_OPTION_YN,
							PP.TEXT_OPTION_NAME,
							PP.CONTROL_NO,			
							PP.PERSON_QTY,
							PP.ERP_PRODUCT_ID AS PRD_ERP_PRODUCT_ID,
							
							PS.ERP_SALEPRODUCT_ID,
							PS.ERP_COLOR_ID,
							PS.ERP_SIZE_ID,
							PS.BUSINESS_SALEPRODUCT_ID,
							PS.NAME AS SALEPRODUCT_NAME,
							PS.WAREHOUSE_ID,
							PS.LOCATION_ID,
							PS.REAL_STOCK_QTY,
							PS.DELIVERY_TOGETHER_QTY,
							
							0 AS CANCEL_QTY,
							0 AS RETURN_QTY,
							0 AS EXCHANGE_QTY,
							0 AS REDELIVERY_QTY,
							0 AS OUT_QTY,
									
							SYSDATE AS DELIVERY_RESERVE_DT,
							
							'N' AS RESERVE_YN,
							'N' AS FIXED_DELIVERY_YN,	
							PP.WRAP_VOLUME,
							PP.OVERSEAS_PURCHASE_YN,
							PP.BOX_DELIVERY_YN,
							PP.BOX_UNIT_CD,
							PP.BOX_UNIT_QTY,
							PP.MIN_QTY,	
							
							0 AS PRODUCT_COUPON_DC_AMT,
							0 AS PLUS_COUPON_DC_AMT,
							0 AS ORDER_COUPON_DC_AMT,
							
							<!-- OMS_ORDERPRODUCT -->
							RPP.DELIVERY_PRODUCT_NO AS SUB_ORDER_PRODUCT_NO,
							RPP.UPPER_DELIVERY_PRODUCT_NO AS SUB_UPPER_ORDER_PRODUCT_NO,
							'ORDER_PRODUCT_TYPE_CD.SUB' AS SUB_ORDER_PRODUCT_TYPE_CD,
							RPP.SET_QTY AS SUB_SET_QTY,
							RPP.PRODUCT_ID AS SUB_PRODUCT_ID,
							RPP.SALEPRODUCT_ID AS SUB_SALEPRODUCT_ID,
							RPP.LIST_PRICE AS SUB_LIST_PRICE,
							RPP.SALE_PRICE AS SUB_SALE_PRICE,
							
							
							<!-- OMS_PAYMENT -->
							'PAYMENT_METHOD_CD.CARD' AS PAYMENT_METHOD_CD,
							0 AS PAYMENT_FEE,
							MM.BILLING_KEY,
							MM.DEVICE_TYPE_CD,
							
							RANK() OVER (PARTITION BY RD.REGULAR_DELIVERY_DT, R.REGULAR_DELIVERY_ID,RP.DELIVERY_PRODUCT_NO ORDER BY RPP.DELIVERY_PRODUCT_NO) AS RN,
							RANK() OVER (PARTITION BY RD.REGULAR_DELIVERY_DT, R.REGULAR_DELIVERY_ID,PP.DELIVERY_POLICY_NO ORDER BY RP.DELIVERY_PRODUCT_NO, RPP.DELIVERY_PRODUCT_NO) AS RN2
							
							
					FROM OMS_REGULARDELIVERYSCHEDULE RD
					JOIN OMS_REGULARDELIVERYPRODUCT RP
						ON RD.REGULAR_DELIVERY_ID = RP.REGULAR_DELIVERY_ID
						AND RD.DELIVERY_PRODUCT_NO = RP.DELIVERY_PRODUCT_NO
					JOIN PMS_PRODUCT PP
						ON RP.PRODUCT_ID = PP.PRODUCT_ID	
					JOIN PMS_SALEPRODUCT PS
						ON RP.PRODUCT_ID = PS.PRODUCT_ID
						AND RP.SALEPRODUCT_ID = PS.SALEPRODUCT_ID
					JOIN CCS_DELIVERYPOLICY CD
						ON CD.DELIVERY_POLICY_NO = PP.DELIVERY_POLICY_NO		
					JOIN OMS_REGULARDELIVERY R
						ON R.REGULAR_DELIVERY_ID = RD.REGULAR_DELIVERY_ID
					JOIN MMS_MEMBER_ZTS MM
						ON MM.MEMBER_NO = R.MEMBER_NO			
					LEFT OUTER JOIN OMS_REGULARDELIVERYPRODUCT RPP
						ON RP.REGULAR_DELIVERY_ID = RPP.REGULAR_DELIVERY_ID
						AND RP.DELIVERY_PRODUCT_NO = RPP.UPPER_DELIVERY_PRODUCT_NO
					WHERE RD.DELIVERY_SCHEDULE_STATE_CD = #{deliveryScheduleStateCd}
					AND RD.REGULAR_DELIVERY_DT &gt;= TO_DATE((TO_CHAR(SYSDATE+3,'YYYYMMDD') || '000000'), 'YYYYMMDDHH24MISS')
					AND RD.REGULAR_DELIVERY_DT &lt;= TO_DATE((TO_CHAR(SYSDATE+3,'YYYYMMDD') || '235959'), 'YYYYMMDDHH24MISS')
			) A
		LEFT OUTER JOIN PMS_BRAND PB
		  	ON A.BRAND_ID = PB.BRAND_ID
		LEFT OUTER JOIN PMS_CATEGORY PC
		   	ON A.CATEGORY_ID = PC.CATEGORY_ID
		LEFT OUTER JOIN CCS_BUSINESS CB
			ON A.BUSINESS_ID = CB.BUSINESS_ID
		LEFT OUTER JOIN PMS_SALEPRODUCT PS
			ON PS.PRODUCT_ID = SUB_PRODUCT_ID
			AND PS.SALEPRODUCT_ID = SUB_SALEPRODUCT_ID			
	</select>
	
	<resultMap type="omsOrder" id="getVirtualOrderCancelListResult" autoMapping="true">
		<id property="orderId" column="ORDER_ID" />
		<result property="orderDt" column="ORDER_DT" />
		<collection property="omsOrderproducts" ofType="omsOrderproduct">
			<id property="orderId" column="ORDER_ID" />
			<id property="orderProductNo" column="ORDER_PRODUCT_NO" />
			<result property="productName" column="PRODUCT_NAME"/>
			<result property="saleproductName" column="SALEPRODUCT_NAME"/>
		</collection>
		<collection property="omsPayments" ofType="omsPayment">
			<id property="paymentNo" column="PAYMENT_NO"/>
			<result property="orderId" column="ORDER_ID" />
			<result property="paymentAmt" column="PAYMENT_AMT"/>
		</collection>
		<collection property="omsOrdercoupons" ofType="omsOrdercoupon">
			<id property="storeId" column="STORE_ID" />
			<id property="orderId" column="ORDER_ID"/>
			<id property="couponId" column="COUPON_ID"/>
			<id property="couponIssueNo" column="COUPON_ISSUE_NO"/>
		</collection>			
	</resultMap>
	<select id="getVirtualOrderCancelList" resultMap="getVirtualOrderCancelListResult">
		/* [oms.order.getVirtualOrderCancelList][dennis][2016. 9. 22.] */
		SELECT 	A.ORDER_ID, 
				A.ORDER_DT, 
				A.MEMBER_NO,				
				B.ORDER_PRODUCT_NO,
				B.PRODUCT_NAME,
				B.SALEPRODUCT_NAME,
				C.PAYMENT_NO,
				C.PAYMENT_AMT,
				CC.STORE_ID,
				CC.COUPON_ID,
				CC.COUPON_ISSUE_NO
		  FROM OMS_ORDER A
		  JOIN OMS_ORDERPRODUCT B
		    ON A.ORDER_ID = B.ORDER_ID
		    AND ORDER_PRODUCT_STATE_CD = 'ORDER_PRODUCT_STATE_CD.REQ'
		  JOIN OMS_PAYMENT C
		  	ON C.ORDER_ID = A.ORDER_ID
		  	AND C.PAYMENT_METHOD_CD = 'PAYMENT_METHOD_CD.VIRTUAL'
		  	AND C.PAYMENT_STATE_CD = 'PAYMENT_STATE_CD.PAYMENT_READY'
		  LEFT OUTER JOIN OMS_ORDERCOUPON CC
		  	ON A.ORDER_ID = CC.ORDER_ID
		  	AND A.STORE_ID = CC.STORE_ID
		  	AND CC.COUPON_STATE_CD = 'COUPON_STATE_CD.APPLY'
		 WHERE A.ORDER_STATE_CD = 'ORDER_STATE_CD.REQ' 
		 AND A.ORDER_DT &lt; SYSDATE - 7
	</select>
	
	<select id="getMemberOrderQty" resultType="java.math.BigDecimal">
		/* [oms.order.getMemberOrderQty][dennis][2016. 10. 11.] */
		SELECT NVL(
				   (SELECT SUM((OS.ORDER_QTY - OS.CANCEL_QTY - OS.RETURN_QTY)) AS ORDER_QTY 
					  FROM OMS_ORDER O
					  JOIN OMS_ORDERPRODUCT OS
					   ON O.ORDER_ID = OS.ORDER_ID	
					   AND OS.PRODUCT_ID = #{productId}
					   AND OS.ORDER_DT &lt;= TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD') || '235959','YYYYMMDDHH24MISS')
					   AND OS.ORDER_DT &gt;= TO_DATE(TO_CHAR(SYSDATE - 30,'YYYYMMDD') || '000000','YYYYMMDDHH24MISS')	   
					WHERE  O.MEMBER_NO = #{memberNo}
					),0
				)
		FROM DUAL	
	</select>
	
	<sql id="getGiftOrderCancelId">
		SELECT *
			  FROM OMS_ORDER O, OMS_ORDERPRODUCT OS
			 WHERE  O.ORDER_ID = OS.ORDER_ID   
			 	AND O.ORDER_TYPE_CD = 'ORDER_TYPE_CD.GIFT'
			    AND O.ORDER_STATE_CD = 'ORDER_STATE_CD.PAYED'
	</sql>
	<resultMap type="omsOrder" id="getGiftOrderCancelResult" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<collection property="omsOrderproducts" resultMap="oms.order.getGiftOrderCancelResult1"/>
	</resultMap>
	<resultMap type="omsOrderproduct" id="getGiftOrderCancelResult1" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<id column="ORDER_PRODUCT_NO" property="orderProductNo"/>
	</resultMap>
	<select id="getGiftOrderCancelObject"  resultMap="getGiftOrderCancelResult">
		/* [oms.order.getGiftOrderCancelObject][dennis][2016. 10. 13.] */
		<include refid="oms.order.getGiftOrderCancelId"/>
		    AND O.ORDER_DT &lt; TO_DATE (TO_CHAR (SYSDATE - 7, 'YYYYMMDD') || '000000','YYYYMMDDHH24MISS')
	</select>
	<select id="getGiftOrderCancel" resultMap="getGiftOrderCancelResult">
		/* [oms.order.getGiftOrderCancel][dennis][2016. 10. 13.] */
		<include refid="oms.order.getGiftOrderCancelId"/>
		AND O.ORDER_DT &lt; TO_DATE (TO_CHAR (SYSDATE - 6, 'YYYYMMDD') || '000000','YYYYMMDDHH24MISS')
	</select>
	
	<select id="gerOrderPointTarget" resultType="OmsOrder">
		/* [oms.order.gerOrderPointTarget][dennis][2016. 10. 20.] */
		 SELECT A.MEMBER_NO, 
		 		A.ORDER_ID, 
		 		SUM (B.TOTAL_POINT * B.ORDER_QTY) AS TOTAL_POINT_SAVE,
		 		SUM(B.TOTAL_SALE_PRICE * B.ORDER_QTY) AS ORDER_AMT,
		 		SUM((B.PRODUCT_COUPON_DC_AMT + B.PLUS_COUPON_DC_AMT) * B.ORDER_QTY) AS DC_AMT		 		 
		    FROM OMS_ORDER A 
		    JOIN OMS_ORDERPRODUCT B 
		    	ON A.ORDER_ID = B.ORDER_ID
		    	AND A.STORE_ID = B.STORE_ID
		   WHERE A.STORE_ID = #{storeId}    
		   		 AND A.MEMBER_NO IS NOT NULL
		         AND A.ORDER_STATE_CD NOT IN
		                ('ORDER_STATE_CD.REQ', 'ORDER_STATE_CD.CANCEL')
		         AND B.TOTAL_POINT > 0
		         AND B.SAVE_DT IS NULL		         
		         AND B.ORDER_DT &lt; TO_DATE (TO_CHAR (SYSDATE, 'YYYYMMDD') || '000000','YYYYMMDDHH24MISS')
         		 AND B.ORDER_DT &gt;= TO_DATE (TO_CHAR (SYSDATE - 8, 'YYYYMMDD') || '000000','YYYYMMDDHH24MISS')
		         AND B.ORDER_PRODUCT_TYPE_CD IN
		                ('ORDER_PRODUCT_TYPE_CD.GENERAL', 'ORDER_PRODUCT_TYPE_CD.SET')
		         AND B.ORDER_DELIVERY_TYPE_CD = 'ORDER_DELIVERY_TYPE_CD.ORDER'
		         AND B.ORDER_PRODUCT_STATE_CD NOT IN
		                ('ORDER_PRODUCT_STATE_CD.REQ',
		                 'ORDER_PRODUCT_STATE_CD.CANCELAPPROVAL',
		                 'ORDER_PRODUCT_STATE_CD.CANCELDELIVERY',
		                 'ORDER_PRODUCT_STATE_CD.CANCEL')		         
		GROUP BY A.ORDER_ID, A.MEMBER_NO
		ORDER BY A.ORDER_ID
	</select>
	
	<update id="updatePointSaveDt">
		/* [oms.order.updatePointSaveDt][dennis][2016. 10. 20.] */
		UPDATE OMS_ORDERPRODUCT
		SET SAVE_DT = #{saveDt},
			UPD_DT = SYSDATE,
			UPD_ID = #{updId}
		WHERE ORDER_ID = #{orderId}
	</update>
	
	<select id="nonememberGetOrderId" resultType="OmsOrder">
		/* [oms.order.nonemember.getOrderId][roy][2016. 10. 31.] */
		SELECT *
		FROM OMS_ORDER
		WHERE NAME1 = #{name1}	
		 AND ORDER_PWD = #{orderPwd}	
		 AND PHONE2 = #{phone2}	
		 AND INS_DT BETWEEN SYSDATE - 180 AND SYSDATE
	</select>
	
	<select id="nonememberGetOrderPwd" resultType="OmsOrder">
		/* [oms.order.nonemember.getOrderPwd][roy][2016. 10. 31.] */
		SELECT T1.ORDER_PWD, T1.ORDER_ID
			FROM (SELECT ORDER_PWD, ORDER_ID
			        FROM OMS_ORDER
			        WHERE NAME1 = #{name1}	
						 AND PHONE2 = #{phone2}
						 AND ORDER_DT BETWEEN TO_DATE (#{orderDt},
                                           'YYYY-MM-DD')
                              AND TO_DATE (#{orderDt},
                                           'YYYY-MM-DD') + 1
			        ORDER BY INS_DT DESC) T1
        WHERE ROWNUM = 1
	</select>
	
	<select id="getOrderWrapList" resultType="omsOrderproduct">
		/* [oms.order.getOrderWrapList][dennis][2016. 11. 11.] */
		WITH DATA
		     AS (SELECT *
		           FROM (SELECT A.STORE_ID,
		                        A.ORDER_ID,
		                        A.DELIVERY_ADDRESS_NO,
		                        A.DELIVERY_POLICY_NO,
		                        A.ERP_PRODUCT_ID,
		                        A.WRAP_VOLUME,
		                        A.WRAP_TOGETHER_YN,
		                        (CASE
		                            WHEN A.ORDER_QTY = 1
		                            THEN
		                                  A.ERP_PRODUCT_ID
		                               || '_'
		                               || TO_CHAR (A.WRAP_VOLUME, 'FM90.0')
		                               || ','
		                               || A.ERP_PRODUCT_ID
		                               || '_'
		                               || TO_CHAR (A.WRAP_VOLUME, 'FM90.0')
		                            ELSE
		                                  A.ERP_PRODUCT_ID
		                               || '_'
		                               || TO_CHAR (A.WRAP_VOLUME, 'FM90.0')
		                         END)
		                           AS PRODUCT_NAME,
		                        A.ORDER_QTY,
		                        (CASE WHEN A.ORDER_QTY = 1 THEN 'Y' ELSE 'N' END)
		                           AS TOGETHER_YN
		                   FROM (SELECT A.*,
		                                (CASE
		                                    WHEN MAX (
		                                            C.LV)
		                                         OVER (
		                                            PARTITION BY A.ORDER_ID,
		                                                         A.DELIVERY_ADDRESS_NO,
		                                                         A.DELIVERY_POLICY_NO,
		                                                         A.WRAP_TOGETHER_YN,
		                                                         A.ERP_PRODUCT_ID) =
		                                            C.LV
		                                    THEN
		                                       C.LV - A.SUM_WRAP_VOLUME
		                                    ELSE
		                                       1
		                                 END)
		                                   AS ORDER_QTY
		                           FROM (  SELECT A.STORE_ID,
		                                          A.ORDER_ID,
		                                          A.DELIVERY_ADDRESS_NO,
		                                          A.DELIVERY_POLICY_NO,
		                                          B.WRAP_TOGETHER_YN,
		                                          A.ERP_PRODUCT_ID,
		                                          MIN (A.WRAP_VOLUME) AS WRAP_VOLUME,
		                                          SUM (A.WRAP_VOLUME * A.ORDER_QTY)
		                                             AS SUM_WRAP_VOLUME
		                                     FROM OMS_ORDERPRODUCT A, OMS_DELIVERY B
		                                    WHERE     A.ORDER_ID = B.ORDER_ID
		                                          AND A.DELIVERY_ADDRESS_NO =
		                                                 B.DELIVERY_ADDRESS_NO
		                                          AND A.WRAP_YN = 'Y'
		                                          AND A.ORDER_ID = #{orderId}		                                 
		                                 GROUP BY A.STORE_ID,
		                                          A.ORDER_ID,
		                                          A.DELIVERY_ADDRESS_NO,
		                                          A.DELIVERY_POLICY_NO,
		                                          B.WRAP_TOGETHER_YN,
		                                          A.ERP_PRODUCT_ID) A,
		                                (    SELECT LEVEL LV
		                                       FROM DUAL
		                                 CONNECT BY LEVEL &lt;= 1000) C
		                          WHERE C.LV BETWEEN 1 AND ROUND (A.SUM_WRAP_VOLUME)) A) A)
		  SELECT A.ORDER_ID,
		         1 AS SET_QTY,
		         A.STORE_ID,
		         'ORDER_PRODUCT_TYPE_CD.WRAP' AS ORDER_PRODUCT_TYPE_CD,
		         'ORDER_DELIVERY_TYPE_CD.ORDER' AS ORDER_DELIVERY_TYPE_CD,
		         '선물포장비[합:' || A.ORDER_QTY || ']' || A.PRODUCT_NAME
		            AS PRODUCT_NAME,
		         'SALE_TYPE_CD.PURCHASE' AS SALE_TYPE_CD,
		         'N' AS PURCHASE_YN,
		         'TAX_TYPE_CD.FREE' AS TAX_TYPE_CD,
		         '없음' AS SALEPRODUCT_NAME,
		         'N' AS OPTION_YN,
		         'N' AS TEXT_OPTION_YN,
		         1000 AS LIST_PRICE,
		         1000 AS SALE_PRICE,
		         0 AS ADD_SALE_PRICE,
		         1000 AS TOTAL_SALE_PRICE,
		         1000 AS SUPPLY_PRICE,
		         0 AS COMMISSION_RATE,
		         0 AS POINT_SAVE_RATE,
		         'Y' AS DELIVERY_FEE_FREE_YN,
		         0 AS PRODUCT_POINT,
		         0 AS ADD_POINT,
		         0 AS TOTAL_POINT,
		         1000 AS PAYMENT_AMT,
		         0 AS TAX,		         
		         A.ORDER_QTY,
		         0 AS CANCEL_QTY,
		         0 AS OUT_QTY,
		         0 AS RETURN_QTY,
		         0 AS EXCHANGE_QTY,
		         0 AS REDELIVERY_QTY,
		         A.DELIVERY_ADDRESS_NO,
		         A.DELIVERY_POLICY_NO,
		         'N' AS RESERVE_YN,
		         'N' AS FIXED_DELIVERY_YN,
		         SYSDATE AS DELIVERY_RESERVE_DT,
		         'Y' AS WRAP_YN,
		         0 AS WRAP_VOLUME,
		         'N' AS OVERSEAS_PURCHASE_YN,
		         'N' AS BOX_DELIVERY_YN,
		         C.COUPON_ID AS PRODUCT_COUPON_ID,
		         C.COUPON_ISSUE_NO AS PRODUCT_COUPON_ISSUE_NO,
		         NVL(C.COUPON_DC_AMT,0) AS PRODUCT_COUPON_DC_AMT,
		         NVL(C.SINGLE_APPLY_YN, 'N') AS PRODUCT_SINGLE_APPLY_YN,		         
		         'N' AS PLUS_SINGLE_APPLY_YN,
		         0 AS PLUS_COUPON_DC_AMT,
		         0 AS ORDER_COUPON_DC_AMT,
		         0 AS CALIBRATE_SALE_PRICE,
		         0 AS CALIBRATE_POINT,
		         0 AS CALIBRATE_PRODUCT_DC_AMT,
		         0 AS CALIBRATE_PLUS_DC_AMT,
		         0 AS CALIBRATE_ORDER_DC_AMT,
		         0 AS POINT_VALUE     
		    FROM    (  SELECT ROW_NUMBER ()
		                         OVER (ORDER BY
		                                  STORE_ID,
		                                  ORDER_ID,
		                                  DELIVERY_ADDRESS_NO,
		                                  DELIVERY_POLICY_NO,
		                                  GROUP_SEQ)
		                         AS IDX,
		                      A.*
		                 FROM (  SELECT A.STORE_ID,
		                                A.ORDER_ID,
		                                A.DELIVERY_ADDRESS_NO,
		                                A.DELIVERY_POLICY_NO,
		                                A.PRODUCT_NAME,
		                                SUM (A.ORDER_QTY) AS ORDER_QTY,
		                                'Y' AS TOGETHER_YN,
		                                0 AS GROUP_SEQ
		                           FROM DATA A
		                          WHERE TOGETHER_YN = 'Y'
		                       GROUP BY A.STORE_ID,
		                                A.ORDER_ID,
		                                A.DELIVERY_ADDRESS_NO,
		                                A.DELIVERY_POLICY_NO,
		                                A.PRODUCT_NAME
		                       UNION ALL
		                         SELECT A.STORE_ID,
		                                A.ORDER_ID,
		                                A.DELIVERY_ADDRESS_NO,
		                                A.DELIVERY_POLICY_NO,
		                                TO_CHAR (WM_CONCAT (A.PRODUCT_NAME))
		                                   AS PRODUCT_NAME,
		                                1 AS ORDER_QTY,
		                                (CASE WHEN COUNT (*) &gt; 1 THEN 'Y' ELSE 'N' END)
		                                   AS TOGETER_YN,
		                                A.GROUP_SEQ
		                           FROM (SELECT A.*,
		                                        (CASE
		                                            WHEN A.WRAP_TOGETHER_YN = 'N'
		                                            THEN
		                                               ROWNUM
		                                            WHEN ROUND (A.SUM) &lt;&gt; FLOOR (A.SUM)
		                                            THEN
		                                               ROWNUM
		                                            ELSE
		                                               ROWNUM - 1
		                                         END)
		                                           AS GROUP_SEQ
		                                   FROM (SELECT A.*,
		                                                SUM (
		                                                   A.WRAP_VOLUME)
		                                                OVER (
		                                                   PARTITION BY A.STORE_ID,
		                                                                A.ORDER_ID,
		                                                                A.DELIVERY_ADDRESS_NO,
		                                                                A.DELIVERY_POLICY_NO
		                                                   ORDER BY
		                                                      A.STORE_ID,
		                                                      A.ORDER_ID,
		                                                      A.DELIVERY_ADDRESS_NO,
		                                                      A.DELIVERY_POLICY_NO
		                                                   ROWS BETWEEN UNBOUNDED PRECEDING
		                                                        AND     CURRENT ROW)
		                                                   AS SUM
		                                           FROM DATA A
		                                          WHERE TOGETHER_YN = 'N') A) A
		                       GROUP BY A.STORE_ID,
		                                A.ORDER_ID,
		                                A.DELIVERY_ADDRESS_NO,
		                                A.DELIVERY_POLICY_NO,
		                                A.GROUP_SEQ) A
		             ORDER BY IDX) A
		         LEFT OUTER JOIN
		            OMS_ORDERCOUPON C
		         ON     C.STORE_ID = A.STORE_ID
		            AND C.ORDER_ID = A.ORDER_ID
		            AND C.COUPON_TYPE_CD = 'COUPON_TYPE_CD.WRAP'
		            AND 1 = A.IDX
		ORDER BY A.IDX
	</select>
</mapper>