<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="oms.claim.select">

	<!-- 1. default resultmap -->
	<resultMap type="omsClaim" id="omsClaimMap" autoMapping="true">
		<id property="orderId" column="order_id" />
		<id property="claimNo" column="claim_no" />
		
		<result property="returnStatus" column="return_status" />
	</resultMap>
	<resultMap type="omsClaimproduct" id="omsClaimproductMap" autoMapping="true">
		<id property="orderId" column="order_id"/>	
		<id property="orderProductNo" column="order_product_no"/>
		<id property="claimNo" column="claim_no"/>
		
		<result property="claimStateCd" column="claim_state_cd" />
	</resultMap>
	<resultMap type="omsClaimdelivery" id="omsClaimdeliveryMap" autoMapping="true">
		<id property="orderId" column="order_id"/>	
		<id property="claimNo" column="claim_no"/>
		<id property="deliveryAddressNo" column="delivery_address_no"/>
		<id property="deliveryPolicyNo" column="delivery_policy_no"/>
		
		<result property="deliveryFee" column="delivery_fee"/>
		<result property="orderDeliveryFee" column="claim_order_delivery_fee"/>
	</resultMap>
	
	
	<resultMap type="omsOrder" id="omsOrderMap" autoMapping="true">
		<id property="orderId" column="order_id" />
		<result property="phone2" column="orderer_mobile"/>
		<result property="email" column="orderer_email"/>
		<result property="paymentAmt" column="order_payment_amt"/>
		
		<association property="mmsMemberZts" resultMap="mmsMemberZtsMap" />
	</resultMap>
	<resultMap type="omsOrderproduct" id="omsOrderproductMap" autoMapping="true">
		<id property="orderId" column="order_id"/>	
		<id property="orderProductNo" column="order_product_no"/>
		<result property="dcAmt" column="dc_amt"/>
		<result property="orderAmt" column="order_amt"/>
		<result property="availableClaimQty" column="available_claim_qty" javaType="bigDecimal"/>
		<result property="claimDeliveryFee" column="claim_delivery_fee"/>
		
		<association property="omsDeliveryaddress" column="{orderId=order_id,deliveryAddressNo=delivery_address_no}" resultMap="omsDeliveryaddressMap"/>
<!-- 		<collection property="omsClaimproducts" column="{orderId=order_id,orderProductNo=order_product_no}" resultMap="omsClaimproductMap"/> -->
	</resultMap>
	<resultMap type="omsDeliveryaddress" id="omsDeliveryaddressMap" autoMapping="true">
		<id property="orderId" column="order_id"/>	
		<id property="deliveryAddressNo" column="delivery_address_no"/>
		<collection property="omsDeliverys" column="{orderId=order_id,deliveryAddressNo=delivery_address_no}" resultMap="omsDeliveryMap"/>
	</resultMap>
	<resultMap type="omsDelivery" id="omsDeliveryMap" autoMapping="true">
		<id property="orderId" column="order_id"/>	
		<id property="deliveryAddressNo" column="delivery_address_no"/>
		<id property="deliveryPolicyNo" column="delivery_policy_no"/>
		
		<result property="name" column="delivery_name" />
		
		<result property="productSumAmt" column="product_sum_amt"/>
		<result property="deliveryFeeFreeYn" column="delivery_fee_free_yn"/>
		<result property="wrapVolume" column="wrap_volume"/>
		<result property="sumRefundWrapFee" column="sum_refund_wrap_fee"/>
	</resultMap>
	<resultMap type="mmsMemberZts" id="mmsMemberZtsMap" autoMapping="true">
		<id property="memberNo" column="member_no" />
	</resultMap>
	
	
	<!-- 2. extends resultmap -->
	<resultMap type="omsOrder" id="omsOrderExtendsMap" extends="omsOrderMap" autoMapping="true">
<!-- 		<collection property="omsDeliveryaddresss" column="{orderId=order_id}" resultMap="omsDeliveryaddressMap"/> -->
		<collection property="omsClaims" column="{orderId=order_id}" resultMap="omsClaimMap"/>
		<collection property="omsOrderproducts" column="{orderId=order_id}" resultMap="omsOrderproductMap"/>
	</resultMap>
	<resultMap type="omsOrderproduct" id="omsOrderproductExtendsMap" extends="omsOrderproductMap" autoMapping="true">
		<association property="omsOrder" resultMap="omsOrderMap"/>
<!-- 		<association property="omsDeliveryaddress" column="{orderId=order_id,deliveryAddressNo=delivery_address_no}" resultMap="omsDeliveryaddressMap"/> -->
		
		<association property="omsClaimproduct" column="{orderId=order_id,orderProductNo=order_product_no}" resultMap="omsClaimproductMap"/>
	</resultMap>
	<resultMap type="omsClaimdelivery" id="omsClaimdeliveryExtendsMap" extends="omsClaimdeliveryMap" autoMapping="true">
		<association property="omsClaim" column="{orderId=order_id,claimNo=claim_no}" resultMap="omsClaimMap"/>
	</resultMap>
	
	<resultMap type="omsClaim" id="omsClaimExtendsMap" extends="omsClaimMap" autoMapping="true">
		<association property="omsOrder" resultMap="omsOrderMap"/>
		<association property="omsClaimdelivery" resultMap="omsClaimdeliveryMap"/>
		<collection property="omsClaimproducts" column="{orderId=order_id,orderProductNo=order_product_no}" resultMap="omslaimproductExtendsMap"/>
	</resultMap>
	
	<resultMap type="omsClaim" id="omsClaimExtendsDetailMap" extends="omsClaimMap" autoMapping="true">
		<association property="omsOrder" resultMap="omsOrderMap"/>
		<collection property="omsClaimdeliverys" column="{orderId=order_id,claimNo=claim_no}" resultMap="omsClaimdeliveryMap"/>
		<collection property="omsClaimproducts" column="{orderId=order_id,orderProductNo=order_product_no}" resultMap="omslaimproductExtendsMap"/>
	</resultMap>
	
	<resultMap type="omsClaimproduct" id="omslaimproductExtendsMap" extends="omsClaimproductMap" autoMapping="true">
		<association property="omsOrderproduct" column="{orderId=order_id,orderProductNo=order_product_no}" resultMap="omsOrderproductMap"/>
	</resultMap>
	
	<select id="count" parameterType="string" resultType="Integer">
		/* [oms.claim.select.count][victor][2016. 08. 23.] */
		SELECT count(1)
		  FROM oms_claim t1
		 WHERE t1.order_id = #{orderId}
		   AND t1.claim_state_cd IN ('CLAIM_STATE_CD.REQ','CLAIM_STATE_CD.ACCEPT','CLAIM_STATE_CD.PAYMENT_READY')
	</select>
	
	<!-- BO 클레임 조회, 환불조회 -->
	<select id="list" parameterType="omsClaimSearch" resultMap="omsClaimExtendsMap">
		/* [oms.claim.select.list][victor][2016. 08. 23.] */
		<include refid="ccs.common.pagingPre" />
		SELECT 
			s.*,
			CASE
				WHEN s.complete_cnt > 0 and s.req_cnt > 0 THEN '부분입고'
				WHEN s.complete_cnt > 0 and s.req_cnt &lt;= 0 THEN '전체입고'
				ELSE '미입고'
			END as return_status
		  FROM (
				SELECT t1.name1
				      ,t1.member_no
				      ,t1.member_id
				
					  ,t5.claim_no
				      ,t5.claim_state_cd
				      ,t5.claim_type_cd
				      ,t5.order_coupon_dc_cancel_amt
				      ,t5.order_id
				      ,t5.return_pickup_type_cd
				      ,t5.req_dt
				      ,t5.accept_dt
				      ,t5.complete_dt
				      ,t5.cancel_dt
				      ,t5.ins_dt
				      ,t5.upd_dt
				      ,t5.ins_id
				      ,t5.upd_id
				      
					  ,CASE
					      WHEN t7.claim_product_state_cd = 'CLAIM_PRODUCT_STATE_CD.RETURN'
					      THEN COUNT (t7.claim_product_state_cd)
					      ELSE 0
					   END as complete_cnt
					  ,CASE
					      WHEN t7.claim_product_state_cd = 'CLAIM_PRODUCT_STATE_CD.REQ'
					        OR t7.claim_product_state_cd = 'CLAIM_PRODUCT_STATE_CD.RETURN_ORDER'
					      THEN COUNT (t7.claim_product_state_cd)
					      ELSE 0
					   END as req_cnt
	<!--
					  ,m.account_auth_dt
					  ,m.account_holder_name
					  ,m.account_no
					  ,m.b2e_yn
					  ,m.bank_cd
					  ,m.bank_name
	-->
				  FROM oms_order t1
				       INNER JOIN oms_claim t5
				          ON t1.order_id = t5.order_id
				       INNER JOIN oms_claimproduct t7
				          ON t5.order_id = t7.order_id
				         AND t5.claim_no = t7.claim_no
	<!--
				  LEFT OUTER JOIN mms_member_zts m
						  ON t1.member_no = m.member_no
	-->			         
				 WHERE t5.claim_type_cd != 'CLAIM_TYPE_CD.CANCEL'
				<if test='orderIds != null and orderIds != ""'>	 
				   AND t1.order_id IN (${orderIds})
					<if test='claimTypeCds != null and claimTypeCds != ""'>	 
				   AND t5.claim_type_cd IN (${claimTypeCds})
					</if>
				</if>
				<if test='orderIds == null or orderIds == ""'>
					<if test='startDate != null and startDate != ""' >
						<if test='endDate != null and endDate != ""'>
					   AND t5.req_dt BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{endDate},'YYYY-MM-DD HH24:MI:SS')
						</if>
					</if>
					<if test='claimTypeCds != null and claimTypeCds != ""'>	 
					   AND t5.claim_type_cd IN (${claimTypeCds})
					</if>
					<if test='claimStateCds != null and claimStateCds != ""'>	 
					   AND t5.claim_state_cd IN (${claimStateCds})
					</if>
					
					<if test='orderer != null and orderer != ""'>
						<if test='ordererType == "name"'>
					   AND t1.name1 like #{orderer} || '%'
						</if>
						<if test='ordererType == "id"'>
					   AND t1.member_id like #{orderer} || '%'
						</if>
						<if test='ordererType == "mobile"'>
					   AND t1.phone2 like '%' || #{orderer}
						</if>
					</if>
				</if>
				GROUP BY t1.name1
						,t1.member_no
						,t1.member_id
						,t5.claim_no
						,t5.claim_state_cd
						,t5.claim_type_cd
						,t5.order_coupon_dc_cancel_amt
						,t5.order_id
						,t5.return_pickup_type_cd
						,t5.req_dt
						,t5.accept_dt
						,t5.complete_dt
						,t5.cancel_dt
						,t5.ins_dt
						,t5.upd_dt
						,t5.ins_id
						,t5.upd_id
						,t7.claim_product_state_cd
				) s
		<if test='claimProductStateCds != null and claimProductStateCds != ""'>
		 WHERE 1 = 1
			<if test='claimProductStateCds.contains("1")'>	 
		   AND s.complete_cnt &lt;= 0
				<if test='claimProductStateCds.contains("2")'>	 
			   OR (s.complete_cnt > 0 AND s.req_cnt > 0) 
					<if test='claimProductStateCds.contains("3")'>	 
				   OR (s.complete_cnt > 0 AND s.req_cnt &lt;= 0)   
					</if>
				</if>
				<if test='!claimProductStateCds.contains("2")'>	 
					<if test='claimProductStateCds.contains("3")'>	 
				   OR (s.complete_cnt > 0 AND s.req_cnt &lt;= 0)   
					</if>
				</if>
			</if>
			<if test='!claimProductStateCds.contains("1")'>	 
				<if test='claimProductStateCds.contains("2")'>	 
			   AND (s.complete_cnt > 0 AND s.req_cnt > 0) 
					<if test='claimProductStateCds.contains("3")'>	 
				   OR (s.complete_cnt > 0 AND s.req_cnt &lt;= 0)   
					</if>
				</if>
				<if test='!claimProductStateCds.contains("2")'>	 
					<if test='claimProductStateCds.contains("3")'>	 
				   AND (s.complete_cnt > 0 AND s.req_cnt &lt;= 0)   
					</if>
				</if>
			</if>
		</if>
			
		  ORDER BY s.order_id DESC, s.claim_no ASC
		<include refid="ccs.common.pagingPost" />
	</select>

	<!-- BO 클레임 상세 -->
	<select id="targetList" parameterType="omsClaimSearch" resultMap="omsOrderproductExtendsMap">
		/* [oms.claim.select.targetList][victor][2016. 08. 23.] */
		SELECT 
			   t1.member_no,t1.member_id
			  ,t1.phone2 as orderer_mobile
			  
			  ,<include refid="oms.order.select.address_columns"/>
			  ,<include refid="oms.order.select.delivery_columns"/>
			  ,<include refid="oms.order.select.product_columns"/>		  
<!-- 			  ,(t4.order_coupon_dc_amt + t4.plus_coupon_dc_amt * 2 + t4.product_coupon_dc_amt * 2) as dc_amt -->
		      
		      ,t4.order_coupon_dc_amt + NVL(t4.calibrate_order_dc_amt, 0)
		      +t4.plus_coupon_dc_amt + NVL(t4.calibrate_plus_dc_amt, 0) * DECODE(t4.plus_single_apply_yn,'Y',1,t4.order_qty)
		      +t4.product_coupon_dc_amt + NVL(t4.calibrate_product_dc_amt, 0) * DECODE(t4.product_single_apply_yn,'Y',1,t4.order_qty)
		      as dc_amt
		      
			  ,t4.order_qty - t4.cancel_qty as available_claim_qty1
			  ,t4.out_qty - t4.return_qty as available_claim_qty2
			  ,CASE
					WHEN t4.order_product_state_cd = 'ORDER_PRODUCT_STATE_CD.SHIP'
					THEN t4.out_qty - t4.return_qty
					
					WHEN t4.order_product_state_cd = 'ORDER_PRODUCT_STATE_CD.DELIVERY'
					THEN t4.out_qty - t4.return_qty
					
					WHEN t4.order_product_state_cd = 'ORDER_PRODUCT_STATE_CD.DELIVERY_ORDER'
					THEN t4.out_qty - t4.return_qty
					
					WHEN t4.order_product_state_cd = 'ORDER_PRODUCT_STATE_CD.CONFIRMED'
					THEN t4.out_qty - t4.return_qty
					
					ELSE t4.order_qty - t4.cancel_qty
			   END as available_claim_qty
<!-- 			  ,t4.order_qty - t4.cancel_qty - t4.return_qty as available_claim_qty -->
			  
	          ,t5.claim_type_cd
	          ,NVL (t5.claim_state_cd, 'CLAIM_STATE_CD.REQ') as claim_state_cd
	          ,t7.claim_no
	          ,t7.claim_reason_cd
	          ,t7.claim_reason
	          
			<if test='claimNo != null and claimNo != ""'>
	          ,t7.claim_product_state_cd
	          ,t7.claim_qty
			</if>
			<if test='claimNo == null or claimNo == ""'>
				<if test='orderProductNos != null and orderProductNos != ""'>
				  ,CASE
				      WHEN t4.order_product_no IN (${orderProductNos}) OR t4.upper_order_product_no IN (${orderProductNos})
				      THEN 'CLAIM_PRODUCT_STATE_CD.REQ'
				      ELSE ''
				   END as claim_product_state_cd
		          ,NVL (t7.claim_qty, 0) as claim_qty
				</if>
				<!-- bo 전체주문취소 -->
				<if test='orderProductNos == null or orderProductNos == ""'>
		          ,NVL (t7.claim_product_state_cd, 'CLAIM_PRODUCT_STATE_CD.REQ') as claim_product_state_cd
		          ,t4.order_qty - t4.cancel_qty as claim_qty
				</if>
			</if>
			  ,level - 1 as tree_level
		      <!--,CONNECT_BY_ISLEAF as leaf_node-->
<!-- 		      ,COUNT(*) OVER () as TOTAL_COUNT -->
		      ,dupl.saleproduct_id as new_sale_product_id
		      ,dupl.saleproduct_name as new_sale_product_nm
		      ,dupl.order_product_no as new_order_product_no
		      
		      ,(select nvl(max(order_delivery_fee), 0) from oms_claimdelivery where order_id = t1.order_id) as claim_delivery_fee
		      
		  FROM oms_order t1
		       INNER JOIN oms_deliveryaddress t2
		          ON t1.order_id = t2.order_id 
		         AND t1.order_id = #{orderId}
		       INNER JOIN oms_delivery t3
		          ON t2.order_id = t3.order_id 
		         AND t2.delivery_address_no = t3.delivery_address_no
		       INNER JOIN oms_orderproduct t4
		          ON t3.order_id = t4.order_id 
		         AND t3.delivery_address_no = t4.delivery_address_no
		         AND t3.delivery_policy_no = t4.delivery_policy_no
          LEFT OUTER JOIN oms_orderproduct dupl
		          ON dupl.order_id = t4.order_id 
		         AND dupl.origin_order_product_no = t4.order_product_no
			<if test='claimNo != null and claimNo != ""'>
	             AND dupl.claim_no = #{claimNo}
			</if>
          LEFT OUTER JOIN oms_claim t5
	              ON t1.order_id = t5.order_id
			<if test='claimNo != null and claimNo != ""'>
	             AND t5.claim_no = #{claimNo}
			</if>
			<if test='claimNo == null or claimNo == ""'>
	             AND t5.claim_no is NULL
			</if>
<!--           LEFT OUTER JOIN oms_claimdelivery t6 -->
<!-- 	              ON t5.order_id = t6.order_id  -->
<!-- 	             AND t5.claim_no = t6.claim_no -->
          LEFT OUTER JOIN oms_claimproduct t7
	              ON t5.order_id = t7.order_id
	             AND t5.claim_no = t7.claim_no
	             AND t4.order_product_no = t7.order_product_no
<!-- 	             AND t7.claim_product_state_cd = 'CLAIM_PRODUCT_STATE_CD.REQ' -->
          START WITH t4.upper_order_product_no IS NULL AND t4.origin_order_product_no IS NULL
          CONNECT BY PRIOR t4.order_id = t4.order_id
                 AND PRIOR t4.order_product_no = NVL (t4.origin_order_product_no, t4.upper_order_product_no)
<!--    ORDER SIBLINGS BY t4.delivery_address_no, t4.delivery_policy_no, t4.order_product_no	 -->
   ORDER SIBLINGS BY t4.delivery_address_no, t4.order_product_no	

<!--
    START WITH t4.upper_order_product_no IS NULL
    CONNECT BY PRIOR t4.order_id = t4.order_id
           AND PRIOR t4.order_product_no = t4.upper_order_product_no
	  ORDER BY t4.delivery_address_no, t4.delivery_policy_no, t4.order_product_no   
-->
	</select>
	
	<!-- FO 클레임 조회 -->
	<!-- 
	omsClaim
		1:1 => omsOrder
		1:N => omsClaimproducts
				1:1 => omsOrderproduct
	 -->
<!-- 	<select id="foList" parameterType="omsOrderSearch" resultMap="omsOrderExtendsMap"> -->
	<select id="foList" parameterType="omsOrderSearch" resultMap="omsClaimExtendsMap">
		/* [oms.claim.select.foList][victor][2016. 09. 23.] */
		  SELECT t1.order_id
		        ,TO_CHAR (t1.order_dt, 'YYYY-MM-DD') as order_dt
		        ,t1.order_type_cd
		        ,t1.order_state_cd
		        ,t1.order_delivery_state_cd
		        ,t1.order_amt						<!-- 주문상품합계  -->
		        ,t1.payment_amt						<!-- 결제합계 -->
		        ,t1.dc_amt							<!-- 할인합계 -->
		        	
				,<include refid="oms.order.select.product_columns"/>
				
				,t5.claim_type_cd
				,TO_CHAR (t5.req_dt, 'YYYY-MM-DD') as req_dt
				,t7.claim_no
				,t7.claim_reason_cd
				,t7.claim_reason
				,t7.claim_product_state_cd
				,t7.claim_qty
		    FROM oms_order t1
		         INNER JOIN oms_orderproduct t4
		            ON t1.order_id = t4.order_id
				   AND t1.member_no = #{memberNo}
					<if test='orderTypeCds != null and orderTypeCds != ""'>	 
					 AND t1.order_type_cd = #{orderTypeCds}
					</if>
					<if test='orderTypeCds == null or orderTypeCds == ""'>	 
					 AND t1.order_type_cd != 'ORDER_TYPE_CD.REGULARDELIVERY'
					</if>
					<if test='startDate != null and startDate != ""' >
					 AND t1.order_dt &gt;= TO_DATE(#{startDate},'YYYY-MM-DD HH24:MI:SS')
					</if>
					<if test='endDate != null and endDate != ""'>
					 AND t1.order_dt &lt;= TO_DATE(#{endDate},'YYYY-MM-DD HH24:MI:SS')
					</if>
					<if test='product != null and product != ""'>
						<if test='productType == "id"'>
					 AND t4.product_id = #{product}
						</if>
						<if test='productType == "name"'>
					 AND t4.product_name like '%' || #{product} || '%'
						</if>
					</if>
            	 INNER JOIN oms_claim t5
		            ON t1.order_id = t5.order_id
            	 INNER JOIN oms_claimproduct t7
	                ON t4.order_id = t7.order_id
	               AND (t4.order_product_no = t7.order_product_no OR t4.origin_order_product_no = t7.order_product_no)
	               AND t5.claim_no = t7.claim_no
<!--
		   WHERE t1.member_no = #{memberNo}
			<if test='orderTypeCds != null and orderTypeCds != ""'>	 
			 AND t1.order_type_cd = #{orderTypeCds}
			</if>
			<if test='orderTypeCds == null or orderTypeCds == ""'>	 
			 AND t1.order_type_cd != 'ORDER_TYPE_CD.REGULARDELIVERY'
			</if>
			<if test='startDate != null and startDate != ""' >
			 AND t1.order_dt &gt;= TO_DATE(#{startDate},'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test='endDate != null and endDate != ""'>
			 AND t1.order_dt &lt;= TO_DATE(#{endDate},'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test='product != null and product != ""'>
				<if test='productType == "id"'>
			 AND t4.product_id = #{product}
				</if>
				<if test='productType == "name"'>
			 AND t4.product_name like '%' || #{product} || '%'
				</if>
			</if>
-->
<!-- 		ORDER BY t1.order_id DESC, t6.claim_no desc -->
       START WITH t4.upper_order_product_no IS NULL OR t4.origin_order_product_no IS NULL
       CONNECT BY PRIOR t4.order_id = t4.order_id
              AND PRIOR t4.order_product_no = NVL (t4.origin_order_product_no, t4.upper_order_product_no)
<!-- ORDER SIBLINGS BY t5.req_dt desc, t4.delivery_address_no, t4.delivery_policy_no, t4.order_product_no		 -->
ORDER SIBLINGS BY t5.req_dt desc, t4.delivery_address_no, t4.order_product_no		
	</select>
	
	<!-- FO 주문상세 -->
	<select id="fodetail" parameterType="omsClaimSearch" resultMap="omsClaimExtendsDetailMap">
		/* [oms.claim.select.fodetail][victor][2016. 09. 23.] */
<!-- 		SELECT s.*  -->
<!-- 		  FROM ( -->
			  SELECT
					 <include refid="oms.order.select.order_columns"/>
					,<include refid="oms.order.select.address_columns"/>
					,<include refid="oms.order.select.delivery_columns"/>
					,<include refid="oms.order.select.product_columns"/>
					
					,t5.claim_type_cd
					,t5.claim_state_cd
					,TO_CHAR (t5.req_dt, 'YYYY-MM-DD') as req_dt
					
<!-- 					,t6.exchange_delivery_fee -->
<!-- 					,t6.order_delivery_fee as claim_order_delivery_fee -->
<!-- 					,t6.return_delivery_fee -->
					
<!-- 					,t6.refund_delivery_fee -->
<!-- 					,t6.refund_wrap_fee -->
					
<!-- 					,t6.delivery_address_no -->
					,t6.delivery_coupon_dc_cancel_amt
<!-- 					,t6.delivery_policy_no -->
<!-- 					,t6.delivery_service_cd -->
					,t6.exchange_delivery_fee
					,t6.order_delivery_fee as claim_order_delivery_fee
					,t6.refund_delivery_fee
					,t6.refund_wrap_fee
					,t6.return_address1
					,t6.return_address2
					,t6.return_delivery_fee
					,t6.return_email
					,t6.return_name
					,t6.return_phone1
					,t6.return_phone2
					,t6.return_zip_cd
					,t6.wrap_coupon_dc_cancel_amt
					
					,t7.claim_no
					,t7.claim_reason_cd
					,t7.claim_reason
					,t7.claim_product_state_cd
					,t7.claim_qty
					
			    FROM oms_order t1
			         INNER JOIN oms_deliveryaddress t2
			            ON t1.order_id = t2.order_id
			           AND t1.order_id = #{orderId}
			         INNER JOIN oms_delivery t3
			            ON t2.order_id = t3.order_id
			           AND t2.delivery_address_no = t3.delivery_address_no
			         INNER JOIN oms_orderproduct t4
			            ON t2.order_id = t4.order_id
			           AND t2.delivery_address_no = t4.delivery_address_no
			           AND t3.delivery_policy_no = t4.delivery_policy_no
<!--
				LEFT OUTER JOIN oms_claim t5
					    ON t1.order_id = t5.order_id
		               AND t5.claim_no = #{claimNo}
				LEFT OUTER JOIN oms_claimdelivery t6
					    ON t5.order_id = t6.order_id
					   AND t5.claim_no = t6.claim_no
					   AND t3.delivery_address_no = t6.delivery_address_no
					   AND t3.delivery_policy_no = t6.delivery_policy_no
	            LEFT OUTER JOIN oms_claimproduct t7
		                ON t4.order_id = t7.order_id
		               AND (t4.order_product_no = t7.order_product_no OR t4.origin_order_product_no = t7.order_product_no)
		               AND t5.claim_no = t7.claim_no
	       START WITH t4.upper_order_product_no IS NULL AND t4.origin_order_product_no IS NULL
-->			           
					 INNER JOIN oms_claim t5
					    ON t1.order_id = t5.order_id
		               AND t5.claim_no = #{claimNo}
					 INNER JOIN oms_claimdelivery t6
					    ON t5.order_id = t6.order_id
					   AND t5.claim_no = t6.claim_no
					   AND t3.delivery_address_no = t6.delivery_address_no
					   AND t3.delivery_policy_no = t6.delivery_policy_no
					 INNER JOIN oms_claimproduct t7
		                ON t4.order_id = t7.order_id
		               AND (t4.order_product_no = t7.order_product_no OR t4.origin_order_product_no = t7.order_product_no)
		               AND t5.claim_no = t7.claim_no
	       START WITH t4.upper_order_product_no IS NULL OR t4.origin_order_product_no IS NULL
	       CONNECT BY PRIOR t4.order_id = t4.order_id
	              AND PRIOR t4.order_product_no = NVL (t4.origin_order_product_no, t4.upper_order_product_no)
<!-- 	ORDER SIBLINGS BY t4.delivery_address_no, t4.delivery_policy_no, t4.order_product_no -->
	ORDER SIBLINGS BY t4.delivery_address_no, t4.order_product_no
<!-- 				) s -->
<!-- 		WHERE s.claim_no = #{claimNo} -->
				
		   
	</select>
	
	
	<select id="delivery" parameterType="omsDelivery" resultMap="omsDeliveryMap">
		/* [oms.claim.select.delivery][victor][2016. 09. 23.] */
		  SELECT t2.order_id
		  		,t2.store_id
		  		,t2.delivery_address_no
		        ,t2.delivery_policy_no
		        
		        <!-- 배송 -->
		        ,MAX (t4.delivery_fee_free_yn) as delivery_fee_free_yn
		        ,MAX (t2.min_delivery_free_amt) as min_delivery_free_amt
		        ,MAX (t2.delivery_fee) as delivery_fee
		        
		        ,MAX (t2.order_delivery_fee) as order_delivery_fee
		        ,MAX (t2.apply_delivery_fee) as apply_delivery_fee
		        
		        ,MAX (t2.delivery_coupon_id) as delivery_coupon_id
		        ,MAX (t2.delivery_coupon_issue_no) as delivery_coupon_issue_no
		        ,MAX (t2.delivery_coupon_dc_amt) as delivery_coupon_dc_amt
		        
		        <!-- 포장 -->
		        ,MAX (t2.wrap_together_yn) as wrap_together_yn
		        <if test='selectKey == "cancel"'>
		        <!--
		        ,CASE 
		        	WHEN t4.order_product_type_cd != 'ORDER_PRODUCT_TYPE_CD.WRAP' 
		        	THEN SUM (t4.total_sale_price * (t4.order_qty - t4.cancel_qty))
		        	ELSE 0
		         END as product_sum_amt
		        -->
		        ,SUM (t4.total_sale_price * (t4.order_qty - t4.cancel_qty)) as product_sum_amt
		        ,CASE 
		        	WHEN MAX(t2.wrap_together_yn) = 'Y' 
		        	THEN SUM(DECODE(t4.wrap_yn, 'Y', t4.wrap_volume * t4.order_qty - t4.cancel_qty, 0))
		        	ELSE SUM(CEIL(DECODE(t4.wrap_yn, 'Y', t4.wrap_volume * t4.order_qty - t4.cancel_qty, 0)))
		         END as wrap_volume
		         </if>
		        <if test='selectKey == "return"'>
		        <!--
		        ,CASE 
		        	WHEN t4.order_product_type_cd != 'ORDER_PRODUCT_TYPE_CD.WRAP' 
		        	THEN SUM (t4.total_sale_price * (t4.out_qty - t4.return_qty))
		        	ELSE 0
		         END as product_sum_amt
		        -->
		        ,SUM (t4.total_sale_price * (t4.out_qty - t4.return_qty)) as product_sum_amt
		        ,CASE 
		        	WHEN MAX(t2.wrap_together_yn) = 'Y' 
		        	THEN SUM(DECODE(t4.wrap_yn, 'Y', t4.wrap_volume * t4.out_qty - t4.return_qty, 0))
		        	ELSE SUM(CEIL(DECODE(t4.wrap_yn, 'Y', t4.wrap_volume * t4.out_qty - t4.return_qty, 0)))
		         END as wrap_volume
		         </if>
		         
		        ,MAX (t2.order_wrap_fee) as order_wrap_fee
		        ,MAX (t2.apply_wrap_fee) as apply_wrap_fee
		        ,NVL(SUM (t3.refund_wrap_fee), 0) AS sum_refund_wrap_fee
		        
		        ,MAX (t2.wrap_coupon_id) as wrap_coupon_id
		        ,MAX (t2.wrap_coupon_issue_no) as wrap_coupon_issue_no
		        ,MAX (t2.wrap_coupon_dc_amt) as wrap_coupon_dc_amt
		        
		    FROM oms_orderproduct t4
		         INNER JOIN oms_delivery t2
				         ON t4.order_id = t2.order_id
				        AND t4.delivery_policy_no = t2.delivery_policy_no
				        AND t4.delivery_address_no = t2.delivery_address_no
	        LEFT OUTER JOIN oms_claimdelivery t3
			             ON t2.order_id = t3.order_id
			            AND t2.delivery_policy_no = t3.delivery_policy_no
			            AND t2.delivery_address_no = t3.delivery_address_no
		   WHERE t4.order_id = #{orderId}
		     AND t4.order_product_type_cd != 'ORDER_PRODUCT_TYPE_CD.WRAP'
		     AND t2.delivery_address_no = #{deliveryAddressNo}
		     AND t2.delivery_policy_no = #{deliveryPolicyNo}
<!-- 		     AND t4.order_qty > t4.cancel_qty -->
		GROUP BY t2.order_id, t2.store_id, t2.delivery_address_no, t2.delivery_policy_no
<!-- 		, t4.order_product_type_cd -->
<!-- 		ORDER BY t2.delivery_address_no, t2.delivery_policy_no -->
	</select>
	
	<select id="claimdelivery" parameterType="omsClaimSearch" resultMap="omsClaimdeliveryExtendsMap">
		/* [oms.claim.select.claimdelivery][victor][2016. 09. 23.] */
		
		
		<if test='claimNo == null or claimNo == ""'>
		SELECT t3.delivery_address_no
		      ,t3.delivery_policy_no
		      ,t3.delivery_service_cd
		      
		      ,0 as exchange_delivery_fee
		      ,0 as return_delivery_fee
		      ,0 as order_delivery_fee
		      
		      ,0 as wrap_coupon_dc_cancel_amt
		      ,0 as delivery_coupon_dc_cancel_amt
		      
		      ,0 as refund_delivery_fee
		      ,0 as refund_wrap_fee
		      
		      ,t3.order_id
		      ,t2.address1 as return_address1
		      ,t2.address2 as return_address2
		      ,t2.email as return_email
		      ,t2.name1 as return_name
		      ,t2.phone1 as return_phone1
		      ,t2.phone2 as return_phone2
		      ,t2.zip_cd as return_zip_cd
		      ,t3.store_id as store_id
		      
		      ,t3.delivery_fee as delivery_fee
		  FROM oms_deliveryaddress t2
		       INNER JOIN oms_delivery t3
		          ON t2.order_id = t3.order_id 
		         AND t2.delivery_address_no = t3.delivery_address_no
		       INNER JOIN oms_orderproduct t4
		          ON t3.order_id = t4.order_id
		         AND t3.delivery_address_no = t4.delivery_address_no
		         AND t3.delivery_policy_no = t4.delivery_policy_no
		 WHERE t2.order_id = #{orderId} 
			<if test='orderProductNos != null and orderProductNos != ""'>
		   AND t4.order_product_no IN (${orderProductNos})
			</if>
		</if>
		<if test='claimNo != null and claimNo != ""'>
		SELECT t6.claim_no
		      ,t6.delivery_address_no
		      ,t6.delivery_policy_no
		      ,t6.delivery_service_cd
		      
		      ,t6.exchange_delivery_fee
		      ,t6.return_delivery_fee
		      ,t6.order_delivery_fee
		      
		      ,t6.wrap_coupon_dc_cancel_amt
		      ,t6.delivery_coupon_dc_cancel_amt
		      
		      ,t6.refund_wrap_fee
		      ,t6.refund_delivery_fee
		      
		      ,t6.order_id
		      ,t6.return_address1
		      ,t6.return_address2
		      ,t6.return_email
		      ,t6.return_name
		      ,t6.return_phone1
		      ,t6.return_phone2
		      ,t6.return_zip_cd
		      ,t6.store_id
		      
		      ,t3.delivery_fee as delivery_fee
		      ,t5.claim_state_cd
		  FROM oms_deliveryaddress t2
		       INNER JOIN oms_delivery t3
		          ON t2.order_id = t3.order_id 
		         AND t2.delivery_address_no = t3.delivery_address_no
		       INNER JOIN oms_claim t5
		          ON t2.order_id = t5.order_id
		       INNER JOIN oms_claimdelivery t6
		          ON t5.order_id = t6.order_id
		         AND t5.claim_no = t6.claim_no
		         AND t3.delivery_address_no = t6.delivery_address_no
		         AND t3.delivery_policy_no = t6.delivery_policy_no
		 WHERE t2.order_id = #{orderId} 
		   AND t5.claim_no = #{claimNo}
		</if>
	</select>
	
	<select id="couponHistory" parameterType="omsClaimSearch" resultMap="omsClaimExtendsMap">
		/* [oms.claim.select.couponHistory][victor][2016. 09. 01.] */
<!--
		  SELECT SUM (NVL (c1.product_coupon_dc_cancel_amt, 0)) AS product_coupon_dc_cancel_amt
		        ,SUM (NVL (c1.plus_coupon_dc_cancel_amt, 0)) AS plus_coupon_dc_cancel_amt
		        ,SUM (NVL (c1.order_coupon_dc_cancel_amt, 0)) AS order_coupon_dc_cancel_amt
		        ,SUM (NVL (c2.delivery_coupon_dc_cancel_amt, 0)) AS delivery_coupon_dc_cancel_amt
		        ,SUM (NVL (c2.wrap_coupon_dc_cancel_amt, 0)) AS wrap_coupon_dc_cancel_amt
		    FROM    oms_claim c1
		         INNER JOIN
		            oms_claimdelivery c2
		         ON c1.order_id = c2.order_id AND c1.claim_no = c2.claim_no
		   WHERE c1.order_id = #{orderId} 
		     AND c1.claim_no &lt;= 2
-->		
		  SELECT SUM (NVL (c1.product_coupon_dc_cancel_amt, 0)) AS product_coupon_dc_cancel_amt
		        ,SUM (NVL (c1.plus_coupon_dc_cancel_amt, 0)) AS plus_coupon_dc_cancel_amt
		        ,SUM (NVL (c1.order_coupon_dc_cancel_amt, 0)) AS order_coupon_dc_cancel_amt
		        ,SUM (NVL (c2.delivery_coupon_dc_cancel_amt, 0)) AS delivery_coupon_dc_cancel_amt
		        ,SUM (NVL (c2.wrap_coupon_dc_cancel_amt, 0)) AS wrap_coupon_dc_cancel_amt
		        ,c1.claim_no
		    FROM oms_claim c1
		         INNER JOIN
		            (  SELECT order_id
		                     ,claim_no
		                     ,SUM (NVL (delivery_coupon_dc_cancel_amt, 0)) AS delivery_coupon_dc_cancel_amt
		                     ,SUM (NVL (wrap_coupon_dc_cancel_amt, 0)) AS wrap_coupon_dc_cancel_amt
		                 FROM oms_claimdelivery
		                WHERE order_id = #{orderId}
		                <if test='claimNo != null and claimNo != ""'>
		                  AND claim_no &lt;= #{claimNo}
		                </if> 
		             GROUP BY order_id, claim_no) c2
		         ON c1.order_id = c2.order_id AND c1.claim_no = c2.claim_no
		GROUP BY c1.claim_no
		ORDER BY c1.claim_no DESC		     
	</select>
	
	<select id="exchangeFee" parameterType="omsClaimSearch" resultType="string">
		/* [oms.claim.select.exchangeFee][victor][2016. 09. 23.] */
<!-- 		SELECT SUM(NVL(exchange_delivery_fee, 0)) * 2 as exchange_delivery_fee -->
		SELECT SUM(NVL(exchange_delivery_fee, 0)) as exchange_delivery_fee
		  FROM oms_claimdelivery 
		 WHERE order_id = #{orderId}
		   AND claim_no = #{claimNo}	
	</select>
	
	
	<!-- 클레임 상품 조회 
	<select id="productList" parameterType="omsClaimSearch" resultMap="omsClaimproductMap">
		/* [oms.claim.select.productList][victor][2016. 09. 23.] */
		SELECT claim_no
		      ,claim_product_state_cd
		      ,claim_qty
		      ,claim_reason
		      ,claim_reason_cd
		      ,order_id
		      ,order_product_no
		      ,return_dt
		      ,return_order_dt
		  FROM oms_claimproduct
		 WHERE order_id = #{orderId}
		   AND claim_no = #{claimNo}		  
	</select>
	-->
	

<!--
           SELECT LEVEL
                 ,LPAD (' ', 4 * (LEVEL - 1)) || t1.order_product_no as aaa
                 ,t1.order_id
                 ,t1.order_product_no
                 ,t1.upper_order_product_no
                 ,LTRIM (SYS_CONNECT_BY_PATH (t1.order_product_no, ' > '), ' > ') as depthfullname
             FROM oms_orderproduct t1
            WHERE t1.order_id = '0000000023'
       START WITH t1.upper_order_product_no IS NULL
       CONNECT BY PRIOR t1.order_id = t1.order_id
              AND PRIOR t1.order_product_no = t1.upper_order_product_no
ORDER SIBLINGS BY t1.order_product_no ASC
-->	


</mapper>