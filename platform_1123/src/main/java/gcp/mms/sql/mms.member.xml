<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mms.member">
	
	<resultMap type="mmsMember" id="getMemberResult" autoMapping="true">
		<association property="mmsMemberZts" javaType="mmsMemberZts">
			<result property="memGradeCd" 			column="MEM_GRADE_CD"/>
		</association>
	</resultMap>
	<select id="getMemberSearchList" resultMap="getMemberResult">
		/* [mms.member.getMemberSearchList][emily][2016. 6. 22] */
		<include refid="ccs.common.pagingPre" />
		SELECT *
		FROM (SELECT MM.*,
			        MZ.MEM_GRADE_CD
				FROM MMS_MEMBER MM
			        ,MMS_MEMBER_ZTS MZ
			WHERE MM.MEMBER_NO = MZ.MEMBER_NO
		
			)	
		WHERE 1=1
		<if test="startDate != null and startDate != ''">
   	 		<if test="endDate != null and endDate != ''">
   	 			AND	INS_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
				AND INS_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
   	 		</if> 
    	 </if>
		<if test="memNos != null and memNos != ''">
			AND MEMBER_NO IN ( ${memNos} )
		</if>
		<if test="name != null and name != ''">
			AND MEMBER_NO LIKE  '%' || #{name} || '%'
		</if>		
		<if test="memStateCds != null and memStateCds != ''">
			AND STATUS IN ( ${memStateCds} )
		</if>
		<if test="memGradeCds != null and memGradeCds != ''">
			AND MEM_GRADE_CD IN ( ${memGradeCds} )
		</if>
      <include refid="ccs.common.pagingPost" />
	</select>	
	
	<select id="getMemberInfo" resultMap="getMemberResult">
		/* [mms.member.getMemberInfo][emily][2016. 6. 22] */
		SELECT *
		FROM (SELECT MM.*,
			        MZ.MEM_GRADE_CD,
			        MC.CUSTOMERNAME,
			        MC.EMAILRECEIPTFLAG
				FROM MMS_MEMBER MM
			        ,MMS_MEMBER_ZTS MZ
			        ,MMS_CUSTOMER MC
			WHERE MM.MEMBER_NO = MZ.MEMBER_NO
			AND MM.CUSTOMERNO = MC.CUSTOMERNO
			)	
		WHERE MEMBER_NO = #{memberNo} 
	</select>
	
	<resultMap type="mmsMemberZts" id="memberListMap" autoMapping="true">
		<id column="MEMBER_NO" property="memberNo"/>
		<association property="mmsMember" javaType="mmsMember" resultMap="memberMap">
		</association>
	</resultMap>
	<resultMap type="mmsMember" id="memberMap" autoMapping="true">
		<id column="MEMBER_NO" property="memberNo"/>
		<result column="EMPLOYEE_YN" property="employeeYn"/>
	</resultMap>
	
	<select id="getMemberList" resultMap="memberListMap">
		/* [mms.member.getMemberList][allen][2016. 7. 7.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT /*+ ORDERED */
			      T1.MEMBER_NO
			    , T1.STORE_ID
			    , T1.MEM_GRADE_CD
			    , T1.MEMBERSHIP_YN
			    , T1.MEMBERSHIP_REG_DT
			    , T1.B2E_YN
			    , T1.B2E_REG_DT
			    , T1.REG_NO
			    , T1.CHILDREN_YN
			    , T1.CHILDREN_REG_DT
			    , T1.ADDRESS_NO
			    , T1.BANK_NAME
			    , T1.ACCOUNT_HOLDER_NAME
			    , T1.ACCOUNT_NO
			    , T1.ACCOUNT_AUTH_DT
			    , T1.CHILDREN_DEAL_ID
			    , T1.JOB_CD
			    , T1.MARRIAGE_YN
			    , T1.SPOUSE_BIRTHDAY
			    , T1.WEDDING_DAY
			    , T1.INS_DT
			    , T1.INS_ID
			    , T1.UPD_DT
			    , T1.UPD_ID
			    ,(SELECT US.NAME FROM CCS_USER US WHERE T1.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
			    , T1.BABY_YN_CD
			    , T1.BABY_GENDER_CD
			    , T1.BABY_BIRTHDAY
			    , T1.BILLING_KEY
		   		, T1.PAYMENT_BUSINESS_CD
<!-- 		   		, T1.PAYMENT_BUSINESS_NM -->
		   		, T1.CHILDREN_ACCOUNT_NO
		   		, T1.BANK_CD
			    , T2.CUSTOMER_NO
			    , T2.MEMBER_STATE_CD
			    , T2.MEMBER_ID
			    , T2.MEMBER_NAME
			    , T2.REG_CHANNEL_URL
			    , T2.CARD_ISSUE_NO
			    , T2.CARD_ISSUE_DT
			    , T2.REG_DT
			    , T2.FOREIGNER_YN
			    , TO_CHAR(T2.BIRTHDAY, 'YYYY/MM/DD') AS BIRTHDAY
			    , T2.LUNAR_YN
			    , T2.GENDER_CD
			    , T2.DISCRHASH
			    , T2.CIVERSION
			    , T2.CISCRHASH
			    , T2.CERT_DIV_CD
			    , T2.PREMIUM_YN
			    , T2.PREMIUM_REG_DT
			    , T2.PHONE2
			    , T2.PHONE1
			    , T2.EMAIL
			    , T2.EMAIL_YN
			    , T2.SMS_YN
			    , T2.APP_PUSH_YN
			    , T2.SNS_ID
			    , T2.SNS_CHANNEL_CD  
			    , T2.OFFSHOP_ID  
		        , DECODE((SELECT COUNT(*) FROM MMS_BLACKLIST WHERE MEMBER_NO = T1.MEMBER_NO AND SYSDATE BETWEEN START_DT AND END_DT AND BLACKLIST_STATE_CD = 'BLACKLIST_STATE_CD.REG'), 0, 'N', 'Y') AS BLACKLIST_YN
		        , T2.EMPLOYEE_YN
		        , T2.DEVICE_TYPE_CD
				, T2.SNS_MEMBER_YN
				, T2.EMPLOYEE_EMAIL
				, T2.EMPLOYEE_REG_DT
				, T2.REG_TYPE_CD
				, T2.AGREE_YN
				, T2.AGREE_DT
				, T2.AGREE_WITHDRAW_DT
				, T2.OFFSHOP_CARD_NO
				, T2.OFFSHOP_POINT_SWITCH_YN
				, T2.SITE_MEMBER_ID
				, T2.OFFSHOP_MEMBER_NO
		  FROM MMS_MEMBER T2, MMS_MEMBER_ZTS T1
			  <if test="(blacklistY != null and blacklistY == 'true') or (blacklistN != null and blacklistN == 'true')">
			  LEFT JOIN MMS_BLACKLIST T4
			  	ON T1.MEMBER_NO = T4.MEMBER_NO
			   AND SYSDATE BETWEEN T4.START_DT AND T4.END_DT
			  </if>  

		    WHERE T1.MEMBER_NO = T2.MEMBER_NO
		 <if test="startDate != null and startDate != ''">
   	 		<if test="endDate != null and endDate != ''">
   	 			AND	T1.INS_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
				AND T1.INS_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
   	 		</if> 
    	</if>
    	 <if test="memberIds != null and memberIds != ''">
	       AND T2.MEMBER_ID IN ( ${ memberIds } )
	 	</if>
		<if test="membershipYn != null and membershipYn == 'true'">
			AND T1.MEMBERSHIP_YN = 'Y'
		</if>
		<if test="premiumYn != null and premiumYn == 'true'">
			AND T2.PREMIUM_YN = 'Y'
		</if>
		<if test="employeeYn != null and employeeYn == 'true'">
			AND T2.EMPLOYEE_YN = 'Y'
		</if>
		<if test="childrenYn != null and childrenYn == 'true'">
			AND T1.CHILDREN_YN = 'Y'
		</if>
		<if test="b2eYn != null and b2eYn == 'true'">
			AND T1.B2E_YN = 'Y'
		</if>
		<if test="cellNo != null and cellNo != ''">
				AND T2.PHONE2 = #{cellNo}
		</if>
		<if test="name != null and name != ''">
				AND T2.MEMBER_NAME LIKE '%'|| #{name} ||'%'
		</if>
		<if test="infoType != null and infoType == 'USERID'">
			<if test="searchKeyword != null and searchKeyword != ''">
				AND T2.MEMBER_ID = #{searchKeyword}
			</if>
		</if>
		<if test="infoType != null and infoType == 'NAME'">
			<if test="searchKeyword != null and searchKeyword != ''">
				AND T2.MEMBER_NAME = #{searchKeyword} 
			</if>		
		</if>
		    
		 ORDER BY T1.INS_DT
		<include refid="ccs.common.pagingPost"/>
	</select>
	
	<resultMap type="mmsMemberZts" id="memberDetailMap" autoMapping="true">
		<id column="MEMBER_NO" property="memberNo"/>
		<association property="mmsMember" javaType="mmsMember" resultMap="memberMap">
			<id column="MEMBER_NO" property="memberNo"/>
		</association>
		<collection property="mmsAddresss" ofType="gcp.mms.model.MmsAddress">
				<result column="MEMBER_NO" property="memberNo"/>
				<result column="ADDRESS_ADDRESS_NO" property="addressNo" />
				<result column="ZIP_CD" property="zipCd" />
				<result column="ADDRESS1" property="address1" />
				<result column="ADDRESS2" property="address2" />
		</collection>
		<collection property="mmsInterests" ofType="gcp.mms.model.MmsInterest">
				<id column="MEMBER_NO" property="memberNo"/>
				<id column="INTEREST_NO" property="interestNo" />
				<result column="INTEREST_TYPE_CD" property="interestTypeCd" />
				<result column="DISPLAY_CATEGORY_ID" property="displayCategoryId" />
				<result column="DISPLAY_CATEGORY_NAME" property="displayCategoryName" />
				<result column="BRAND_ID" property="brandId" />
				<result column="BRAND_NAME" property="brandName" />
				<result column="PURPOSE_TYPE_CD" property="purposeTypeCd" />
				<result column="STYLE_TYPE_CD" property="styleTypeCd" />
		</collection>
	</resultMap>
	<select id="getMemberDetail" resultMap="memberDetailMap">
	/* [mms.member.getMemberDetail][allen][2016. 7. 13.] */
	SELECT  
		     T1.MEMBER_NO
		   , T1.STORE_ID
		   , T1.MEM_GRADE_CD
		   , T1.MEMBERSHIP_YN
		   , T1.MEMBERSHIP_REG_DT
		   , T1.B2E_YN
		   , T1.B2E_REG_DT
		   , T1.REG_NO
		   , T1.CHILDREN_YN
		   , T1.CHILDREN_REG_DT
		   , T1.ADDRESS_NO
		   , T1.BANK_NAME
		   , T1.ACCOUNT_HOLDER_NAME
		   , T1.ACCOUNT_NO
		   , T1.ACCOUNT_AUTH_DT
		   , T1.CHILDREN_DEAL_ID
		   , T1.JOB_CD
		   , T1.MARRIAGE_YN
		   , T1.SPOUSE_BIRTHDAY
		   , T1.WEDDING_DAY
		   , TO_CHAR(T1.INS_DT, 'YYYY/MM/DD hh24:mi:ss') AS INS_DT
		   , T1.INS_ID
		   , T1.UPD_DT
		   , T1.UPD_ID
		   , T1.BABY_YN_CD
		   , T1.BABY_GENDER_CD
		   , T1.BABY_BIRTHDAY
		   , T1.BILLING_KEY
		   , T1.PAYMENT_METHOD_CD
		   , T1.PAYMENT_BUSINESS_CD
		   , T1.REGULAR_PAYMENT_BUSINESS_CD
		   , T1.REGULAR_PAYMENT_BUSINESS_NM
		   , T1.CHILDREN_ACCOUNT_NO
		   , T1.BANK_CD
		   , T2.MEMBER_STATE_CD
		   , T2.MEMBER_ID
		   , T2.MEMBER_NAME
		   , T2.REG_CHANNEL_URL
		   , T2.CARD_ISSUE_NO
		   , T2.CARD_ISSUE_DT
		   , TO_CHAR(T2.REG_DT, 'YYYY/MM/DD hh24:mi:ss') AS REG_DT
		   , T2.FOREIGNER_YN
		   , TO_CHAR(T2.BIRTHDAY, 'YYYY/MM/DD') AS BIRTHDAY
		   , T2.LUNAR_YN
		   , T2.GENDER_CD
		   , T2.DISCRHASH
		   , T2.CIVERSION
		   , T2.CISCRHASH
		   , T2.CERT_DIV_CD
		   , T2.PREMIUM_YN
		   , T2.PREMIUM_REG_DT
		   , T2.EMPLOYEE_YN
		   , T2.PHONE2
		   , T2.PHONE1
		   , T2.EMAIL
		   , T2.EMAIL_YN
		   , T2.SMS_YN
		   , T2.APP_PUSH_YN
		   , T2.SNS_ID
		   , T2.SNS_CHANNEL_CD
		   , T2.OFFSHOP_ID 
		   , T2.EMPLOYEE_YN
		   , T2.OFFSHOP_MEMBER_NO
		   , T1.AFFILIATECARD_CD
		   , T1.AFFILIATECARD_NO
		   , T1.AFFILIATECARD_AUTH_DT
		   , T1.AFFILIATECARD_EXPIRE_DT  
           , T3.INTEREST_NO
           , T3.INTEREST_TYPE_CD
           , T3.DISPLAY_CATEGORY_ID
           , DECODE(T3.DISPLAY_CATEGORY_ID, NULL, '', 
           				(SELECT LTRIM (SYS_CONNECT_BY_PATH (DC.NAME, ' > '), ' > ')
         				   FROM DMS_DISPLAYCATEGORY DC
         				  WHERE DC.DISPLAY_CATEGORY_ID = T3.DISPLAY_CATEGORY_ID
        				  START WITH DC.UPPER_DISPLAY_CATEGORY_ID IS NULL
        				  CONNECT BY PRIOR DC.DISPLAY_CATEGORY_ID = DC.UPPER_DISPLAY_CATEGORY_ID)) AS DISPLAY_CATEGORY_NAME
           , T3.BRAND_ID
           , DECODE(T3.BRAND_ID, NULL, '', (SELECT NAME FROM PMS_BRAND WHERE BRAND_ID = T3.BRAND_ID)) AS BRAND_NAME
           , T3.PURPOSE_TYPE_CD
           , T3.STYLE_TYPE_CD
           , T4.ADDRESS_NO AS ADDRESS_ADDRESS_NO
           , T4.ZIP_CD
           , T4.ADDRESS1
           , T4.ADDRESS2
		   , (SELECT SUM(DEPOSIT_AMT) AS BALANCE_AMT
			    FROM MMS_DEPOSIT
			   WHERE STORE_ID = #{storeId} AND MEMBER_NO = #{memberNo}
			GROUP BY MEMBER_NO) AS depositBalanceAmt
           , (SELECT COUNT(*) 
                     FROM SPS_COUPONISSUE 
                    WHERE STORE_ID = #{storeId} 
                      AND MEMBER_NO = #{memberNo} 
                      AND COUPON_ISSUE_STATE_CD = 'COUPON_ISSUE_STATE_CD.REG'
                      AND SYSDATE BETWEEN USE_START_DT AND USE_END_DT) AS cpnIssueCnt
           , (SELECT SUM(BALANCE_CARROT)
			    FROM MMS_CARROT
			   WHERE     MEMBER_NO = #{memberNo}
			         AND CARROT &gt; 0
			         AND EXPIRE_DT &gt; SYSDATE
			GROUP BY MEMBER_NO) AS carrotBalanceAmt
           , (SELECT TO_CHAR(LOGIN_DT, 'YYYY/MM/DD hh24:mi:ss')
  				FROM (SELECT * 
				        FROM MMS_LOGINHISTORY 
				        WHERE DEVICE_TYPE_CD = 'DEVICE_TYPE_CD.APP'
				          AND MEMBER_NO = #{memberNo} 
				        ORDER BY LOGIN_DT DESC) WHERE ROWNUM = 1) AS LATEST_APP_LOGIN_DT
           , (SELECT TO_CHAR(LOGIN_DT, 'YYYY/MM/DD hh24:mi:ss')
  				FROM (SELECT * 
				        FROM MMS_LOGINHISTORY 
				        WHERE DEVICE_TYPE_CD = 'DEVICE_TYPE_CD.PC'
				          AND MEMBER_NO = #{memberNo} 
				        ORDER BY LOGIN_DT DESC) WHERE ROWNUM = 1) AS LATEST_PC_LOGIN_DT
           , (SELECT TO_CHAR(LOGIN_DT, 'YYYY/MM/DD hh24:mi:ss')
  				FROM (SELECT * 
				        FROM MMS_LOGINHISTORY 
				        WHERE DEVICE_TYPE_CD = 'DEVICE_TYPE_CD.MW'
				          AND MEMBER_NO = #{memberNo} 
				        ORDER BY LOGIN_DT DESC) WHERE ROWNUM = 1) AS LATEST_MW_LOGIN_DT
      FROM MMS_MEMBER_ZTS T1
      JOIN MMS_MEMBER T2
        ON T1.MEMBER_NO = T2.MEMBER_NO
      LEFT JOIN MMS_INTEREST T3
        ON T1.MEMBER_NO = T3.MEMBER_NO
      LEFT JOIN MMS_ADDRESS T4
        ON T1.MEMBER_NO = T4.MEMBER_NO
      WHERE T1.MEMBER_NO = #{memberNo}
	
	</select>
	
	<select id="getMemberGradeHistory" resultType="mmsMemberZtsHistory">
		/* [mms.member.getMemberGradeHistory][allen][2016. 7. 13.] */
		SELECT T1.*, 
         	   LEAD(T1.MEM_GRADE_CD) OVER (ORDER BY T1.APPLY_START_DT DESC) AS PRE_MEM_GRADE_CD 
          FROM MMS_MEMBER_ZTS_HISTORY T1
          WHERE T1.MEMBER_NO = #{memberNo}
	</select>
	
	<update id="updateMarketingReceipt" parameterType="mmsMember">
		/* [mms.member.updateMarketingReceipt][allen][2016. 7. 13.] */
		UPDATE MMS_MEMBER
		   SET 
		   		<if test="emailYn != null and emailYn != ''">
		   			EMAIL_YN = #{emailYn}
		   		</if>
		   		<if test="smsYn != null and smsYn != ''">
		   			SMS_YN = #{smsYn}
		   		</if>
		   		<if test="appPushYn != null and appPushYn != ''">
		   			APP_PUSH_YN = #{appPushYn}
		   		</if>
		 WHERE TRIM(MEMBER_NO) = #{memberNo}			
	</update>
	
	<select id="getMemberDepositList" resultType="mmsDeposit">
		/* [mms.member.getMemberDepositList][allen][2016. 7. 19.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT	
				T1.MEMBER_NO
			  , T1.DEPOSIT_NO
			  , T1.DEPOSIT_AMT
			  , T1.DEPOSIT_TYPE_CD
			  , T1.NOTE
			  , T1.DEPOSIT_AMT + (SELECT NVL(SUM (DEPOSIT_AMT), 0) FROM MMS_DEPOSIT WHERE DEPOSIT_NO &lt; T1.DEPOSIT_NO AND MEMBER_NO = T1.MEMBER_NO) AS BALANCE_AMT
			  , T1.ORDER_ID
			  , T1.INS_DT
			  , T1.INS_ID
			  , (SELECT NAME FROM CCS_USER WHERE USER_ID = T1.INS_ID) INS_NAME 
			  , T1.UPD_DT
			  , T1.UPD_ID
			  , (SELECT NAME FROM CCS_USER WHERE USER_ID = T1.UPD_ID) UPD_NAME
			  , (SELECT DECODE(SUM(DEPOSIT_AMT), null, 0, SUM(DEPOSIT_AMT)) 
                    FROM  MMS_DEPOSIT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(DEPOSIT_AMT) = 1 
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>
            		 <if test="depositTypeCds != null and depositTypeCds != '' ">
                		AND DEPOSIT_TYPE_CD IN (${depositTypeCds})
        		 	 </if>
                  ) AS depositPlusAmt
			  , (SELECT DECODE(SUM(DEPOSIT_AMT), null, 0, SUM(DEPOSIT_AMT)) 
                    FROM  MMS_DEPOSIT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(DEPOSIT_AMT) = -1 
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>
            		 <if test="depositTypeCds != null and depositTypeCds != '' ">
                		AND DEPOSIT_TYPE_CD IN (${depositTypeCds})
        		 	 </if>
                  ) AS depositMinusAmt
		 FROM MMS_DEPOSIT T1
		 WHERE T1.MEMBER_NO = #{memberNo}
		 <if test="startDate != null and startDate != ''">
      		<if test="endDate != null and endDate != ''">
          		AND	T1.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
          		AND T1.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
      		</if>
         </if>
         <if test="depositTypeCds != null and depositTypeCds != '' ">
                AND T1.DEPOSIT_TYPE_CD IN (${depositTypeCds})
         </if>
		 ORDER BY T1.INS_DT DESC
		 <include refid="ccs.common.pagingPost"/>
	</select>

    <resultMap id="depositList" type="mmsDeposit" autoMapping="true">
        <id property="memberNo" column="MEMBER_NO" />
        <id property="depositNo" column="DEPOSIT_NO" />
        <result property="claimNo" column="CLAIM_NO" />
        <association property="mmsMember" javaType="mmsMember">
            <id property="memberNo" column="MEMBER_NO" />
            <result property="memberName" column="MEMBER_NAME" />
            <result property="memberId" column="MEMBER_ID" />
        </association>
        <association property="omsOrder" javaType="omsOrder">
            <result property="orderId" column="ORDER_ID" />
   		</association>
    </resultMap>

	<select id="getDepositList" resultMap="depositList">
		/* [mms.member.getDepositList][ian][2016. 8. 17.] */
		<include refid="ccs.common.pagingPre"/>
		  SELECT MD.DEPOSIT_NO,
		         MD.MEMBER_NO,
		         MM.MEMBER_ID,
		         MM.MEMBER_NAME,
		         MD.DEPOSIT_TYPE_CD,
		         MD.DEPOSIT_AMT,
<!-- 		         MD.BALANCE_AMT, -->
		         MD.DEPOSIT_AMT + (SELECT NVL(SUM (DEPOSIT_AMT), 0) FROM MMS_DEPOSIT WHERE DEPOSIT_NO &lt; MD.DEPOSIT_NO AND MEMBER_NO = MD.MEMBER_NO) AS BALANCE_AMT, 
		         MD.INS_DT,
		         MD.NOTE,
		         OO.ORDER_ID,
		         OC.CLAIM_NO,
		         MD.UPD_ID,
		         MD.UPD_DT,
		         (SELECT US.NAME FROM CCS_USER US WHERE MD.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
		    FROM MMS_DEPOSIT MD
		         INNER JOIN MMS_MEMBER MM
		            ON MM.MEMBER_NO = MD.MEMBER_NO
		         INNER JOIN MMS_MEMBER_ZTS MMZ
		            ON MMZ.MEMBER_NO = MM.MEMBER_NO
		         LEFT OUTER JOIN OMS_ORDER OO
		            ON OO.ORDER_ID = MD.ORDER_ID
		         LEFT OUTER JOIN OMS_CLAIM OC
		            ON OC.ORDER_ID = OO.ORDER_ID
         WHERE 1=1
            <if test="startDate != null and startDate != ''">
                <if test="endDate != null and endDate != ''">
                    AND	MD.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    AND MD.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                </if>
            </if>
            <if test="depositTypeCds != null and depositTypeCds != '' ">
                AND MD.DEPOSIT_TYPE_CD IN (${depositTypeCds})
            </if>
            <if test="searchKeyword != null and searchKeyword !=''">
                <if test=" 'NAME'.equals(infoType)">
            	AND MM.MEMBER_NAME = #{searchKeyword}
                </if>
                <if test=" 'ID'.equals(infoType)">
            	AND MM.MEMBER_ID = #{searchKeyword}
                </if>
            </if>
            <if test="orderId != null and orderId != '' ">
                AND OO.ORDER_ID = #{orderId}
            </if>
            <if test="claimNo != null and claimNo != '' ">
                AND OC.CLAIM_NO = #{claimNo}
            </if>
		 ORDER BY INS_DT DESC, DEPOSIT_NO DESC
		 <include refid="ccs.common.pagingPost"/>
	</select>
	
    <resultMap id="carrotList" type="mmsCarrot" autoMapping="true">
        <id property="memberNo" column="MEMBER_NO" />
        <id property="carrotNo" column="CARROT_NO" />
        <association property="mmsMember" javaType="mmsMember" resultMap="memberInfo">
        </association>
    </resultMap>
	<resultMap type="mmsMember" id="memberInfo" autoMapping="true">
		<id property="memberNo" column="MEMBER_NO"/>
	</resultMap>
	
	<select id="getMemberCarrotList" resultMap="carrotList">
		/* [mms.member.getMemberCarrotList][allen][2016. 7. 19.] */
		<include refid="ccs.common.pagingPre"/>
         SELECT 
                 MC.MEMBER_NO
               , MC.CARROT_NO
               , MC.CARROT
               , MC.CARROT_TYPE_CD
               , MC.NOTE
			   , MC.CARROT + (SELECT NVL(SUM (CARROT), 0) FROM MMS_CARROT WHERE CARROT_NO &lt; MC.CARROT_NO AND MEMBER_NO = MC.MEMBER_NO) AS BALANCE_AMT
               , MC.EXPIRE_DT
               , MC.INS_DT
               , MC.INS_ID
               , (SELECT NAME FROM CCS_USER WHERE USER_ID = MC.INS_ID) INS_NAME 
               , MC.UPD_ID
               , MC.UPD_DT
               , (SELECT NAME FROM CCS_USER WHERE USER_ID = MC.UPD_ID) UPD_NAME
               , (SELECT DECODE(SUM(CARROT), null, 0, SUM(CARROT)) 
                    FROM  MMS_CARROT 
                   WHERE MEMBER_NO =  #{memberNo}
                     AND SIGN(CARROT) = 1 
                     AND CARROT_TYPE_CD = 'CARROT_TYPE_CD.EVENT'
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')  
                    		AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>	
                     ) AS eventPlusAmt
               , (SELECT DECODE(SUM(CARROT), null, 0, SUM(CARROT))  
                    FROM  MMS_CARROT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(CARROT) = -1 
                     AND CARROT_TYPE_CD = 'CARROT_TYPE_CD.EVENT'
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>
                     ) AS eventMinusAmt
               , (SELECT DECODE(SUM(CARROT), null, 0, SUM(CARROT)) 
                    FROM  MMS_CARROT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(CARROT) = 1 
                     AND CARROT_TYPE_CD = 'CARROT_TYPE_CD.CS'
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>
                     ) AS csPlusAmt
               , (SELECT DECODE(SUM(CARROT), null, 0, SUM(CARROT)) 
                    FROM  MMS_CARROT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(CARROT) = -1 
                     AND CARROT_TYPE_CD = 'CARROT_TYPE_CD.CS'
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if>
                     ) AS csMinusAmt
                 , (SELECT DECODE(SUM(BALANCE_CARROT), null, 0, SUM(BALANCE_CARROT)) 
                    FROM  MMS_CARROT 
                   WHERE MEMBER_NO = #{memberNo}
                     AND SIGN(CARROT) = 1 
                     AND EXPIRE_DT &lt;= SYSDATE
                     <if test="startDate != null and startDate != ''">
                		<if test="endDate != null and endDate != ''">
                    		AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    		AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                		</if>
            		 </if> 
                     ) AS expiredAmt     
          	FROM MMS_CARROT MC
         	WHERE MC.MEMBER_NO = #{memberNo}
            <if test="startDate != null and startDate != ''">
                <if test="endDate != null and endDate != ''">
                    AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                    AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
                </if>
            </if>
            <if test="carrotTypeCds != null and carrotTypeCds != '' ">
                AND MC.CARROT_TYPE_CD IN (${carrotTypeCds})
            </if>
           
		 ORDER BY INS_DT DESC, CARROT_NO DESC
		 <include refid="ccs.common.pagingPost"/>
	</select>
	
	<select id="getCarrotList" resultMap="carrotList">
		/* [mms.member.getCarrotList][allen][2016. 7. 19.] */
		<include refid="ccs.common.pagingPre"/>
         SELECT 
               MC.MEMBER_NO,
               MC.CARROT_NO,
               MC.CARROT,
               MC.CARROT_TYPE_CD,
               MC.NOTE,
               MC.CARROT + (SELECT NVL(SUM (CARROT), 0) FROM MMS_CARROT WHERE CARROT_NO &lt; MC.CARROT_NO AND MEMBER_NO = MC.MEMBER_NO) AS BALANCE_AMT,
               MC.EXPIRE_DT,
               MC.INS_DT,
               MC.INS_ID,
               MC.UPD_DT,
               MC.UPD_ID,
               MM.MEMBER_ID,
               MM.MEMBER_NAME,
               (SELECT US.NAME FROM CCS_USER US WHERE MC.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			   (SELECT US.NAME FROM CCS_USER US WHERE MC.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
          FROM MMS_CARROT MC
               INNER JOIN MMS_MEMBER_ZTS MMZ
                  ON MMZ.MEMBER_NO = MC.MEMBER_NO
               INNER JOIN MMS_MEMBER MM
                  ON MM.MEMBER_NO = MMZ.MEMBER_NO
         WHERE 1=1
            <choose>
            	<when test="searchKeyword != null and searchKeyword !=''">
	                <if test=" 'NAME'.equals(infoType)">
	            	AND MM.MEMBER_NAME = #{searchKeyword}
	                </if>
	                <if test=" 'ID'.equals(infoType)">
	            	AND MM.MEMBER_ID = #{searchKeyword}
	                </if>
            	</when>
            	<otherwise>
		            <if test="startDate != null and startDate != ''">
		                <if test="endDate != null and endDate != ''">
		                    AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
		                    AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
		                </if>
		            </if>
            	</otherwise>
            </choose>
            <if test="memberNo != null and memberNo != '' ">
                AND  MC.MEMBER_NO = #{memberNo}
            </if>
            <if test="carrotTypeCds != null and carrotTypeCds != '' ">
                AND MC.CARROT_TYPE_CD IN (${carrotTypeCds})
            </if>
            <if test="note != null and note != '' ">
                AND MC.NOTE LIKE '%' || #{note} || '%'
            </if>
            <if test="memGradeCds != null and memGradeCds != '' ">
                AND MMZ.MEM_GRADE_CD IN (${memGradeCds})
            </if>
<!--             <if test="searchKeyword != null and searchKeyword !=''"> -->
<!--             </if> -->

		 ORDER BY INS_DT DESC, CARROT_NO DESC
		 <include refid="ccs.common.pagingPost"/>
	</select>

    <resultMap id="carrotSummry" type="mmsCarrot" autoMapping="true">
        <id property="memberNo" column="MEMBER_NO" />
        <id property="carrotNo" column="CARROT_NO" />
        <result property="plusMem" column="PLUS_MEM"/>
        <result property="plusCarrot" column="PLUS_CARROT"/>
        <result property="minusMem" column="MINUS_MEM"/>
        <result property="minusCarrot" column="MINUS_CARROT"/>
    </resultMap>
	<select id="getCarrotSummery" resultMap="carrotSummry">
		/* [mms.member.getCarrotSummery][ian][2016. 8. 05.] */
		SELECT MC.CARROT_TYPE_CD,
		       NVL (T1.MEM_CNT, 0) AS PLUS_MEM,
		       NVL (T1.SUM, 0) AS PLUS_CARROT,
		       NVL (T2.MEM_CNT, 0) AS MINUS_MEM,
		       NVL (T2.SUM, 0) AS MINUS_CARROT
		  FROM (SELECT DISTINCT CARROT_TYPE_CD FROM MMS_CARROT) MC
		       LEFT OUTER JOIN (  SELECT A1.CARROT_TYPE_CD,
		                                 SUM (A1.MEM_CNT) AS MEM_CNT,
		                                 SUM (A1.SUM) AS SUM
		                            FROM (  SELECT MC.CARROT_TYPE_CD,
		                                           COUNT (DISTINCT MC.MEMBER_NO) AS MEM_CNT,
		                                           SUM (MC.CARROT) AS SUM
		                                      FROM MMS_CARROT MC
											       INNER JOIN MMS_MEMBER_ZTS MMZ
											          ON MMZ.MEMBER_NO = MC.MEMBER_NO
											       INNER JOIN MMS_MEMBER MM
											          ON MM.MEMBER_NO = MMZ.MEMBER_NO
		                                     WHERE MC.CARROT <![CDATA[>]]> 0
													<if test="memberNo != null and memberNo != '' ">
													    AND  MC.MEMBER_NO = #{memberNo}
													</if>
										            <choose>
										            	<when test="searchKeyword != null and searchKeyword !=''">
											                <if test=" 'NAME'.equals(infoType)">
											            	AND MM.MEMBER_NAME = #{searchKeyword}
											                </if>
											                <if test=" 'ID'.equals(infoType)">
											            	AND MM.MEMBER_ID = #{searchKeyword}
											                </if>
										            	</when>
										            	<otherwise>
												            <if test="startDate != null and startDate != ''">
												                <if test="endDate != null and endDate != ''">
												                    AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
												                    AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
												                </if>
												            </if>
										            	</otherwise>
										            </choose>
													<if test="carrotTypeCds != null and carrotTypeCds != '' ">
													    AND MC.CARROT_TYPE_CD IN (${carrotTypeCds})
													</if>
													<if test="note != null and note != '' ">
													    AND MC.NOTE LIKE '%' || #{note} || '%'
													</if>
													<if test="memGradeCds != null and memGradeCds != '' ">
													    AND MMZ.MEM_GRADE_CD IN (${memGradeCds})
													</if>
		                                  GROUP BY MC.CARROT_TYPE_CD, MC.MEMBER_NO) A1
		                        GROUP BY A1.CARROT_TYPE_CD) T1
		          ON T1.CARROT_TYPE_CD = MC.CARROT_TYPE_CD
		       LEFT OUTER JOIN (  SELECT A1.CARROT_TYPE_CD,
		                                 SUM (A1.MEM_CNT) AS MEM_CNT,
		                                 SUM (A1.SUM) AS SUM
		                            FROM (  SELECT MC.CARROT_TYPE_CD,
		                                           COUNT (DISTINCT MC.MEMBER_NO) AS MEM_CNT,
		                                           SUM (MC.CARROT) AS SUM
		                                      FROM MMS_CARROT MC
											       INNER JOIN MMS_MEMBER_ZTS MMZ
											          ON MMZ.MEMBER_NO = MC.MEMBER_NO
											       INNER JOIN MMS_MEMBER MM
											          ON MM.MEMBER_NO = MMZ.MEMBER_NO
		                                     WHERE MC.CARROT <![CDATA[<]]> 0
													<if test="memberNo != null and memberNo != '' ">
													    AND  MC.MEMBER_NO = #{memberNo}
													</if>
										            <choose>
										            	<when test="searchKeyword != null and searchKeyword !=''">
											                <if test=" 'NAME'.equals(infoType)">
											            	AND MM.MEMBER_NAME = #{searchKeyword}
											                </if>
											                <if test=" 'ID'.equals(infoType)">
											            	AND MM.MEMBER_ID = #{searchKeyword}
											                </if>
										            	</when>
										            	<otherwise>
												            <if test="startDate != null and startDate != ''">
												                <if test="endDate != null and endDate != ''">
												                    AND	MC.INS_DT <![CDATA[>=]]> TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
												                    AND MC.INS_DT <![CDATA[<=]]> TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
												                </if>
												            </if>
										            	</otherwise>
										            </choose>
													<if test="carrotTypeCds != null and carrotTypeCds != '' ">
													    AND MC.CARROT_TYPE_CD IN (${carrotTypeCds})
													</if>
													<if test="note != null and note != '' ">
													    AND MC.NOTE LIKE '%' || #{note} || '%'
													</if>
													<if test="memGradeCds != null and memGradeCds != '' ">
													    AND MMZ.MEM_GRADE_CD IN (${memGradeCds})
													</if>
		                                  GROUP BY MC.CARROT_TYPE_CD, MC.MEMBER_NO) A1
		                        GROUP BY A1.CARROT_TYPE_CD) T2
		          ON T2.CARROT_TYPE_CD = MC.CARROT_TYPE_CD
		WHERE MC.CARROT_TYPE_CD IS NOT NULL
		ORDER BY MC.CARROT_TYPE_CD ASC
	</select>	
		
	<resultMap type="mmsMember" id="getMemberLoginResult" autoMapping="true">
		<id column="MEMBER_NO" property="memberNo"/>
		<association property="mmsMemberZts" column="{memberNo=MEMBER_NO}" javaType="mmsMemberZts" select="mms.member.getMemberZts">
			<id column="MEMBER_NO" property="memberNo"/>
		</association>
	</resultMap>
	
	<select id="getMemberLogin" resultMap="getMemberLoginResult">
		/* [mms.member.getMmsMemberInfo][dennis][2016. 6. 9.] */
		SELECT * 
		FROM MMS_MEMBER
		WHERE MEMBER_NO = #{memberNo}
	</select>
	<select id="getMemberZts" resultType="mmsMemberZts">
		/* [mms.member.getMemberLogin][dennis][2016. 6. 9.] */
		SELECT * 
		FROM MMS_MEMBER_ZTS 
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="getMemberAddressList" resultType="mmsAddress">
		/* [mms.member.getMemberAddressList][allen][2016. 7. 19.] */
		<include refid="ccs.common.pagingPre" />
		SELECT   ADDR.*
		 	   , MEM.ADDRESS_NO AS DEFAULT_ADDR_NO 
  		  FROM MMS_MEMBER_ZTS MEM
  		  JOIN MMS_ADDRESS ADDR
    	    ON MEM.MEMBER_NO = ADDR.MEMBER_NO
  		 WHERE ADDR.MEMBER_NO = #{memberNo}
  		 ORDER BY CASE WHEN MEM.ADDRESS_NO = ADDR.ADDRESS_NO THEN 1
                	   ELSE 2
                	   END, ADDR.ADDRESS_NO
         <include refid="ccs.common.pagingPost" />
	</select>
	
	<select id="getMemberBasicAddress" resultType="mmsAddress">
		/* [mms.member.getMemberBasicAddress][allen][2016. 7. 19.] */
		SELECT  ADDR.*
  		  FROM MMS_MEMBER_ZTS MEM
  		  JOIN MMS_ADDRESS ADDR
    	    ON MEM.MEMBER_NO = ADDR.MEMBER_NO
    	   AND MEM.ADDRESS_NO = ADDR.ADDRESS_NO
  		 WHERE ADDR.MEMBER_NO = #{memberNo}
	</select>
	
	<update id="updateBasicAddress">
	/* [mms.member.updateBasicAddress][allen][2016. 8. 31.] */
		UPDATE 
				MMS_MEMBER_ZTS
		   SET    
       			 ADDRESS_NO = #{addressNo}
       		   , UPD_DT = SYSDATE
       		   , UPD_ID = #{updId}
		 WHERE  MEMBER_NO = #{memberNo}
	</update>
	
	<select id="getRecentOrderDeliveyAddress" resultType="omsDeliveryaddress">
	/* [mms.member.getRecentOrderDeliveyAddress][allen][2016. 8. 31.] */
		   SELECT * FROM (
		            SELECT ROW_NUMBER() OVER (ORDER BY T1.ORDER_DT DESC) rownumber, T2.* 
		              FROM OMS_ORDER T1 
		              JOIN OMS_DELIVERYADDRESS T2
		                ON T1.ORDER_ID = T2.ORDER_ID
		            WHERE T1.STORE_ID = #{storeId}
		            AND T1.MEMBER_NO = #{memberNo}
		            AND T2.ZIP_CD IS NOT NULL
		            AND T1.ORDER_TYPE_CD = 'ORDER_TYPE_CD.GENERAL'
		            AND T1.ORDER_DT BETWEEN add_months(sysdate,-12) AND SYSDATE
            ) WHERE rownumber &lt; 6
	</select>
    
    <select id="getLatestCarrotAmt" resultType="BigDecimal">
    /* [mms.member.getLatestCarrotAmt][ian][2016. 7. 19.] */
		SELECT NVL(SUM(BALANCE_CARROT), 0)
          FROM MMS_CARROT
         WHERE 	   MEMBER_NO = #{memberNo}
	           AND CARROT &gt; 0
	           AND EXPIRE_DT &gt; SYSDATE
      GROUP BY MEMBER_NO
    </select>
    
    <select id="getLatestDepositBalanceAmt" resultType="BigDecimal">
    /* [mms.member.getLatestDepositBalanceAmt][allen][2016. 7. 19.] */
		SELECT NVL (SUM (deposit_amt), 0)
		  FROM mms_deposit
		 WHERE member_no = #{memberNo}
    </select>

	
	
	<select id="getMemberOffOrderList" resultType="omsPosorder">
	/* [mms.member.getMemberOffOrderList][allen][2016. 8. 16.] */
	SELECT
			  T1.ORDER_ID
			, T1.MEMBER_NO
			, T1.CARD_ISSUE_NO
			, T1.OFFSHOP_ID
			, T1.PRODUCT_AMT
			, T1.TAX
			, T1.ORDER_AMT
			, T1.ORDER_DT
			, T1.USE_POINT
			, T1.SAVE_POINT
			, T1.INS_DT
			, T1.INS_ID
			, T1.UPD_DT
			, T1.UPD_ID
			, T1.AVAIL_POINT
			, T2.NAME AS OFFSHOP_NAME
			,(SELECT US.NAME FROM CCS_USER US WHERE T1.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			,(SELECT US.NAME FROM CCS_USER US WHERE T1.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
	  FROM OMS_POSORDER T1
	  JOIN CCS_OFFSHOP T2
	    ON T1.OFFSHOP_ID = T2.OFFSHOP_ID
	  WHERE MEMBER_NO = #{memberNo}
	</select>
	
	
	<select id="getMemberOffOrderProductList" resultType="omsPosOrderProduct">
		SELECT 
				ORDER_ID
			  , ERP_SALEPRODUCT_ID
			  , TAX_TYPE
			  , PRODUCT_NAME
			  , SALE_PRICE
			  , ORDER_QTY
			  , ORDER_AMT
			  , INS_DT
			  , INS_ID
			  , UPD_DT
			  , UPD_ID
			  ,(SELECT US.NAME FROM CCS_USER US WHERE OMS_POSORDERPRODUCT.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  ,(SELECT US.NAME FROM CCS_USER US WHERE OMS_POSORDERPRODUCT.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
			  , BRAND_NAME
		  FROM OMS_POSORDERPRODUCT
		  WHERE ORDER_ID = #{orderId}
	</select>
	
	
	<select id="getMemberOffOrderRegionList" resultType="ccsOffshop">
		SELECT
			   TO_CHAR((SELECT SUM(ORDER_AMT) AS TOT_CNT FROM OMS_POSORDER WHERE MEMBER_NO = #{memberNo}), 'FM9,999,999') AS TOTALAMT 
             , (SELECT COUNT(*) AS TOT_CNT FROM OMS_POSORDER WHERE MEMBER_NO = #{memberNo}) AS TOTALCOUNT
             , T2.AREA_DIV1
             , T2.NAME
      	  FROM OMS_POSORDER T1
          JOIN CCS_OFFSHOP T2
            ON T1.OFFSHOP_ID = T2.OFFSHOP_ID
          WHERE MEMBER_NO IN (#{memberNo}, (select offshop_member_no from mms_member where member_no=#{memberNo}))
          <if test="areaDiv1 != null">
          	AND T2.AREA_DIV1 = #{areaDiv1}
          </if>
          GROUP BY T2.AREA_DIV1, T2.NAME
	</select>
	
	
	<resultMap type="omsPosorder" id="offOrderMap" autoMapping="true">
		<id column="ORDER_ID" property="orderId"/>
		<association property="ccsOffshop" javaType="ccsOffshop" resultMap="offshopMap">
		</association>
		<collection property="omsPosorderproducts" ofType="gcp.oms.model.OmsPosorderproduct">
			<result property="erpSaleproductId" 		column="ERP_SALEPRODUCT_ID"/>
			<result property="taxType" 					column="TAX_TYPE"/>
			<result property="productName" 				column="PRODUCT_NAME"/>
			<result property="salePrice" 				column="SALE_PRICE"/>
			<result property="orderQty" 				column="ORDER_QTY"/>
			<result property="orderAmt" 				column="PRODUCT_ORDER_AMT"/>
			<result property="brandName" 				column="BRAND_NAME"/>
		</collection>
	</resultMap>
	
	<resultMap type="ccsOffshop" id="offshopMap" autoMapping="true">
		<id column="OFFSHOP_ID" property="offshopId"/>
	</resultMap>
	 
	<select id="getMemberOffOrderProductListForFront" resultMap="offOrderMap">
		<include refid="ccs.common.pagingPre" />
		SELECT
              T1.ORDER_ID
            , T1.MEMBER_NO
            , T1.CARD_ISSUE_NO
            , T1.OFFSHOP_ID
            , T1.PRODUCT_AMT
            , T1.TAX
            , T1.ORDER_AMT
            , T1.ORDER_DT
            , T1.USE_POINT
            , T1.SAVE_POINT
            , T1.INS_DT
            , T1.INS_ID
            , T1.UPD_DT
            , T1.UPD_ID
            , T1.AVAIL_POINT
            , T2.ERP_SALEPRODUCT_ID
            , T2.TAX_TYPE
            , T2.PRODUCT_NAME
            , T2.SALE_PRICE
            , T2.ORDER_QTY
<!--             , T2.ORDER_AMT -->
			, T2.BRAND_NAME
            , T3.NAME
            , T3.ADDRESS1
            , T3.MANAGER_PHONE
            , T3.OFFSHOP_PHONE
<!--             , T4.BRAND_ID -->
<!--             , (SELECT NAME FROM PMS_BRAND WHERE BRAND_ID = T4.BRAND_ID) AS BRAND_NAME -->
      FROM OMS_POSORDER T1
      JOIN OMS_POSORDERPRODUCT T2
        ON T1.ORDER_ID = T2.ORDER_ID
      JOIN CCS_OFFSHOP T3
        ON T1.OFFSHOP_ID = T3.OFFSHOP_ID
<!--       JOIN CCS_OFFSHOPBRAND T4 -->
<!--         ON T1.OFFSHOP_ID = T4.OFFSHOP_ID  -->
      WHERE T1.MEMBER_NO IN (#{memberNo}, (select offshop_member_no from mms_member where member_no=#{memberNo}))
      <if test="orderId != null and orderId != ''">
      	AND T1.ORDER_ID = #{orderId}
      </if>
      <if test="areaDiv1 != null and areaDiv1 != ''"> 
          	AND T3.AREA_DIV1 = #{areaDiv1}
      </if>
      <if test="branchName != null and branchName != ''">
          	AND T3.NAME = #{branchName}
      </if>
      <if test="startDate != null and startDate != ''">
  	 	<if test="endDate != null and endDate != ''">
  	 		AND	T1.ORDER_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
			AND T1.ORDER_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
  	 	</if> 
     </if>
      ORDER BY T2.ERP_SALEPRODUCT_ID
      <include refid="ccs.common.pagingPost" />
	</select>
	
	<select id="getMemberOffOrderDetail" resultMap="offOrderMap">
		SELECT
              T1.ORDER_ID
            , T1.MEMBER_NO
            , T1.CARD_ISSUE_NO
            , T1.OFFSHOP_ID
            , T1.PRODUCT_AMT
            , T1.TAX
            , T1.ORDER_AMT
            , T1.ORDER_DT
            , T1.USE_POINT
            , T1.SAVE_POINT
            , T1.INS_DT
            , T1.INS_ID
            , T1.UPD_DT
            , T1.UPD_ID
            , T1.AVAIL_POINT
            , T2.ERP_SALEPRODUCT_ID
            , T2.TAX_TYPE
            , T2.PRODUCT_NAME
            , T2.SALE_PRICE
            , T2.ORDER_QTY
            , T2.ORDER_AMT		AS PRODUCT_ORDER_AMT
            , T2.BRAND_NAME
            , T3.NAME
            , T3.ADDRESS1
            , T3.MANAGER_PHONE
            , T3.OFFSHOP_PHONE
      FROM OMS_POSORDER T1
      JOIN OMS_POSORDERPRODUCT T2 
        ON T1.ORDER_ID = T2.ORDER_ID
      JOIN CCS_OFFSHOP T3
        ON T1.OFFSHOP_ID = T3.OFFSHOP_ID
      WHERE T1.MEMBER_NO IN (#{memberNo}, (select offshop_member_no from mms_member where member_no=#{memberNo}))
      <if test="orderId != null and orderId != ''">
      	AND T1.ORDER_ID = #{orderId}
      </if>
	</select>
	
	<resultMap id="getWishListResult" type="pmsProduct" autoMapping="true">
		<id property="productId" 			column="PRODUCT_ID"/>
		<collection property="pmsProductimgs" ofType="pmsProductimg">
			<result property="imgNo" 				column="IMG_NO"/>
			<result property="img" 				column="IMG"/>
			<result property="text" 			column="TEXT"/>
		</collection>
	</resultMap>
	<select id="getWishList" resultMap="getWishListResult">
	/* [mms.member.getWishList][emily][2016. 8. 02.] */
		SELECT PR.STORE_ID,
				PR.PRODUCT_ID,
				PR.NAME,
				PR.SALE_PRICE,
				PR.LIST_PRICE,
				IM.IMG_NO,
				IM.IMG,
				IM.TEXT
		FROM ( SELECT DISTINCT WI.PRODUCT_ID
		        FROM ( SELECT MM.MEMBER_NO,MM.MEMBER_ID AS USERID
		                FROM MMS_MEMBER MM
		                WHERE MM.MEMBER_ID = #{memberId}
		                AND EXISTS ( SELECT 1 FROM MMS_MEMBER_ZTS ZT WHERE MM.MEMBER_NO = ZT.MEMBER_NO)
		        )MB,
		        MMS_WISHLIST WI
		        WHERE MB.MEMBER_NO = WI.MEMBER_NO
		)MEM,
		PMS_PRODUCT PR,
		PMS_PRODUCTIMG IM
		WHERE MEM.PRODUCT_ID = PR.PRODUCT_ID
		AND PR.PRODUCT_ID = IM.PRODUCT_ID
	</select>
	
	<update id="updateAccount" parameterType="mmsMemberZts">
		/* [mms.member.updateAccount][victor][2016. 08. 25.] */
		UPDATE mms_member_zts SET 
			   upd_dt = SYSDATE
			  ,upd_id = #{updId}
			  ,bank_name = #{bankName}
			  ,bank_cd = #{bankCd}
			  ,account_no = #{accountNo}
			  ,account_holder_name = #{accountHolderName}
			  ,account_auth_dt = #{accountAuthDt}
		 WHERE member_no = #{memberNo}			
	</update>
	
	
	<select id="getQuickmenuList" resultType="mmsQuickmenu">
		SELECT 
		        T1.MENU_ID
		      , T1.NAME
		      , T1.URL
		      , T1.DEFAULT_YN
		      , T1.SORT_NO
		      , T1.USE_YN
		      , T1.INS_DT
		      , T1.INS_ID
		      , T1.UPD_DT
		      , T1.UPD_ID
		      , T1.QUICKMENU_TYPE_CD
		 FROM MMS_QUICKMENU T1
		 WHERE QUICKMENU_TYPE_CD = #{quickmenuTypeCd}
		   AND T1.USE_YN = 'Y'
		 ORDER BY T1.SORT_NO
	</select>
	
	<select id="getMemberQuickmenuList" resultType="mmsQuickmenu">
		SELECT 
                T1.MENU_ID
              , T1.NAME
              , T1.URL
              , T1.DEFAULT_YN
              , T1.SORT_NO
              , T1.USE_YN
              , T1.INS_DT
              , T1.INS_ID
              , T1.UPD_DT
              , T1.UPD_ID
              , T1.QUICKMENU_TYPE_CD
              , T2.MEMBER_NO
              , T2.SORT_NO             AS MY_MENU_SORT_NO
         FROM MMS_QUICKMENU T1
         JOIN MMS_MEMBERMENU T2
              ON T1.MENU_ID = T2.MENU_ID
             WHERE T2.MEMBER_NO = #{memberNo}
               AND T1.USE_YN = 'Y'
         ORDER BY T2.SORT_NO
	</select>
	
	<delete id="deleteMemberMenu">
		DELETE FROM MMS_MEMBERMENU WHERE MEMBER_NO = #{memberNo}
	</delete>
	
	<select id="getMemberGiftOrderCnt" resultType="mmsMemberSearch">
			SELECT  
	             (SELECT COUNT(*)
	                       FROM OMS_ORDER ORD 
	                      WHERE ORD.ORDER_STATE_CD NOT IN ('ORDER_STATE_CD.COMPLETE')
	                        AND ORD.ORDER_TYPE_CD = 'ORDER_TYPE_CD.GIFT'
	                        AND ORD.GIFT_PHONE = #{giftPhone}
	                        ) AS NOT_RECEIVE_CNT    
	             , (SELECT COUNT(*)
	                       FROM OMS_ORDER ORD 
	                      WHERE ORD.ORDER_TYPE_CD = 'ORDER_TYPE_CD.GIFT'
	                        AND ORD.GIFT_PHONE = #{giftPhone}
	                        ) AS GIFT_TOTAL_CNT           
              FROM DUAL
	</select>
	
	
	<resultMap type="omsOrder" id="giftOrderMap" autoMapping="true">
		<id property="orderId" column="ORDER_ID" />
		<collection property="omsOrderproducts" column="{orderId=ORDER_ID}" javaType="java.util.ArrayList" select="mms.member.getMemberGiftOrderPrdocutList">
		</collection>
	</resultMap>
	
	<resultMap type="omsOrderproduct" id="giftOrderProductMap" autoMapping="true">
		<id property="productId" column="PRODUCT_ID"/>
	</resultMap>
	
	
	<select id="getMemberGiftOrderList" resultMap="giftOrderMap">
		/* [mms.member.getMemberGiftOrderList][allen][2016. 08. 25.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT T1.* 
			  , T1.ORDER_DT + 7 AS EXPIREDT
			  , T2.ZIP_CD AS DELIVERY_ZIP_CD
		  FROM OMS_ORDER T1
		  JOIN OMS_DELIVERYADDRESS T2
		    ON T1.ORDER_ID = T2.ORDER_ID
  		 WHERE T1.ORDER_TYPE_CD = 'ORDER_TYPE_CD.GIFT'
  		   AND T1.STORE_ID = #{storeId}
  		 <if test="giftName != null and giftName != ''">
  		   AND T1.GIFT_NAME = #{giftName} 
  		 </if>
  		   AND T1.GIFT_PHONE = #{giftPhone}
<!--   		    <if test="mobileYn != null and mobileYn.equals('N')"> -->
<!--   		   		AND T1.ORDER_DELIVERY_STATE_CD NOT IN ('ORDER_DELIVERY_STATE_CD.READY', 'ORDER_DELIVERY_STATE_CD.REQ') -->
<!--   		   		AND T2.ZIP_CD IS NULL  -->
<!--   		   </if>  --> 
  		   <if test="startDate != null and startDate != ''">
  	 			<if test="endDate != null and endDate != ''">
  	 				AND	T1.ORDER_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
					AND T1.ORDER_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS') 
  	 			</if> 
     		</if>
  		    
  		    ORDER BY T1.ORDER_DT DESC
                   
		<include refid="ccs.common.pagingPost"/>
	</select>
	
	<select id="getMemberGiftOrderPrdocutList" resultType="omsOrderproduct">
		SELECT    T1.*
				, T2.NAME AS BRAND_NAME
				, DECODE((SELECT COUNT(1) FROM PMS_REVIEW WHERE ORDER_ID = T1.ORDER_ID AND PRODUCT_ID = T1.PRODUCT_ID), 0 , 'N', 'Y') REVIEW_YN
		  FROM OMS_ORDERPRODUCT T1
		  LEFT JOIN PMS_BRAND T2
		    ON T1.BRAND_ID = T2.BRAND_ID
		 WHERE ORDER_ID = #{orderId}
<!-- 		 AND T1.ORDER_PRODUCT_TYPE_CD NOT IN ('ORDER_PRODUCT_TYPE_CD.PRODUCTPRESENT', 'ORDER_PRODUCT_TYPE_CD.SUB')  -->
	</select>
	
	
	<resultMap type="omsOrder" id="giftOrderDetailMap" autoMapping="true">
		<id property="orderId" column="ORDER_ID" />
		<collection property="omsOrderproducts" column="{orderId=ORDER_ID}" javaType="java.util.ArrayList" select="mms.member.getMemberGiftOrderPrdocutList">
		</collection>
		<collection property="omsDeliveryaddresss" column="{orderId=ORDER_ID}" javaType="java.util.ArrayList" select="oms.delivery.selectOne">
		</collection>
	</resultMap>
	
	<select id="getGiftOrderDetail" resultMap="giftOrderDetailMap">
		SELECT 
				  T1.ORDER_ID
				, T1.ORDER_TYPE_CD
				, T1.DEVICE_TYPE_CD
				, T1.GIFT_PHONE
				, T1.ORDER_AMT
				, T1.ORDER_DT
				, T1.ORDER_DT + 7 AS EXPIREDT
				, T1.CANCEL_DT
				, T1.ORDER_STATE_CD
				, T1.ORDER_DELIVERY_STATE_CD
				, T1.DC_AMT
				, T1.PAYMENT_AMT
				, T1.GIFT_NAME
				, T1.GIFT_IMG_TYPE_CD
				, T1.GIFT_MSG
				, T1.NAME1
		  FROM OMS_ORDER T1
		 WHERE ORDER_ID = #{orderId}
	</select>
	
	<select id="getExistMemberInterest" resultType="String">
		/* [mms.member.getExistMemberInterest][stella][2016. 09. 24.] */
		SELECT
			COUNT(MEMBER_NO) OVER()
		  FROM
		  	MMS_INTEREST
		 WHERE
		 	MEMBER_NO = #{memberNo}
		 GROUP BY
		 	MEMBER_NO
	</select>
	
	<insert id="insertMmsInterest" parameterType="mmsInterest">
		/* [mms.member.insertMmsInterest][stella][2016. 09. 27.] */
		<selectKey keyProperty="interestNo" resultType="BigDecimal" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(INTEREST_NO)), 0) + 1	AS interestNo FROM MMS_INTEREST WHERE MEMBER_NO = #{memberNo}
		</selectKey>
		INSERT INTO MMS_INTEREST (
			MEMBER_NO
			, INTEREST_NO
			, INTEREST_TYPE_CD
			, DISPLAY_CATEGORY_ID
			, BRAND_ID
			, PURPOSE_TYPE_CD
			, STYLE_TYPE_CD
			, INTEREST_PRODUCT_TYPE_CD
			, INS_DT
			, INS_ID
			, UPD_DT
			, UPD_ID
		) VALUES (
			#{memberNo}
			, #{interestNo}
			, #{interestTypeCd}
			, #{displayCategoryId}
			<if test="brandId != null and brandId != ''">
				, #{brandId}
			</if>
			<if test="brandId == null or brandId == ''">
				<if test="brandName != null and brandName != ''">
					, (SELECT BRAND_ID FROM PMS_BRAND WHERE NAME = #{brandName})
				</if>	
				<if test="brandName == null or brandName == ''">
					, NULL
				</if>
			</if>
			, #{purposeTypeCd}
			, #{styleTypeCd}
			, #{interestProductTypeCd}
			, SYSDATE
			, #{insId}
			, SYSDATE
			, #{updId}	
		)
	</insert>
	
	<select id="getExistsWishlist" resultType="String">
		/* [mms.member.getExistsWishlist][ian][2016. 10. 7.] */
		SELECT WISHLIST_NO
		  FROM MMS_WISHLIST
		 WHERE     STORE_ID = #{storeId}
		       AND MEMBER_NO = #{memberNo}
		       AND PRODUCT_ID = #{productId}
	</select>
	
	<update id="updateWishlist">
		/* [mms.member.updateWishlist][ian][2016. 10. 7.] */
		UPDATE MMS_WISHLIST
		   SET UPD_DT = SYSDATE, UPD_ID = #{updId}
		 WHERE     STORE_ID = #{storeId}
		       AND MEMBER_NO = #{memberNo}
		       AND PRODUCT_ID = #{productId}
	</update>
	<delete id="deleteWishlist">
		DELETE FROM MMS_WISHLIST
		      WHERE MEMBER_NO = #{memberNo} 
		     <if test="wishlistNo!=null and wishlistNo!=''"> 
		        AND WISHLIST_NO = #{wishlistNo}
		    </if>	
		    <if test="productId!=null and productId!=''"> 
		        AND PRODUCT_ID = #{productId}	
		    </if>    
	</delete>
	
	<delete id="memberWidhdraw">
	BEGIN	
		DELETE FROM MMS_MEMBERBABY
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_MEMBERMENU
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_MEMBERSNS
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_ADDRESS
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_CARROT
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_INTEREST
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_INTERESTOFFSHOP
		      WHERE MEMBER_NO = #{memberNo} AND STORE_ID = #{storeId};	
		      
		DELETE FROM MMS_WISHLIST
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM MMS_LOGINHISTORY
		      WHERE MEMBER_NO = #{memberNo};
		
		DELETE FROM OMS_CART
		      WHERE CART_ID = #{memberId} AND STORE_ID = #{storeId};	
	END;
	</delete>
	
	
	<select id="getMemberInfoByMemberId" resultType="mmsMember">
		/* [mms.member.getMemberInfoByMemberId][ian][2016. 10. 7.] */
		SELECT *
		  FROM MMS_MEMBER
		 WHERE     MEMBER_ID = #{memberId}
		       AND MEMBER_STATE_CD = 'MEMBER_STATE_CD.NORMAL'
	</select>
	
	<select id="getPremiumYn" resultType="String">
		/* [mms.member.getPremiumYn][ian][2016. 10. 7.] */
		SELECT DECODE (PREMIUM_YN, NULL, 'N', PREMIUM_YN)
		  FROM MMS_MEMBER
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<update id="updateMemberIdToNull">
		/* [mms.member.getPremiumYn][eddie][2016. 10. 20.] */
		UPDATE MMS_MEMBER
		   SET MEMBER_ID = ''
		 WHERE MEMBER_ID =  #{memberId}
	</update>
	
	<select id="getExpireCarrotMemberList" resultType="mmsCarrot">
		/* [mms.member.getExpireCarrotMemberList][ian][2016. 10. 19.] */
		  SELECT MEMBER_NO
		    FROM MMS_CARROT
		   WHERE EXPIRE_DT &lt;= SYSDATE AND EXPIRE_YN = 'N' AND CARROT &gt; 0
		GROUP BY MEMBER_NO
	</select>
	
	<select id="getExpireCarrotMember" resultType="mmsCarrot">
		/* [mms.member.getExpireCarrotMember][ian][2016. 10. 19.] */
		  SELECT *
		    FROM MMS_CARROT
		   WHERE     EXPIRE_DT &lt;= SYSDATE
		         AND EXPIRE_YN = 'N'
		         AND CARROT &gt; 0
		         AND MEMBER_NO = #{memberNo}
		ORDER BY CARROT_NO DESC
	</select>
	
	<select id="getMinusCarrot" resultType="mmsCarrot">
		/* [mms.member.getMinusCarrot][ian][2016. 10. 19.] */
		  SELECT *
		    FROM MMS_CARROT
		   WHERE     EXPIRE_DT &lt;= SYSDATE
		         AND EXPIRE_YN = 'N'
		         AND CARROT &lt; 0
		         AND MEMBER_NO = #{memberNo}
		ORDER BY CARROT_NO DESC
	</select>
	<delete id="deleteMemberSns">
		DELETE FROM MMS_MEMBERSNS
		      WHERE MEMBER_NO = #{memberNo}
	</delete>
	<delete id="deleteMemberBaby">	
		DELETE FROM MMS_MEMBERBABY
		      WHERE MEMBER_NO = #{memberNo}
	</delete>
	<select id="getMemberAffiliateCard" resultType="string">
		SELECT AFFILIATECARD_NO
		  FROM MMS_MEMBER_ZTS
		 WHERE AFFILIATECARD_NO IS NOT NULL
		   AND SYSDATE BETWEEN AFFILIATECARD_AUTH_DT AND AFFILIATECARD_EXPIRE_DT 
		   AND MEMBER_NO = #{memberNo}
	</select>
	<update id="updateAffiliateCard">
		UPDATE MMS_MEMBER_ZTS
		   SET AFFILIATECARD_AUTH_DT = SYSDATE, 
		       AFFILIATECARD_NO = #{affiliatecardNo},
		       AFFILIATECARD_CD = #{affiliatecardCd},
		       AFFILIATECARD_EXPIRE_DT = ADD_MONTHS (SYSDATE, TO_NUMBER(#{expireMonthPlus})),
		       MEM_GRADE_CD = #{memGradeCd}
		 WHERE MEMBER_NO = #{memberNo}
	</update>
	<select id="getMemberCardAuth" resultType="mmsAffiliatecard">
		SELECT *
		  FROM MMS_AFFILIATECARD
		 WHERE AFFILIATECARD_CD = #{affiliatecardCd} AND AFFILIATECARD_NO = SUBSTR (#{affiliatecardNo}, 0, 6)	
	</select>

	<update id="updateMemberGradeAll">
		BEGIN
		   FOR I IN (SELECT MEM_GRADE_CD, MEMBER_NO
		               FROM (SELECT CASE
		                               WHEN TOTAL_AMT &lt;= 0 THEN 'MEM_GRADE_CD.WELCOME'
		                               WHEN TOTAL_AMT &lt; 100000 THEN 'MEM_GRADE_CD.FAMILY'
		                               WHEN TOTAL_AMT &lt; 300000 THEN 'MEM_GRADE_CD.SILVER'
		                               WHEN TOTAL_AMT &lt; 600000 THEN 'MEM_GRADE_CD.GOLD'
		                               ELSE 'MEM_GRADE_CD.VIP'
		                            END
		                               MEM_GRADE_CD,
		                            MEMBER_NO,
		                            ROWNUM ROWDATA
		                       FROM (SELECT M1.MEMBER_NO, NVL (ORD1.TOTAL_AMT, 0) TOTAL_AMT
		                               FROM MMS_MEMBER M1,
		                                    (  SELECT   SUM (
		                                                   CASE
		                                                      WHEN PAYMENT_TYPE_CD = 'PAYMENT_TYPE_CD.REFUND'
		                                                      THEN
		                                                         -1 * PAYMENT_AMT
		                                                      ELSE
		                                                         PAYMENT_AMT
		                                                   END)
		                                              + SUM (ORDER_AMT)
		                                                 TOTAL_AMT,
		                                              MEMBER_NO
		                                         FROM (SELECT NVL (PAYMENT_AMT, 0) PAYMENT_AMT,
		                                                      0 ORDER_AMT,
		                                                      CAST(MEMBER_NO AS VARCHAR(20)) AS MEMBER_NO,
		                                                      PAYMENT_TYPE_CD
		                                                 FROM OMS_PAYMENT
		                                                WHERE     SYSDATE > PAYMENT_DT
		                                                      AND PAYMENT_DT > ADD_MONTHS (SYSDATE, -6)
		                                                      AND PAYMENT_STATE_CD IN
		                                                             ('PAYMENT_STATE_CD.PAYMENT',
		                                                              'PAYMENT_STATE_CD.REFUND')
		                                               UNION
		                                               SELECT 0 PAYMENT_AMT,
		                                                      NVL (ORDER_AMT, 0) ORDER_AMT,
		                                                      MEMBER_NO,
		                                                      '' PAYMENT_TYPE_CD
		                                                 FROM OMS_POSORDER
		                                                WHERE     SYSDATE > ORDER_DT
		                                                      AND ORDER_DT > ADD_MONTHS (SYSDATE, -6))
		                                     GROUP BY MEMBER_NO) ORD1
		                              WHERE     M1.MEMBER_NO = ORD1.MEMBER_NO(+)
		                                    AND M1.MEMBER_STATE_CD = 'MEMBER_STATE_CD.NORMAL') I1) I2)
		   LOOP
		      UPDATE MMS_MEMBER_ZTS
		         SET MEM_GRADE_CD = I.MEM_GRADE_CD, UPD_DT = SYSDATE
		       WHERE MEMBER_NO = I.MEMBER_NO;
		   END LOOP;
		END;
	</update>
	<select id="getBalanceCarrots" resultType="mmsCarrot">
		SELECT CARROT_NO,
		       CARROT,
		       MEMBER_NO,
		       EXPIRE_DT,
		       BALANCE_CARROT
		  FROM MMS_CARROT
		 WHERE MEMBER_NO = #{memberNo} AND CARROT > 0 AND BALANCE_CARROT > 0 AND EXPIRE_DT > SYSDATE	
	</select>

	
	<resultMap type="mmsMember" id="expireCarrotSendMemberList" autoMapping="true">
    	<id property="memberNo" column="MEMBER_NO" />
    	<association property="mmsCarrot" javaType="mmsCarrot" resultMap="expireCarrot" />
    </resultMap>
    <resultMap type="mmsCarrot" id="expireCarrot" autoMapping="true">
    	<id property="memberNo" column="MEMBER_NO" />
    	<result property="nextMonthFirst" column="NEXT_MONTH_FIRST" />
    	<result property="nextMonthLast" column="NEXT_MONTH_LAST" />
    	<result property="expireCarrot" column="EXPIRE_CARROT" />
    </resultMap>
    <select id="getExpireCarrotSendMemberList" resultMap="expireCarrotSendMemberList">
    	/* [mms.member.getExpireCarrotSendMemberList][ian][2016. 10. 27.] */
        SELECT MEM.MEMBER_NO,
               MEM.MEMBER_NAME,
               MEM.MEMBER_ID,
               MEM.EMAIL,
               MC1.TOTAL_CARROT AS CARROT,
               MC1.NEXT_MONTH_FIRST,
               MC1.NEXT_MONTH_LAST,
               MC2.EXPIRE_CARROT AS EXPIRE_CARROT
          FROM MMS_MEMBER MEM
               INNER JOIN (SELECT MEMBER_NO,                                                     /* 회원 현재 잔여 당근*/
                                  SUM(BALANCE_CARROT) AS TOTAL_CARROT,  
                                  TO_CHAR(TRUNC (ADD_MONTHS (SYSDATE, +1), 'MM'), 'MM') AS NEXT_MONTH_FIRST,
                                  TO_CHAR(LAST_DAY (TRUNC (ADD_MONTHS (SYSDATE, +1), 'MM')), 'DD') AS NEXT_MONTH_LAST
                             FROM MMS_CARROT
                            WHERE     EXPIRE_DT &gt; SYSDATE
                                  AND CARROT &gt; 0
                           GROUP BY MEMBER_NO) MC1
                  ON MC1.MEMBER_NO = MEM.MEMBER_NO
               INNER JOIN JOIN (  SELECT MEMBER_NO, SUM (BALANCE_CARROT) AS EXPIRE_CARROT       /* 한 달뒤 만료될 당근*/
                               FROM MMS_CARROT
                              WHERE     EXPIRE_DT BETWEEN TRUNC (ADD_MONTHS (SYSDATE, +1),'MM')
                                                      AND   LAST_DAY (TRUNC (ADD_MONTHS (SYSDATE, +1), 'MM')) + 23.9998 / 24
                                    AND CARROT &gt; 0
                           GROUP BY MEMBER_NO) MC2
                  ON MC2.MEMBER_NO = MEM.MEMBER_NO
         WHERE     MEM.MEMBER_STATE_CD != 'MEMBER_STATE_CD.WITHDRAW'
               AND MC2.EXPIRE_CARROT &gt; 0
		 AND MEM.MEMBER_NO = 1000000100 <!-- 삭제예정 --> 
    </select>

	<update id="updateMemberChildrenCard">
		UPDATE MMS_MEMBER_ZTS
		   SET 
				  CHILDREN_YN			= 'Y'
				, CHILDREN_ACCOUNT_NO	= #{accountNo}
				, CHILDREN_DEAL_ID		= #{childrenDealId}
				, CHILDREN_REG_DT		= SYSDATE 
		 WHERE STORE_ID = #{storeId} 
		   AND MEMBER_NO = #{memberNo}
	</update>
	<select id="getMemberOrderSum" resultType="java.lang.Long">
	/* [mms.member.getMemberOrderSum][eddie][2016. 11. 3.] */
		  SELECT   SUM (
		              CASE
		                 WHEN PAYMENT_TYPE_CD = 'PAYMENT_TYPE_CD.REFUND' THEN -1 * PAYMENT_AMT
		                 ELSE PAYMENT_AMT
		              END)
		         + SUM (ORDER_AMT)
		            TOTAL_AMT
		    FROM (SELECT NVL (PAYMENT_AMT, 0) PAYMENT_AMT,
		                 0 ORDER_AMT,
<!-- 		                 MEMBER_NO, -->
		                 CAST(MEMBER_NO AS VARCHAR(20)) AS MEMBER_NO,
		                 PAYMENT_TYPE_CD
		            FROM OMS_PAYMENT
		           WHERE     MEMBER_NO = #{memberNo}
		                 AND SYSDATE > PAYMENT_DT
		                 AND PAYMENT_DT > TRUNC (ADD_MONTHS (SYSDATE, -5), 'MM')
		                 AND PAYMENT_STATE_CD IN ('PAYMENT_STATE_CD.PAYMENT', 'PAYMENT_STATE_CD.REFUND')
		          UNION
		          SELECT 0 PAYMENT_AMT,
		                 NVL (ORDER_AMT, 0) ORDER_AMT,
		                 MEMBER_NO,
		                 '' PAYMENT_TYPE_CD
		            FROM OMS_POSORDER
		           WHERE     MEMBER_NO = #{memberNo}
		                 AND SYSDATE > ORDER_DT
		                 AND ORDER_DT > TRUNC (ADD_MONTHS (SYSDATE, -5), 'MM'))
		GROUP BY MEMBER_NO	
	</select>
	<select id="getDisagreeAvailable" resultType="string">
		SELECT 'A'
		  FROM OMS_ORDER O1
		 WHERE     O1.ORDER_STATE_CD NOT IN ('ORDER_DELIVERY_STATE_CD.DELIVERY')
		       AND O1.MEMBER_NO = #{memberNo}
		       AND ROWNUM = 1
		UNION
		SELECT 'A'
		  FROM    OMS_ORDER O1
		       INNER JOIN
		          OMS_CLAIM O2
		       ON (    O1.ORDER_ID = O2.ORDER_ID
		           AND CLAIM_STATE_CD IN
		                  ('CLAIM_STATE_CD.WITHDRAW', 'CLAIM_STATE_CD.COMPLETE', 'CLAIM_STATE_CD.CANCEL'))
		 WHERE O1.MEMBER_NO =  #{memberNo} AND ROWNUM = 1	
	</select>
	<select id="getMyDepositSum" resultType="int">
		SELECT (SELECT NVL (SUM (DEPOSIT_AMT), 0) AS BALANCE_AMT
		          FROM MMS_DEPOSIT DE
		         WHERE MEMBER_NO = #{memberNo})
		          DEPOSIT
		  FROM DUAL	
	</select>
	<select id="getCsExist" resultType="string">
		SELECT 1
		  FROM CCS_INQUIRY
		 WHERE     MEMBER_NO = #{memberNo}
		       AND STORE_ID = '1001'
		       AND INQUIRY_STATE_CD &lt;&gt; 'INQUIRY_STATE_CD.COMPLETE'
		       AND ROWNUM = 1
		UNION
		SELECT 1
		  FROM PMS_PRODUCTQNA
		 WHERE     MEMBER_NO = #{memberNo}
		       AND STORE_ID = '1001'
		       AND PRODUCT_QNA_STATE_CD &lt;&gt; 'PRODUCT_QNA_STATE_CD.COMPLETE'
		       AND ROWNUM = 1
	</select>	
	<select id="getMemberbabys" resultType="mmsMemberbaby">
		SELECT *
		  FROM MMS_MEMBERBABY
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
		<select id="getMembersnss" resultType="mmsMembersns">
		SELECT *
		  FROM MMS_MEMBERSNS
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
</mapper>