<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pms.product">
	
	<resultMap id="productListResult" autoMapping="true" type="pmsProduct">
		<id property="storeId" column="STORE_ID" />
		<id property="productId" column="PRODUCT_ID" />
		<result property="dmsCategoryName" column="DMS_CATEGORY_NAME"/>
		<result property="productGubun" column="PRODUCT_GUBUN"/>
		<association property="pmsCategory" column="CATEGORY_ID" javaType="pmsCategory">
	    	<id property="storeId" column="STORE_ID" />
	    	<id property="categoryId" column="CATEGORY_ID"/>
	    	<result property="name" column="PMS_CATEGORY_NAME"/>	    
	    </association>
	    <association property="pmsBrand" column="BRAND_ID" javaType="pmsBrand">
	    	<id property="brandId" column="BRAND_ID"/>
	    	<result property="name" column="BRAND_NAME"/>	    
	    </association>
	    <association property="ccsBusiness" column="BUSINESS_ID" javaType="ccsBusiness">
	    	<id property="businessId" column="BUSINESS_ID"/>
	    	<result property="name" column="BUSINESS_NAME"/>	    
	    </association>	    
	</resultMap>	

	<select id="getProductList" resultMap="productListResult">
	/* [pms.product.getProductList][ian][2016. 5. 30.] */
	
	SELECT I1.*,
	       (    SELECT LISTAGG (SUBSTR (SYS_CONNECT_BY_PATH (A1.NAME, ' > '), 3),
	                            ',')
	                   WITHIN GROUP (ORDER BY A1.NAME)
	                      DMS_CATEGORY_NAME
	              FROM DMS_DISPLAYCATEGORY A1
	             WHERE EXISTS
	                      (SELECT 1
	                         FROM DMS_DISPLAYCATEGORYPRODUCT DCP
	                        WHERE     DCP.PRODUCT_ID = I1.PRODUCT_ID
	                              AND DCP.STORE_ID = I1.STORE_ID
	                              AND DCP.DISPLAY_CATEGORY_ID = A1.DISPLAY_CATEGORY_ID
	                              AND DCP.STORE_ID = A1.STORE_ID)
	        START WITH UPPER_DISPLAY_CATEGORY_ID IS NULL
	        CONNECT BY PRIOR A1.DISPLAY_CATEGORY_ID = A1.UPPER_DISPLAY_CATEGORY_ID)  DMS_CATEGORY_NAME,	
	       RTRIM (
	          (   DECODE (I1.RESERVE_YN, 'Y', '예약 / ')
	           || DECODE (I1.OFFSHOP_PICKUP_YN, 'Y', '픽업 / ')
	           || DECODE (I1.REGULAR_DELIVERY_YN, 'Y', '정기배송 / ')
	           || DECODE (I1.FIXED_DELIVERY_YN, 'Y', '지정일배송 / ')
	           || DECODE (I1.GIFT_YN, 'Y', '기프티콘 / ')
	           || DECODE (I1.WRAP_YN, 'Y', '선물포장')),
	          '/ ')
	          AS PRODUCT_GUBUN,
	       BUS.BUSINESS_ID,
	       BUS.NAME BUSINESS_NAME,	
	       PB.BRAND_ID,
	       PB.NAME BRAND_NAME,
	       I1.INS_ID,
	       I1.UPD_ID     
			,(SELECT US.NAME FROM CCS_USER US WHERE I1.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
		  	,(SELECT US.NAME FROM CCS_USER US WHERE I1.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME       
		FROM (<include refid="ccs.common.pagingPre" />
		SELECT  /*+ LEADING(PP) */ PP.*
		       	, PC.NAME AS PMS_CATEGORY_NAME
		  FROM PMS_PRODUCT PP
		       INNER JOIN PMS_CATEGORY PC
		          ON PC.CATEGORY_ID = PP.CATEGORY_ID AND PC.STORE_ID = PP.STORE_ID
		       <if test="commissionRateYn != null and commissionRateYn != ''">
		       INNER JOIN PMS_PRICERESERVE PR
		          ON PR.PRODUCT_ID = PP.PRODUCT_ID AND PR.STORE_ID = PP.STORE_ID
		       </if>
			 WHERE     PP.STORE_ID = #{ storeId }
			 		AND PP.SALE_STATE_CD NOT IN ('SALE_STATE_CD.REQ', 'SALE_STATE_CD.APPROVAL1', 
										 'SALE_STATE_CD.APPROVAL2', 'SALE_STATE_CD.REJECT')
										 
			 	<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
	 			  <!--  AND PP.INS_DT BETWEEN #{startDate} AND #{endDate} -->
                               AND PP.INS_DT BETWEEN TO_DATE (#{startDate},
                                                              'YYYY-MM-DD HH24:MI:SS')
                                                 AND TO_DATE (#{endDate},
                                                              'YYYY-MM-DD HH24:MI:SS')	 			   
			 	</if>
	            <choose>
	                <when test="brandId != null and brandId != ''">
	                     AND PP.BRAND_ID = #{ brandId }
	                </when>
	                <when test="brandName != null and brandName != ''">
                   AND PP.BRAND_ID IN (SELECT BRAND_ID
	                                       FROM PMS_BRAND BR2
	                                      WHERE BR2.NAME = #{ brandName })
	                </when>
	            </choose>				 	
			 	<if test="(dispCategoryId != null and dispCategoryId != '') or (dispCategoryName!=null and dispCategoryName!='')">
			       AND PP.PRODUCT_ID IN (SELECT DCP.PRODUCT_ID
			                              FROM    DMS_DISPLAYCATEGORYPRODUCT DCP
			                                   INNER JOIN
			                                      DMS_DISPLAYCATEGORY DC
			                                   ON     DC.DISPLAY_CATEGORY_ID = DCP.DISPLAY_CATEGORY_ID
							            <choose>
							                <when test="dispCategoryId != null and dispCategoryId != ''">
							                       AND DC.DISPLAY_CATEGORY_ID = #{ dispCategoryId }
							                </when>
							                <when test="dispCategoryName != null and dispCategoryName != ''">
						                           AND DC.NAME = #{ dispCategoryName }
							                </when>
							            </choose>)
				</if>
			 	<if test=" saleStateCds != null and saleStateCds != ''">
			       AND PP.SALE_STATE_CD IN ( ${ saleStateCds } )
			 	</if>
	            <choose>
	                <when test="categoryId != null and categoryId != ''">
	                    AND PC.CATEGORY_ID = #{ categoryId }
	                </when>
	                <when test="categoryName != null and categoryName != ''">
                   AND PC.CATEGORY_ID IN (SELECT CATEGORY_ID
	                                       FROM PMS_CATEGORY PC2
	                                      WHERE PC2.NAME = #{ categoryName })
	                </when>
	            </choose>			 		
			 	<if test=" productTypeCds != null and productTypeCds != ''">
			       AND PP.PRODUCT_TYPE_CD IN ( ${ productTypeCds } )
			 	</if>                
				<choose>
	                <when test="userId != null and userId != ''">
	                     AND PC.USER_ID = #{ userId }
	                </when>
	                <when test="userName != null and userName != ''">
                   		AND PC.USER_ID IN (SELECT USER_ID
	                                       FROM CCS_USER CUU
	                                      WHERE CUU.NAME = #{ userName })
	                </when>
	            </choose>
	            <choose>
	                <when test="businessId != null and businessId != ''">
	                     AND PP.BUSINESS_ID = #{ businessId }
	                </when>
	                <when test="businessName != null and businessName != ''">
                   AND PP.BUSINESS_ID IN (SELECT BUSINESS_ID
	                                       FROM CCS_BUSINESS BU
	                                      WHERE BU.NAME = #{ businessName })
	                </when>
	            </choose>				 	
			 	<if test=" name != null and name != ''">
			       AND PP.NAME LIKE '%' || #{ name } || '%'				
			 	</if>
			 	
			 	<if test="infoType != null and infoType == 'ID'">
					<if test="searchKeyword != null and searchKeyword != ''">
						AND PP.PRODUCT_ID = #{searchKeyword}
					</if>
				</if>
				<if test="infoType != null and infoType == 'NAME'">
					<if test="searchKeyword != null and searchKeyword != ''">
						AND PP.NAME LIKE '%' || #{ searchKeyword } || '%'
					</if>		
				</if>
	
	
			 	<if test=" productIds != null and productIds != ''">
			       AND PP.PRODUCT_ID IN ( ${ productIds } )
			 	</if>
			 	<if test=" saleproductIds != null and saleproductIds != ''">
			       AND PP.PRODUCT_ID IN
			              (SELECT PRODUCT_ID
			                 FROM PMS_SALEPRODUCT
			                WHERE SALEPRODUCT_ID IN
			                         ( ${saleproductIds} )
			              )
			 	</if>
			 	<if test="productGubun!='' and productGubun!=null">
			 	    AND ( 1 = 2
				 	<if test="productGubun.indexOf('reserveYn') >= 0">
				 		OR PP.RESERVE_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('offshopPickupYn') >= 0">
				 		OR PP.OFFSHOP_PICKUP_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('regularDeliveryYn') >= 0">
				 		OR PP.REGULAR_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('fixedDeliveryYn') >= 0">
				 		OR PP.FIXED_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('giftYn') >= 0">
				 		OR PP.GIFT_YN = 'Y'
				 	</if>		
				 	<if test="productGubun.indexOf('wrapYn') >= 0">
				 		OR PP.WRAP_YN = 'Y'
				 	</if>					 			 					 					 	
				 	)
			 	</if>
			 	<if test="commissionRateYn!='' and commissionRateYn!=null">
			 		<choose>
			 			<when test="commissionRateYn.indexOf('Y') >= 0 and commissionRateYn.indexOf('N') >= 0">
		                	
		                </when>
		                <when test="commissionRateYn.indexOf('Y') >= 0">
		                	AND PR.COMMISSION_RATE &gt;= 10
		                </when>
		                <when test="commissionRateYn.indexOf('N') >= 0">
		                	AND PR.COMMISSION_RATE &lt; 10
		                </when>
		            </choose>
			 	</if>
			 	
			 	<if test="priceCompareType != null and priceCompareType == 'UP'">
					<if test="searchPriceCompareKeyword != null and searchPriceCompareKeyword != ''">
						AND PP.SALE_PRICE &gt;= #{searchPriceCompareKeyword}
					</if>
				</if>
				<if test="priceCompareType != null and priceCompareType == 'DOWN'">
					<if test="searchPriceCompareKeyword != null and searchPriceCompareKeyword != ''">
						AND PP.SALE_PRICE &lt;= #{ searchPriceCompareKeyword }
					</if>		
				</if>
				<if test="erpProductId != null and erpProductId != ''">
					AND PP.ERP_PRODUCT_ID LIKE #{erpProductId} || '%'
				</if>
				<!-- 제외할 상품 상태, 승인전,  -->
			 	   AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
	   		<include refid="ccs.common.pagingPost" /> ) I1
	       LEFT OUTER JOIN CCS_BUSINESS BUS
	       				ON BUS.BUSINESS_ID = I1.BUSINESS_ID AND BUS.STORE_ID = I1.STORE_ID	
	       LEFT OUTER JOIN PMS_BRAND PB ON PB.BRAND_ID = I1.BRAND_ID AND PB.STORE_ID = I1.STORE_ID	       
	</select>
	
	<select id="getProductListWithSaleStock" resultType="pmsProduct">
		/* [pms.product.getSumSaleProductStock][allen][2016. 5. 27.] */
		 SELECT 
		 		  T4.*
		 		, result.saleProductTotalStock
		 		, result.BRAND_NAME
		   FROM (
				 SELECT 
				 		  T1.PRODUCT_ID 
				 		, SUM(T2.REAL_STOCK_QTY)			AS saleProductTotalStock 
				 		, T3.NAME AS BRAND_NAME
				   FROM PMS_PRODUCT T1 
				        LEFT OUTER JOIN PMS_SALEPRODUCT T2
		         	 ON T1.PRODUCT_ID = T2.PRODUCT_ID
		         		LEFT OUTER JOIN  PMS_BRAND T3
		         	  ON T1.BRAND_ID = T3.BRAND_ID
		          WHERE T1.PRODUCT_ID IN 
		         	<foreach item="product" collection="search" open="(" separator="," close=")">
		         		#{product.productId}
		         	</foreach> 
		          GROUP BY T1.PRODUCT_ID, T3.NAME
		 		) result JOIN PMS_PRODUCT T4
		 	  ON result.PRODUCT_ID = T4.PRODUCT_ID
	</select>
	
	<resultMap type="pmsSaleproduct" id="getStockListResult" autoMapping="true">
		<id column="STORE_ID" property="storeId"/>		
		<id column="PRODUCT_ID" property="productId"/>
		<id column="SALEPRODUCT_ID" property="saleproductId"/>
		<result column="SALEPRODUCT_NAME" property="name"/>
		<association property="pmsProduct" resultMap="getStockListResult1"/>
		<collection property="omsOrderproducts" ofType="omsOrderproduct">
			<id column="SALEPRODUCT_ID" property="saleproductId"/>				
			<result column="ORDER_QTY" property="orderQty"/>
		</collection>
	</resultMap>
	<resultMap type="pmsProduct" id="getStockListResult1" autoMapping="true">		
		<association property="pmsBrand" javaType="pmsBrand">				
			<result column="BRAND_NAME" property="name"/>
		</association>
		<association property="ccsBusiness" javaType="ccsBusiness">				
			<result column="BUSINESS_NAME" property="name"/>
		</association>
		<association property="pmsCategory" javaType="pmsCategory">
			<result column="USER_ID" property="userId"/>						
			<association property="ccsUser" javaType="ccsUser">
				<result column="USER_NAME" property="name"/>
			</association>
		</association>
	</resultMap>
	<select id="getStockList" resultMap="getStockListResult">
		/* [pms.product.getStockList][dennis][2016. 5. 27.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT A.*,
			   (SELECT NVL(SUM (ORD.ORDER_QTY),0) ORDER_QTY
				   FROM OMS_ORDERPRODUCT ORD				   		
				   WHERE ORD.STORE_ID = #{storeId}
				   AND ORD.PRODUCT_ID = A.PRODUCT_ID
				   AND ORD.SALEPRODUCT_ID = A.SALEPRODUCT_ID
				   AND ORD.ORDER_PRODUCT_STATE_CD = 'ORDER_PRODUCT_STATE_CD.READY' /*출고지시대기*/
				   ) AS ORDER_QTY,
				(SELECT NAME FROM CCS_USER WHERE STORE_ID = A.STORE_ID AND USER_ID = A.USER_ID) AS USER_NAME
		FROM (SELECT	/*+ ORDERED */ 
						PS.ADD_SALE_PRICE,
						PS.BUSINESS_SALEPRODUCT_ID,
						PS.ERP_COLOR_ID,
						PS.ERP_SALEPRODUCT_ID,
						PS.ERP_SIZE_ID,
						PS.LOCATION_ID,
						PS.NAME AS SALEPRODUCT_NAME,
						PS.REAL_STOCK_QTY,
						PS.SAFE_STOCK_QTY,
						PS.SALEPRODUCT_ID,
						PS.SALEPRODUCT_STATE_CD,
						PS.STORE_ID,
						PS.WAREHOUSE_ID,
						PS.INS_DT,
						PS.INS_ID,
						PS.UPD_DT,
						PS.UPD_ID,
						(SELECT US.NAME FROM CCS_USER US WHERE PS.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			  			(SELECT US.NAME FROM CCS_USER US WHERE PS.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME,
						
<!-- 						PS.PRODUCT_ID, -->
<!-- 						PS.SORT_NO, -->
						
						PP.PRODUCT_ID,
						PP.ERP_PRODUCT_ID,
						PP.NAME,
						PP.PRODUCT_TYPE_CD,
						PP.SALE_STATE_CD,
						PP.STOCK_CONTROL_TYPE_CD,
						
						PB.NAME AS BRAND_NAME,
						CB.NAME AS BUSINESS_NAME,
						PC.USER_ID
				FROM PMS_SALEPRODUCT PS, 
					 PMS_PRODUCT PP,
					 PMS_BRAND PB,
					 CCS_BUSINESS CB,
					 PMS_CATEGORY PC		 
				WHERE PS.STORE_ID = #{storeId}
				AND PS.STORE_ID = PP.STORE_ID
				AND PS.PRODUCT_ID = PP.PRODUCT_ID 
				AND PP.STORE_ID = PB.STORE_ID(+)
				AND PP.BRAND_ID = PB.BRAND_ID(+)
				AND PP.STORE_ID = CB.STORE_ID(+)
				AND PP.BUSINESS_ID = CB.BUSINESS_ID(+)
				AND PP.STORE_ID = PC.STORE_ID
				AND PP.CATEGORY_ID = PC.CATEGORY_ID	
				<if test="productIds != null and productIds != ''">
					AND PP.PRODUCT_ID IN (${productIds})
				</if>					
				<if test="saleproductIds != null and saleproductIds != ''">
					AND PS.SALEPRODUCT_ID IN (${saleproductIds})
				</if>
				<if test="productTypeCds != null and productTypeCds != ''">
					AND PP.PRODUCT_TYPE_CD IN (${productTypeCds})
				</if>
				<if test="startDate != null and startDate != ''" >
					<if test="endDate != null and endDate != ''">
					AND	PP.INS_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
					AND PP.INS_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
					</if>
				</if>
				<if test="realStockQty != null and realStockQty != ''">
					AND PS.REAL_STOCK_QTY
					<if test="undType == 'UP'"> 
					&gt;= 
					</if>
					<if test="undType == 'DOWN'"> 
					&lt;= 
					</if>
					#{realStockQty}
				</if>
				<if test="stockControlTypeCds != null and stockControlTypeCds != ''">
					AND PP.STOCK_CONTROL_TYPE_CD IN (${stockControlTypeCds})
				</if>
				<if test="brandId != null and brandId != ''">
					AND PP.BRAND_ID = #{brandId}
				</if>
				<if test="saleStateCds != null and saleStateCds != ''">
					AND PP.SALE_STATE_CD IN (${saleStateCds})
				</if>
				<if test="businessId != null and businessId != ''">
					AND PP.BUSINESS_ID = #{businessId}
				</if>
				<if test="productName != null and productName != ''">
					AND PP.NAME LIKE '%' || #{productName} || '%'
				</if>
				<if test="categoryId != null and categoryId != ''">
					AND PP.CATEGORY_ID = #{categoryId}
				</if>
				<if test="userId != null and userId != ''">
					AND PC.USER_ID = #{userId}
				</if>
				<if test="dispCategoryId != null and dispCategoryId != ''">
					AND PP.PRODUCT_ID IN (SELECT A.PRODUCT_ID FROM DMS_DISPLAYCATEGORYPRODUCT A WHERE DISPLAY_CATEGORY_ID = #{dispCategoryId} AND STORE_ID = #{storeId})
				</if>
			 	<if test="productGubun!='' and productGubun!=null">
			 	    AND ( 1 = 2
				 	<if test="productGubun.indexOf('reserveYn') >= 0">
				 		OR PP.RESERVE_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('offshopPickupYn') >= 0">
				 		OR PP.OFFSHOP_PICKUP_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('regularDeliveryYn') >= 0">
				 		OR PP.REGULAR_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('fixedDeliveryYn') >= 0">
				 		OR PP.FIXED_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('giftYn') >= 0">
				 		OR PP.GIFT_YN = 'Y'
				 	</if>		
				 	<if test="productGubun.indexOf('wrapYn') >= 0">
				 		OR PP.WRAP_YN = 'Y'
				 	</if>					 			 					 					 	
				 	)
			 	</if>
			 	<if test="erpProductId != null and erpProductId != ''">
					AND PP.ERP_PRODUCT_ID LIKE #{erpProductId} || '%'
				</if>
<!-- 				<if test="normal == 'true' -->
<!-- 					   or reserveYn == 'true' -->
<!-- 					   or offshopPickupYn == 'true' -->
<!-- 					   or regularDeliveryYn == 'true' -->
<!-- 					   or fixedDeliveryYn == 'true' -->
<!-- 					   or giftYn == 'true' -->
<!-- 					   or wrapYn == 'true'"> -->
<!-- 					   AND (1=2 -->
<!-- 					   <if test="normal == 'true'"> -->
<!-- 							OR (PP.RESERVE_YN != 'Y' -->
<!-- 								AND PP.OFFSHOP_PICKUP_YN != 'Y' -->
<!-- 								AND PP.REGULAR_DELIVERY_YN != 'Y' -->
<!-- 								AND PP.FIXED_DELIVERY_YN != 'Y' -->
<!-- 								AND PP.GIFT_YN != 'Y' -->
<!-- 								AND PP.WRAP_YN != 'Y' -->
<!-- 								) -->
<!-- 						</if> -->
<!-- 						<if test="reserveYn == 'true'"> -->
<!-- 							OR PP.RESERVE_YN = 'Y' -->
<!-- 						</if> -->
<!-- 						<if test="offshopPickupYn == 'true'"> -->
<!-- 							OR PP.OFFSHOP_PICKUP_YN = 'Y' -->
<!-- 						</if> -->
<!-- 						<if test="regularDeliveryYn == 'true'"> -->
<!-- 							OR PP.REGULAR_DELIVERY_YN = 'Y' -->
<!-- 						</if> -->
<!-- 						<if test="fixedDeliveryYn == 'true'"> -->
<!-- 							OR PP.FIXED_DELIVERY_YN = 'Y' -->
<!-- 						</if> -->
<!-- 						<if test="giftYn == 'true'"> -->
<!-- 							OR PP.GIFT_YN = 'Y' -->
<!-- 						</if> -->
<!-- 						<if test="wrapYn == 'true'"> -->
<!-- 							OR PP.WRAP_YN = 'Y' -->
<!-- 						</if> -->
						
<!-- 					   )				   		   -->
<!-- 				</if>				 -->
				ORDER BY PP.PRODUCT_ID, PS.SALEPRODUCT_ID
				) A
		<include refid="ccs.common.pagingPost"/>
	</select>

	<resultMap type="pmsProduct" id="getApprovalListResult" autoMapping="true">
		<id column="PRODUCT_ID" property="productId"/>
		<association property="pmsBrand" javaType="pmsBrand">
			<result column="BRAND_NAME" property="name"/>
		</association>
		<association property="ccsBusiness" javaType="ccsBusiness">
			<result column="BUSINESS_NAME" property="name"/>
		</association>
		<association property="pmsCategory" javaType="pmsCategory">
			<result column="USER_ID" property="userId"/>
			<result column="SECOND_APPROVAL_YN" property="secondApprovalYn"/>						
			<association property="ccsUser" javaType="ccsUser">
				<result column="USER_NAME" property="name"/>
			</association>
		</association>
	</resultMap>
	<select id="getApprovalList" resultMap="getApprovalListResult">
		/* [pms.product.getApprovalList][dennis][2016. 5. 31.] */
		<include refid="ccs.common.pagingPre"/>
			SELECT A.*,
					(SELECT NAME FROM CCS_USER WHERE STORE_ID = A.STORE_ID AND USER_ID = A.USER_ID) AS USER_NAME
			FROM (
				SELECT
						PP.STORE_ID,
						PP.PRODUCT_ID,
						PP.ERP_PRODUCT_ID,
						PP.INS_DT,
						PP.NAME,
						PP.PRODUCT_TYPE_CD,									
						PB.NAME AS BRAND_NAME,
						PP.SALE_STATE_CD,
						CB.NAME AS BUSINESS_NAME,
						PP.LIST_PRICE,
						PP.SALE_PRICE,
						PP.SUPPLY_PRICE,
						PP.COMMISSION_RATE,
						PP.DELIVERY_FEE_FREE_YN,
						PC.USER_ID,
						PC.SECOND_APPROVAL_YN,
						PP.INS_ID,
						PP.UPD_ID,
						PP.UPD_DT,
						PP.REJECT_REASON,
						PP.NOTICE_CONFIRM_YN,
						PP.NOTICE_CONFIRM_DT,
						PP.NOTICE_CONFIRM_ID
						,(SELECT US.NAME FROM CCS_USER US WHERE PP.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  			,(SELECT US.NAME FROM CCS_USER US WHERE PP.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
				FROM PMS_PRODUCT PP,
					 PMS_BRAND PB,
					 CCS_BUSINESS CB,
					 PMS_CATEGORY PC				 				
				WHERE PP.STORE_ID = #{storeId}
				AND PP.STORE_ID = PC.STORE_ID
				AND PP.CATEGORY_ID = PC.CATEGORY_ID
				AND PP.STORE_ID = PB.STORE_ID(+)
				AND PP.BRAND_ID = PB.BRAND_ID(+)
				AND PP.STORE_ID = CB.STORE_ID(+)
				AND PP.BUSINESS_ID = CB.BUSINESS_ID(+)
				AND PP.SALE_STATE_CD IN ('SALE_STATE_CD.REQ', 'SALE_STATE_CD.APPROVAL1', 
										 'SALE_STATE_CD.APPROVAL2', 'SALE_STATE_CD.REJECT')
				<if test="productIds != null and productIds != ''">
					AND PP.PRODUCT_ID IN (${productIds})
				</if>					
				<if test="startDate != null and startDate != ''" >
					<if test="endDate != null and endDate != ''">
					AND	PP.INS_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
					AND PP.INS_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
					</if>
				</if>
				<if test="brandId != null and brandId != ''">
					AND PP.BRAND_ID = #{brandId}
				</if>
				<if test="saleStateCds != null and saleStateCds != ''">
					AND PP.SALE_STATE_CD IN (${saleStateCds})
				</if>
				<if test="productTypeCds != null and productTypeCds != ''">
					AND PP.PRODUCT_TYPE_CD IN (${productTypeCds})
				</if>
				<if test="businessId != null and businessId != ''">
					AND PP.BUSINESS_ID = #{businessId}
				</if>
				<if test="productName != null and productName != ''">
					AND PP.NAME LIKE '%' || #{productName} || '%'
				</if>
				<if test="categoryId != null and categoryId != ''">
					AND PP.CATEGORY_ID = #{categoryId}
				</if>
				<if test="userId != null and userId != ''">
					AND PC.USER_ID = #{userId}
				</if>
				<if test="dispCategoryId != null and dispCategoryId != ''">
					AND PP.PRODUCT_ID IN (SELECT A.PRODUCT_ID FROM DMS_DISPLAYCATEGORYPRODUCT A WHERE DISPLAY_CATEGORY_ID = #{dispCategoryId} AND STORE_ID = #{storeId})
				</if>
			 	<if test="productGubun!='' and productGubun!=null">
			 	    AND ( 1 = 2
				 	<if test="productGubun.indexOf('reserveYn') >= 0">
				 		OR PP.RESERVE_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('offshopPickupYn') >= 0">
				 		OR PP.OFFSHOP_PICKUP_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('regularDeliveryYn') >= 0">
				 		OR PP.REGULAR_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('fixedDeliveryYn') >= 0">
				 		OR PP.FIXED_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('giftYn') >= 0">
				 		OR PP.GIFT_YN = 'Y'
				 	</if>		
				 	<if test="productGubun.indexOf('wrapYn') >= 0">
				 		OR PP.WRAP_YN = 'Y'
				 	</if>				 			 					 					 	
				 	)
			 	</if>
			 	<if test="erpProductId != null and erpProductId != ''">
					AND PP.ERP_PRODUCT_ID LIKE #{erpProductId} || '%'
				</if>
			) A
			ORDER BY A.INS_DT DESC
		<include refid="ccs.common.pagingPost"/>
	</select>
	
	<update id="updateProductApproval">
		UPDATE PMS_PRODUCT
			SET SALE_STATE_CD = #{saleStateCd},				
				REJECT_REASON = #{rejectReason,jdbcType=VARCHAR}
		WHERE PRODUCT_ID = #{productId}
	</update>
	
	<resultMap type="pmsPricereserve" id="getPriceApprovalListResult" autoMapping="true">
		<id column="PRODUCT_ID" property="productId"/>
		<id column="PRICE_RESERVE_NO" property="priceReserveNo"/>
		<association property="pmsProduct" resultMap="getPriceApprovalListResult1"/>
	</resultMap>
	<resultMap type="pmsProduct" id="getPriceApprovalListResult1" autoMapping="true">
		<association property="pmsBrand" javaType="pmsBrand">
			<result column="BRAND_NAME" property="name"/>
		</association>
		<association property="ccsBusiness" javaType="ccsBusiness">
			<result column="BUSINESS_NAME" property="name"/>
		</association>
		<association property="pmsCategory" javaType="pmsCategory">
			<result column="USER_ID" property="userId"/>						
			<association property="ccsUser" javaType="ccsUser">
				<result column="USER_NAME" property="name"/>
			</association>
		</association>
	</resultMap>
	<select id="getPriceApprovalList" resultMap="getPriceApprovalListResult">
		/* [pms.product.getPriceApprovalList][dennis][2016. 5. 31.] */
		<include refid="ccs.common.pagingPre"/>
			SELECT A.*,
					(SELECT NAME FROM CCS_USER WHERE STORE_ID = A.STORE_ID AND USER_ID = A.USER_ID) AS USER_NAME
			FROM (
				SELECT
						PR.STORE_ID,
						PR.PRODUCT_ID,
						PP.ERP_PRODUCT_ID,
						PR.PRICE_RESERVE_NO,					
						PP.NAME,
						PR.RESERVE_DT,
						PR.PRICE_RESERVE_STATE_CD,
						PP.PRODUCT_TYPE_CD,													
						PB.NAME AS BRAND_NAME,
						CB.NAME AS BUSINESS_NAME,
						PR.LIST_PRICE,
						PR.SALE_PRICE,
						PR.SUPPLY_PRICE,
						PR.COMMISSION_RATE,
						PR.REGULAR_DELIVERY_PRICE,
						PR.REJECT_REASON,
						PC.USER_ID,
						PR.INS_ID,
						PR.INS_DT,
						PR.UPD_ID,
						PR.UPD_DT
						,(SELECT US.NAME FROM CCS_USER US WHERE PR.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  			,(SELECT US.NAME FROM CCS_USER US WHERE PR.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
				FROM PMS_PRICERESERVE PR,
					 PMS_PRODUCT PP,
					 PMS_BRAND PB,
					 CCS_BUSINESS CB,
					 PMS_CATEGORY PC
				WHERE PR.STORE_ID = #{storeId}
				AND PR.STORE_ID = PP.STORE_ID
				AND PR.PRODUCT_ID = PP.PRODUCT_ID
				AND PP.STORE_ID = PC.STORE_ID
				AND PP.CATEGORY_ID = PC.CATEGORY_ID
				AND PP.STORE_ID = PB.STORE_ID(+)
				AND PP.BRAND_ID = PB.BRAND_ID(+)
				AND PP.STORE_ID = CB.STORE_ID(+)
				AND PP.BUSINESS_ID = CB.BUSINESS_ID(+)
				<if test="productIds != null and productIds != ''">
					AND PR.PRODUCT_ID IN (${productIds})
				</if>					
				<if test="startDate != null and startDate != ''" >
					<if test="endDate != null and endDate != ''">
					AND	PR.RESERVE_DT &gt;= TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
					AND PR.RESERVE_DT &lt;= TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
					</if>
				</if>
				<if test="priceReserveStateCds != null and priceReserveStateCds != ''">
					AND PR.PRICE_RESERVE_STATE_CD IN (${priceReserveStateCds})
				</if>			
				<if test="brandId != null and brandId != ''">
					AND PP.BRAND_ID = #{brandId}
				</if>
				<if test="saleStateCds != null and saleStateCds != ''">
					AND PP.SALE_STATE_CD IN (${saleStateCds})
				</if>
				<if test="productTypeCds != null and productTypeCds != ''">
					AND PP.PRODUCT_TYPE_CD IN (${productTypeCds})
				</if>
				<if test="businessId != null and businessId != ''">
					AND PP.BUSINESS_ID = #{businessId}
				</if>
				<if test="productName != null and productName != ''">
					AND PP.NAME LIKE '%' || #{productName} || '%'
				</if>
				<if test="categoryId != null and categoryId != ''">
					AND PP.CATEGORY_ID = #{categoryId}
				</if>
				<if test="userId != null and userId != ''">
					AND PC.USER_ID = #{userId}
				</if>
				<if test="dispCategoryId != null and dispCategoryId != ''">
					AND PP.PRODUCT_ID IN (SELECT A.PRODUCT_ID FROM DMS_DISPLAYCATEGORYPRODUCT A WHERE DISPLAY_CATEGORY_ID = #{dispCategoryId} AND STORE_ID = #{storeId})
				</if>
			 	<if test="productGubun!='' and productGubun!=null">
			 	    AND ( 1 = 2
				 	<if test="productGubun.indexOf('reserveYn') >= 0">
				 		OR PP.RESERVE_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('offshopPickupYn') >= 0">
				 		OR PP.OFFSHOP_PICKUP_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('regularDeliveryYn') >= 0">
				 		OR PP.REGULAR_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('fixedDeliveryYn') >= 0">
				 		OR PP.FIXED_DELIVERY_YN = 'Y'
				 	</if>
				 	<if test="productGubun.indexOf('giftYn') >= 0">
				 		OR PP.GIFT_YN = 'Y'
				 	</if>		
				 	<if test="productGubun.indexOf('wrapYn') >= 0">
				 		OR PP.WRAP_YN = 'Y'
				 	</if>					 			 					 					 	
				 	)
			 	</if>
			 	<if test="erpProductId != null and erpProductId != ''">
					AND PP.ERP_PRODUCT_ID LIKE #{erpProductId} || '%'
				</if>
			) A
			ORDER BY A.INS_DT DESC
		<include refid="ccs.common.pagingPost"/>
	</select>
	<select id="selectSaleproductList" resultType="pmsSaleproduct">
		/* [pms.product.selectSaleproductList][eddie][2016. 5. 31.] */	
		SELECT *
		  FROM PMS_SALEPRODUCT S
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
		ORDER BY SORT_NO
	 </select>
	<resultMap type="pmsPricereserve" id="selectProductPriceReserveListResult" autoMapping="true">
		<id property="productId" 							column="PRODUCT_ID"/>
		<id property="storeId" 								column="STORE_ID"/>
		<id property="priceReserveNo" 						column="PRICE_RESERVE_NO"/>
		<collection property="pmsSaleproductpricereserves" column="{storeId=STORE_ID,productId=PRODUCT_ID,priceReserveNo=PRICE_RESERVE_NO}" 
			javaType="java.util.ArrayList" select="pms.product.getSaleproductPriceReserveList" />
	</resultMap>	 
	 <select id="selectProductPriceReserveList" resultMap="selectProductPriceReserveListResult">
	 /* [pms.product.selectProductPriceReserveList][eddie][2016. 5. 31.] */	
		SELECT R.*,
	       NVL (
	          (SELECT 'Y'
	             FROM PMS_SALEPRODUCTPRICERESERVE SR
	            WHERE     R.PRODUCT_ID = SR.PRODUCT_ID
	                  AND R.STORE_ID = SR.STORE_ID
	                  AND R.PRICE_RESERVE_NO = SR.PRICE_RESERVE_NO
	                  AND ROWNUM &lt; 2),
	          'N') SALE_PRICE_RESERVE_YN
		  FROM PMS_PRICERESERVE R
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId} AND PRICE_RESERVE_STATE_CD &lt;&gt; 'PRICE_RESERVE_STATE_CD.COMPLETE'
		  ORDER BY PRICE_RESERVE_NO DESC
	 </select>
	 	
	<resultMap type="pmsPricereserve" id="getPriceHistoryListResult" autoMapping="true">
		<id property="productId" 							column="PRODUCT_ID"/>
		<id property="storeId" 								column="STORE_ID"/>
		<id property="priceReserveNo" 						column="PRICE_RESERVE_NO"/>
		<collection property="pmsSaleproductpricereserves" ofType="pmsSaleproductpricereserve" >
			<result property="saleproductId" 				column="SALEPRODUCT_ID"/>
			<result property="addSalePrice" 				column="ADD_SALE_PRICE"/>
		</collection>
	</resultMap>
	<select id="getPriceHistoryList" resultMap="getPriceHistoryListResult">
		/* [pms.product.getPriceHistoryList][emily][2016. 6. 7.] */
		
		SELECT A.*
		FROM( SELECT P.*, S.SALEPRODUCT_ID, S.ADD_SALE_PRICE
				FROM( 
			<include refid="ccs.common.pagingPre"/>
				 SELECT RSV.STORE_ID,                
				        RSV.PRODUCT_ID,
				        RSV.PRICE_RESERVE_NO,
				        RSV.LIST_PRICE,
				        RSV.SALE_PRICE,
				        RSV.SUPPLY_PRICE,
				        RSV.COMMISSION_RATE,
				        RSV.POINT_SAVE_RATE,
				        RSV.PRICE_RESERVE_STATE_CD,
				        RSV.REJECT_REASON,
				        RSV.REQ_DT,
				        RSV.RESERVE_DT,
				        RSV.APPROVAL_DT,
				        RSV.COMPLETE_DT,
				        RSV.INS_DT,
				        RSV.INS_ID,
				        (SELECT US.NAME FROM CCS_USER US WHERE RSV.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
				        RSV.REGULAR_DELIVERY_PRICE
				FROM  PMS_PRICERESERVE RSV
			   WHERE RSV.PRODUCT_ID = #{productId}
				 AND RSV.STORE_ID = #{storeId}
				 AND RSV.PRICE_RESERVE_STATE_CD = 'PRICE_RESERVE_STATE_CD.COMPLETE'
			ORDER BY RSV.COMPLETE_DT DESC
			<include refid="ccs.common.pagingPost"/>)P
				LEFT OUTER JOIN PMS_SALEPRODUCTPRICERESERVE S
				ON(P.PRODUCT_ID = S.PRODUCT_ID AND P.STORE_ID = S.STORE_ID AND P.PRICE_RESERVE_NO = S.PRICE_RESERVE_NO)
		)A
		ORDER BY A.COMPLETE_DT DESC
		
	</select>

	<resultMap type="pmsSaleproductpricereserve" id="getSalePoructPriceListResult" autoMapping="true">
		<id property="priceReserveNo" 					column="PRICE_RESERVE_NO"/>
		<id	property="saleproductId" 					column="SALEPRODUCT_ID"/>
		<id	property="storeId" 					column="STORE_ID"/>
		<association property="pmsSaleproduct" javaType="pmsSaleproduct">
			<result property="name" 			column="NAME"/>
			<result property="addSalePrice"		column="S_ADD_SALE_PRICE"/>
		</association>
	</resultMap>	
	<select id="getSalePoructPriceList" resultMap="getSalePoructPriceListResult" >
		/* [pms.product.getSalePoructPriceList][emily][2016. 6. 7.] */
		<include refid="ccs.common.pagingPre"/>
		SELECT A.*
		FROM( 
				SELECT SPRD.STORE_ID,
				        SPRD.PRODUCT_ID, 
				        SPRD.SALEPRODUCT_ID, 
				        SPRD.ADD_SALE_PRICE, 
				        SPRD.INS_DT, 
				        SPRD.INS_ID,
				        (SELECT US.NAME FROM CCS_USER US WHERE SPRD.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
				        SPRD.PRICE_RESERVE_NO, 
				        BASE.NAME,
				        BASE.ADD_SALE_PRICE AS S_ADD_SALE_PRICE
				FROM PMS_SALEPRODUCT BASE,
						PMS_SALEPRODUCTPRICERESERVE SPRD 
				WHERE BASE.STORE_ID = SPRD.STORE_ID
				AND BASE.SALEPRODUCT_ID = SPRD.SALEPRODUCT_ID
				AND SPRD.PRICE_RESERVE_NO = #{priceReserveNo}
				AND SPRD.PRODUCT_ID = #{productId}
		)A
		ORDER BY A.INS_DT DESC
		<include refid="ccs.common.pagingPost"/>
	</select>
	 
	 <select id="getProductnoticefieldList" resultType="pmsProductnoticefield">
	 	/* [pms.product.getProductnoticefieldList][dennis][2016. 6. 8.] */
	 	SELECT *
		FROM PMS_PRODUCTNOTICEFIELD
		WHERE PRODUCT_NOTICE_TYPE_CD = #{productNoticeTypeCd}
		ORDER BY SORT_NO
	 </select>
	 <resultMap type="pmsProduct" id="getProductnoticeListResult" autoMapping="true">
	 	<id column="PRODUCT_ID" property="productId"/>
		<association property="pmsCategory" javaType="pmsCategory">
 			<result column="USER_ID" property="userId"/>
 			<association property="ccsUser" javaType="ccsUser">
 				<result column="USER_NAME" property="name"/>
 			</association>
 		</association> 		
	 </resultMap>	 
	 <select id="getProductnoticeList" resultMap="getProductnoticeListResult">
	 	/* [pms.product.getProductnoticeList][dennis][2016. 6. 8.] */
	 	<include refid="ccs.common.pagingPre"/>
	 	  SELECT PRODUCT_ID,
	 	  		 ERP_PRODUCT_ID,
		         NAME,
		         SALE_STATE_CD,
		         REJECT_REASON,
		         PRODUCT_NOTICE_TYPE_CD,
		         MAX (DECODE (ROWCNT, 1, DETAIL)) AS DETAIL1,
		         MAX (DECODE (ROWCNT, 2, DETAIL)) AS DETAIL2,
		         MAX (DECODE (ROWCNT, 3, DETAIL)) AS DETAIL3,
		         MAX (DECODE (ROWCNT, 4, DETAIL)) AS DETAIL4,
		         MAX (DECODE (ROWCNT, 5, DETAIL)) AS DETAIL5,
		         MAX (DECODE (ROWCNT, 6, DETAIL)) AS DETAIL6,
		         MAX (DECODE (ROWCNT, 7, DETAIL)) AS DETAIL7,
		         MAX (DECODE (ROWCNT, 8, DETAIL)) AS DETAIL8,
		         MAX (DECODE (ROWCNT, 9, DETAIL)) AS DETAIL9,
		         MAX (DECODE (ROWCNT, 10, DETAIL)) AS DETAIL10,
		         MAX (DECODE (ROWCNT, 11, DETAIL)) AS DETAIL11,
		         MAX (DECODE (ROWCNT, 12, DETAIL)) AS DETAIL12,
		         MAX (DECODE (ROWCNT, 13, DETAIL)) AS DETAIL13,
		         MAX (DECODE (ROWCNT, 14, DETAIL)) AS DETAIL14,
		         MAX (DECODE (ROWCNT, 15, DETAIL)) AS DETAIL15,
		         MAX (DECODE (ROWCNT, 16, DETAIL)) AS DETAIL16,
		         MAX (DECODE (ROWCNT, 17, DETAIL)) AS DETAIL17,
		         MAX (DECODE (ROWCNT, 18, DETAIL)) AS DETAIL18,
		         MAX (DECODE (ROWCNT, 19, DETAIL)) AS DETAIL19,
		         MAX (DECODE (ROWCNT, 20, DETAIL)) AS DETAIL20,
		         USER_ID,
		         USER_NAME,
		         INS_ID,
		         INS_DT,
		         UPD_ID,
		         UPD_DT,
       		     NOTICE_CONFIRM_YN,
                 NOTICE_CONFIRM_DT,
                 NOTICE_CONFIRM_ID,
		         INS_NAME,
		         UPD_NAME
		    FROM (  SELECT ROW_NUMBER() OVER(PARTITION BY PN.PRODUCT_ID ORDER BY PF.SORT_NO) AS ROWCNT,
		    			   PP.PRODUCT_ID,
		    			   PP.ERP_PRODUCT_ID,
		                   PP.NAME,
		                   PP.SALE_STATE_CD,
		                   PP.REJECT_REASON,
		                   PP.PRODUCT_NOTICE_TYPE_CD,
		                   PN.DETAIL,
		                   PC.USER_ID,
		                   US.NAME AS USER_NAME,
		                   PP.INS_ID,
		                   PP.INS_DT,
		                   PP.UPD_ID,
		                   PP.UPD_DT,
		                   pp.NOTICE_CONFIRM_YN,
		                   pp.NOTICE_CONFIRM_DT,
		                   pp.NOTICE_CONFIRM_ID
		                   ,(SELECT US.NAME FROM CCS_USER US WHERE pp.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
			  	 		   ,(SELECT US.NAME FROM CCS_USER US WHERE pp.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
		              FROM PMS_PRODUCTNOTICE PN,
		                   PMS_PRODUCTNOTICEFIELD PF,
		                   PMS_PRODUCT PP,
		                   PMS_CATEGORY PC
		                   LEFT OUTER JOIN CCS_USER US
							ON(PC.USER_ID = US.USER_ID AND PC.STORE_ID = US.STORE_ID AND US.USER_TYPE_CD = 'USER_TYPE_CD.MD')
		             WHERE     PN.PRODUCT_NOTICE_TYPE_CD = #{productNoticeTypeCd}
		                   AND PN.PRODUCT_NOTICE_TYPE_CD = PF.PRODUCT_NOTICE_TYPE_CD
		                   AND PN.PRODUCT_NOTICE_FIELD_ID = PF.PRODUCT_NOTICE_FIELD_ID
		                   AND PN.PRODUCT_ID = PP.PRODUCT_ID
		                   AND PP.CATEGORY_ID = PC.CATEGORY_ID
		                   <!-- AND PP.SALE_STATE_CD IN ('SALE_STATE_CD.REQ') -->
		                   <if test="productIds != null and productIds != ''">
								AND PN.PRODUCT_ID IN (${productIds})
							</if>
							<if test="productId != null and productId != ''">
								AND PN.PRODUCT_ID = #{productId}
							</if>
							<if test="saleStateCds != null and saleStateCds != ''">
								AND PP.SALE_STATE_CD IN (${saleStateCds}) 
							</if>
							<if test="userId != null and userId != ''">
								AND PC.USER_ID = #{userId}
							</if>
							<if test="brandId != null and brandId != ''">
								AND PC.BRAND_ID = #{brandId}
							</if>							
							<if test="businessId != null and businessId != ''">
								AND PP.BUSINESS_ID = #{businessId}
							</if>
							<if test="productName != null and productName != ''">
								AND PP.NAME LIKE '%' || #{productName} || '%'
							</if>
							<if test="noticeConfirmCds != null and noticeConfirmCds != ''">
								AND PP.NOTICE_CONFIRM_YN IN (${noticeConfirmCds})
							</if>
							<if test="erpProductId != null and erpProductId != ''">
								AND PP.ERP_PRODUCT_ID LIKE #{erpProductId} || '%'
							</if>							
		          )
		GROUP BY PRODUCT_ID,
				 ERP_PRODUCT_ID,
		         NAME,
		         SALE_STATE_CD,
		         REJECT_REASON,
		         PRODUCT_NOTICE_TYPE_CD,
		         USER_ID,
		         USER_NAME,
		         INS_ID,
		         INS_DT,
		         UPD_ID,
		         UPD_DT,
       		     NOTICE_CONFIRM_YN,
                 NOTICE_CONFIRM_DT,
                 NOTICE_CONFIRM_ID,
                 INS_NAME,
		         UPD_NAME
		ORDER BY UPD_DT DESC
		<include refid="ccs.common.pagingPost"/>
	 </select>
	 
 	<resultMap type="pmsProductnotice" id="productNoticeListResult" autoMapping="true">
		<id property="productNoticeTypeCd" 			column="PRODUCT_NOTICE_TYPE_CD"/>
		<id	property="productNoticeFieldId" 		column="PRODUCT_NOTICE_FIELD_ID"/>
		<result property="detail"					column="DETAIL"/>
		
		<association property="pmsProductnoticefield" javaType="pmsProductnoticefield">
			<result property="title"			column="TITLE"/>
			<result property="note"				column="NOTE"/>
			<result property="erpFieldName"		column="ERP_FIELD_NAME"/>
		</association>
	</resultMap>	
	
	 <select id="selectProductNoticeList" resultMap="productNoticeListResult" resultType="pmsProductnotice">
	 /* [pms.product.selectProductNoticeList][eddie][2016.06.09] */
		  SELECT T1.PRODUCT_NOTICE_TYPE_CD,
		         T1.PRODUCT_NOTICE_FIELD_ID,
		         T1.TITLE,
		         T1.NOTE,
		         T1.ERP_FIELD_NAME
		         <if test="productId!=null and productId!=''">
		         ,T2.DETAIL
		         </if>
		    FROM    PMS_PRODUCTNOTICEFIELD T1
		    <if test="productId!=null and productId!=''">
		         LEFT OUTER JOIN
		            PMS_PRODUCTNOTICE T2
		         ON     T1.PRODUCT_NOTICE_TYPE_CD = T2.PRODUCT_NOTICE_TYPE_CD
		            AND T1.PRODUCT_NOTICE_FIELD_ID = T2.PRODUCT_NOTICE_FIELD_ID
		     AND T2.PRODUCT_ID = #{productId}
		     </if>
		   WHERE T1.PRODUCT_NOTICE_TYPE_CD = #{productNoticeTypeCd}
		ORDER BY SORT_NO
	 </select>
	 <delete id="deleteProductNotice">
	 /* [pms.product.deleteProductNotice][eddie][2016.06.12] */
		DELETE FROM PMS_PRODUCTNOTICE
		      WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}	 
	 </delete>
	 
	 <resultMap type="pmsProduct" id="productDetailResult" autoMapping="true">
		<id property="productId" 			column="PRODUCT_ID"/>
		<association property="ccsUserMd" javaType="ccsUser">
			<result property="name"		column="MD_NAME"/>
		</association>
	</resultMap>	
	 <select id="getProductDetail" resultMap="productDetailResult">
	  /* [pms.product.getProductDetail][eddie][2016.06.09] */
		SELECT PRD.*,
		       (SELECT U.NAME
		          FROM    CCS_USER U
		               INNER JOIN
		                  PMS_CATEGORY CATE
		               ON CATE.USER_ID = U.USER_ID
		         WHERE CATE.CATEGORY_ID = PRD.CATEGORY_ID)
		          MD_NAME
		  FROM    PMS_PRODUCT PRD
		 WHERE PRD.STORE_ID = #{storeId}
		 <if test="barcode!=null and barcode !=''">
		 AND EXISTS
		          (SELECT 1
		             FROM PMS_BARCODE BARCODE
		            WHERE     BARCODE.PRODUCT_ID = PRD.PRODUCT_ID
		                  AND BARCODE.ERP_BARCODE = #{barcode}
		                  AND BARCODE.STORE_ID = #{storeId})		               
		 </if>   
		 <if test="productId!=null and productId!=''">
		   AND PRD.PRODUCT_ID = #{productId}
		 </if>  
		   AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
	 </select>
	 <delete id="deleteProductAttribute">
	 /* [pms.product.deleteProductAttribute][eddie][2016.06.09] */
		DELETE FROM PMS_PRODUCTATTRIBUTE
		      WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}	 
	 </delete>
	 
	 
	<select id="erpTest" resultType="int">
		select count(1) from ADDRESS;
	</select>
	
<!-- 	<select id="getProductReviewList" resultMap="getProductReviewListResult">
		/* [pms.product.getProductReviewList][emily][2016. 6. 11] */
		<include refid="ccs.common.pagingPre" />
		SELECT B.*
		FROM (	SELECT RE.*
                    FROM (	SELECT B.*, /*RT.RATING,RT.RATING_ID, */
                            	NVL2(RM.PERMIT_NO,'Y','N') AS PERMIT_YN                                          
                            	FROM (  SELECT R.*,       
											S.SITE_NAME,
                                            S.SITE_TYPE_CD,  
                                            MBR.MEM_ID,         
                                            MBR.MEM_NAME,
                                            MD.UPPER_CATEGORY_ID,                      
                                            MD.MD_NAME,
                                            MD.MD_ID             
                                    	FROM (	SELECT	VI.STORE_ID,
														VI.BEST_YN,
	                                                    VI.DETAIL, 
	                                                    VI.DISPLAY_YN, 
	                                                    VI.INS_DT, 
	                                                    VI.INS_ID, 
	                                                    VI.MEMBER_NO,
	                                                    VI.REVIEW_NO,        
	                                                    VI.TITLE,
	                                                    VI.UPD_DT, 
	                                                    VI.UPD_ID,
	                                                    CASE
													        WHEN VI.INS_ID IS NOT NULL
													          THEN
													                (SELECT USR.NAME
													                   FROM CCS_USER USR
													                  WHERE USR.USER_ID = VI.INS_ID)
													          ELSE '' END INS_NAME,
													    CASE
													          WHEN VI.UPD_ID IS NOT NULL
													          THEN
													                (SELECT USR.NAME
													                   FROM CCS_USER USR
													                  WHERE USR.USER_ID = VI.UPD_ID)
													          ELSE '' END UPD_NAME,
	                                                    VI.RATING,
	                                                    VI.ORDER_ID,
	                                                    O.INS_DT AS ORDER_INS_DT,
	                                                    VI.PRODUCT_ID,
	                                                    VI.SALEPRODUCT_ID,
	                                                    PR.CATEGORY_ID, 
	                                                    PR.NAME AS PRD_NAME,
	                                                    PR.PRODUCT_TYPE_CD                                                             
													FROM  PMS_REVIEW VI LEFT OUTER JOIN OMS_ORDER O 
																ON VI.ORDER_ID = O.ORDER_ID AND VI.STORE_ID = O.STORE_ID,        
                                                      		PMS_PRODUCT PR
                                                	WHERE  VI.PRODUCT_ID = PR.PRODUCT_ID 
                                                	AND VI.STORE_ID = PR.STORE_ID
                                                	AND VI.STORE_ID = #{storeId}                                                
                                    	)R /*구매후기기본정보*/
                                    	, ( SELECT MM.MEMBER_NO,
                                            		MM.MEMBER_ID AS MEM_ID,
                                            		MM.MEMBER_NAME AS MEM_NAME
                                      		FROM MMS_MEMBER MM                                    	
                                    	)MBR /*회원정보*/
                                    	,(SELECT ST.STORE_ID, 
                                             	SI.NAME AS SITE_NAME,
                                             	SI.SITE_TYPE_CD          
                                        	FROM  CCS_STORE ST,
                                               		CCS_SITE SI
                                        	WHERE ST.STORE_ID = SI.STORE_ID
                                    	)S/*사이트정보*/
                                    	,( SELECT CA.CATEGORY_ID, 
                                            	CA.UPPER_CATEGORY_ID,
                                            	CA.STORE_ID,
                                            	US.NAME AS MD_NAME,
                                            	US.USER_ID AS MD_ID, 
                                            	US.USER_TYPE_CD
                                        	FROM PMS_CATEGORY CA
                                              	LEFT OUTER JOIN CCS_USER US
                                              		ON(CA.USER_ID = US.USER_ID
                                        	AND CA.STORE_ID = US.STORE_ID
                                        	AND US.USER_TYPE_CD = 'USER_TYPE_CD.MD')                                                                       
                                    	)MD/*MD 정보*/
                                    	WHERE R.MEMBER_NO =  MBR.MEMBER_NO                                    
                                    	AND R.STORE_ID = S.STORE_ID  
                                    	AND R.CATEGORY_ID = MD.CATEGORY_ID 
                                    	AND R.STORE_ID = MD.STORE_ID                                  
                            	)B
	                            /*LEFT OUTER JOIN PMS_REVIEWRATING RT
	                            ON(R.STORE_ID = RT.STORE_ID AND R.PRODUCT_ID = RT.PRODUCT_ID AND R.REVIEW_NO = RT.REVIEW_NO) */   
	                            LEFT OUTER JOIN PMS_REVIEWPERMIT RM /*혀용회원 */
	                            ON(B.STORE_ID = RM.STORE_ID AND B.PRODUCT_ID = RM.PRODUCT_ID AND B.MEMBER_NO = RM.MEMBER_NO)                             
                    	)RE
					WHERE RE.STORE_ID = #{storeId}
					<if test="startDate != null and startDate != ''">
						<if test="endDate != null and endDate != ''">
							AND RE.ins_dt BETWEEN #{startDate} 
			                		AND #{endDate}
						</if>
					</if>
					<if test="memIds != null and memIds !=''">
						AND RE.MEMBER_NO IN (${memIds})
					</if>
					<if test="productId != null and productId !=''">
						AND RE.PRODUCT_ID = #{productId}
					</if>
					<if test="memberId != null and memberId !=''">
						AND RE.MEM_ID = #{memberId}
					</if>
					<if test="memberName != null and memberName !=''">
						AND RE.MEM_NAME = #{memberName}
					</if>
					<if test="productName != null and productName != ''">
						AND RE.PRD_NAME LIKE '%' || #{productName} || '%'
					</if>
					<if test="displayYnCds != null and displayYnCds != ''">           
			        	AND RE.DISPLAY_YN IN (${displayYnCds})
			    	</if>
			    	<if test="permitYnCds != null and permitYnCds != ''">           
			         	AND RE.PERMIT_YN IN (${permitYnCds})
			    	</if>
		)B
		ORDER BY B.INS_DT DESC
		<include refid="ccs.common.pagingPost"/>
	</select> -->

	
	<delete id="deleteSaleproduct">
	/* [pms.product.deleteSaleproduct][eddie][2016. 6. 11.] */
		DELETE FROM PMS_SALEPRODUCT
		      WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}	
	</delete>	
	<delete id="deleteSaleproductoptionvalueByProductId">
	/* [pms.product.deleteSaleproductoptionvalueByProductId][eddie][2016. 6. 11.] */
		DELETE FROM PMS_SALEPRODUCTOPTIONVALUE
		      WHERE     STORE_ID = #{storeId}	
		            AND SALEPRODUCT_ID IN (SELECT SALEPRODUCT_ID
		                                     FROM PMS_SALEPRODUCT
		                                    WHERE STORE_ID = #{storeId}	 AND PRODUCT_ID = #{productId})	
	</delete>	
	<delete id="deleteSaleproductoptionvalue">
	/* [pms.product.deleteSaleproductoptionvalue][eddie][2016. 6. 11.] */
		DELETE FROM PMS_SALEPRODUCTOPTIONVALUE
		      WHERE SALEPRODUCT_ID = #{saleproductId} AND STORE_ID = #{storeId}	
	</delete>
	
	<resultMap type="pmsSaleproduct" id="selectSaleproductsWithOptionsResult" autoMapping="true">
		<id property="saleproductId" 						column="SALEPRODUCT_ID"/>
		<collection property="pmsSaleproductoptionvalues" ofType="pmsSaleproductoptionvalue" >
			<id property="saleproductId" 						column="SALEPRODUCT_ID"/>
			<id property="optionNo" 					column="OPTION_NO"/>
			<result property="optionName" 					column="OPTION_NAME"/>
			<result property="optionValue" 					column="OPTION_VALUE"/>
			<result property="attributeId" 					column="ATTRIBUTE_ID"/>
			<result property="attributeValue" 				column="ATTRIBUTE_VALUE"/>
		</collection>
	</resultMap>	
	<select id="selectSaleproductsWithOptions" resultMap="selectSaleproductsWithOptionsResult">
	/* [pms.product.selectSaleproductsWithOptions][eddie][2016. 6. 11.] */
		SELECT s.*, O.ATTRIBUTE_ID, O.ATTRIBUTE_VALUE, O.OPTION_NAME, O.OPTION_VALUE, O.OPTION_NO
		  FROM    PMS_SALEPRODUCT S
		       LEFT OUTER JOIN
		          PMS_SALEPRODUCTOPTIONVALUE O
		       ON S.SALEPRODUCT_ID = O.SALEPRODUCT_ID	
		 WHERE S.PRODUCT_ID = #{productId} AND S.STORE_ID = #{storeId}
		 ORDER BY SORT_NO	
	</select>
	<select id="selectProductAttributeList" resultType="pmsProductattribute">
	/* [pms.product.selectProductAttributeList][eddie][2016. 6. 11.] */
		SELECT *
		  FROM PMS_PRODUCTATTRIBUTE
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
	</select>
	<select id="pms.product.getProductImages" resultType="pmsProductimg">
	/* [pms.product.getProductImages][eddie][2016. 6. 11.] */
		SELECT *
		  FROM PMS_PRODUCTIMG
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}	
	</select>
	<select id="getProductImageNoMax" resultType="int">
		SELECT NVL (IMG_NO, 1) IMG_NO
		  FROM (SELECT MAX (TO_NUMBER (IMG_NO)) + 1 IMG_NO FROM PMS_PRODUCTIMG WHERE PRODUCT_ID = #{productId} AND STORE_ID= #{storeId}) DUAL	
	</select>
	<delete id="deleteProductImages">
		DELETE FROM PMS_PRODUCTIMG WHERE PRODUCT_ID=#{productId} AND STORE_ID= #{storeId}
	</delete>
	
	<resultMap type="pmsSetproduct" id="selectSetproductListResult" autoMapping="true">
		<id property="subProductId" 						column="SUB_PRODUCT_ID"/>
		<association property="pmsProduct" column="SUB_PRODUCT_ID" javaType="pmsProduct">
			<id property="productId" 						column="SUB_PRODUCT_ID"/>
	    	<result property="name" 						column="PRODUCT_NAME"/>	    
	    </association>
		<collection property="pmsSaleproducts" 	ofType="pmsSaleproduct" >
			<id property="saleproductId" 					column="SALEPRODUCT_ID"/>
			<result property="name" 						column="SALEPRODUCT_NAME"/>
			<result property="addSalePrice" 				column="ADD_SALE_PRICE"/>
			<result property="realStockQty" 				column="REAL_STOCK_QTY"/>
			<result property="saleproductStateCd" 			column="SALEPRODUCT_STATE_CD"/>
			<result property="erpSaleproductId" 			column="ERP_SALEPRODUCT_ID"/>
		</collection>
	</resultMap>	
	<select id="selectSetproductList" resultMap="selectSetproductListResult">
	/* [pms.product.selectSetproductList][eddie][2016.06.20] */
		SELECT SPRD.*,
		       PRD.NAME PRODUCT_NAME,
		       SALE.NAME SALEPRODUCT_NAME,
		       SALE.SALEPRODUCT_ID,
		       SALE.ERP_SALEPRODUCT_ID,
		       SALE.ADD_SALE_PRICE,
		       SALE.REAL_STOCK_QTY,
		       SALE.SALEPRODUCT_STATE_CD
		  FROM PMS_SETPRODUCT SPRD
		       INNER JOIN PMS_PRODUCT PRD
		          ON     PRD.PRODUCT_ID = SPRD.SUB_PRODUCT_ID
		             AND PRD.STORE_ID = SPRD.STORE_ID
		       INNER JOIN PMS_SALEPRODUCT SALE
		          ON     SALE.PRODUCT_ID = SPRD.SUB_PRODUCT_ID
		             AND SALE.STORE_ID = SPRD.STORE_ID
		 WHERE SPRD.PRODUCT_ID = #{productId} AND SPRD.STORE_ID= #{storeId}
		   AND SALE.SALEPRODUCT_STATE_CD = 'SALEPRODUCT_STATE_CD.SALE'
	</select>
	<delete id="pms.product.deleteSetProduct">
	/* [pms.product.deleteSetProduct][eddie][2016.06.20] */
		DELETE FROM PMS_SETPRODUCT
		      WHERE PRODUCT_ID = #{productId} AND STORE_ID= #{storeId}
	</delete>
	<select id="getPriceReserveTargetList" resultMap="getPriceHistoryListResult">
	/* [pms.product.getPriceReserveTargetList][eddie][2016.06.20] */
		  SELECT R.PRODUCT_ID,
		         R.PRICE_RESERVE_NO,
		         R.STORE_ID,
		         R.SALE_PRICE,
		         R.SUPPLY_PRICE,
		         R.LIST_PRICE,
		         R.COMMISSION_RATE,
		         R.POINT_SAVE_RATE,
		         R.REGULAR_DELIVERY_PRICE,
		         SR.SALEPRODUCT_ID,
		         SR.ADD_SALE_PRICE
		    FROM    PMS_PRICERESERVE R
		         LEFT OUTER JOIN
		            PMS_SALEPRODUCTPRICERESERVE SR
		         ON     R.PRODUCT_ID = SR.PRODUCT_ID
		            AND R.PRICE_RESERVE_NO = SR.PRICE_RESERVE_NO
		            AND R.STORE_ID = SR.STORE_ID
		   WHERE     R.RESERVE_DT &lt; SYSDATE
		         AND R.PRICE_RESERVE_STATE_CD = 'PRICE_RESERVE_STATE_CD.APPROVAL'
		         AND R.STORE_ID = #{storeId}
		ORDER BY R.RESERVE_DT ASC	  
	</select>
	<select id="getProductReserveTargetList" resultType="pmsProductreserve">
	/* [pms.product.getProductReserveTargetList][eddie][2016.06.20] */
		SELECT *
		  FROM PMS_PRODUCTRESERVE R
		 WHERE     R.RESERVE_DT &lt; SYSDATE
		       AND R.PRODUCT_RESERVE_STATE_CD = 'PRODUCT_RESERVE_STATE_CD.RESERVE'
		       AND R.STORE_ID = #{storeId}
	</select>
	<select id="getProductReserveList" resultType="pmsProductreserve">
	/* [pms.product.getProductReserveList][eddie][2016.07.21] */
		<include refid="ccs.common.pagingPre" />
		SELECT *
			,(SELECT US.NAME FROM CCS_USER US WHERE PMS_PRODUCTRESERVE.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME
		  FROM PMS_PRODUCTRESERVE
		 WHERE STORE_ID = #{storeId} AND PRODUCT_ID = #{productId}
		ORDER BY PRODUCT_RESERVE_NO DESC
		<include refid="ccs.common.pagingPost" />		 
	</select>
	<resultMap type="pmsSaleproductpricereserve" id="getSaleproductPriceReserveListResult" autoMapping="true">
		<id property="saleproductId" 						column="SALEPRODUCT_ID"/>
		<id property="productId" 							column="PRODUCT_ID"/>
		<id property="storeId" 								column="STORE_ID"/>
		<id property="priceReserveNo" 						column="PRICE_RESERVE_NO"/>
		<result property="addSalePrice" 						column="ADD_SALE_PRICE"/>
		<association property="pmsSaleproduct"				 javaType="pmsSaleproduct">
			<result property="name" 						column="NAME"/>
			<result property="addSalePrice" 				column="ADD_PRICE"/>
		</association>
	</resultMap>		
	<select id="getSaleproductPriceReserveList" resultMap="getSaleproductPriceReserveListResult">
	/* [pms.product.getSaleproductPriceReserveList][eddie][2016.06.20] */
		SELECT SPRD.SALEPRODUCT_ID,
		       SPRD.NAME,
		       SPRD.ADD_SALE_PRICE ADD_PRICE,
		       RESERVE.*
		  FROM    PMS_SALEPRODUCT SPRD
		       LEFT OUTER JOIN
		          (SELECT SRSV.*
		             FROM    PMS_PRICERESERVE PRSV
		                  INNER JOIN
		                     PMS_SALEPRODUCTPRICERESERVE SRSV
		                  ON     PRSV.PRODUCT_ID = SRSV.PRODUCT_ID
		                     AND PRSV.PRICE_RESERVE_NO = SRSV.PRICE_RESERVE_NO
		                     AND PRSV.STORE_ID = SRSV.STORE_ID
		                     AND PRSV.PRODUCT_ID = #{productId}
		                     AND PRSV.STORE_ID = #{storeId}
		                     <if test="priceReserveNo!=null and priceReserveNo!=''">
		                     AND PRSV.PRICE_RESERVE_NO = #{priceReserveNo}
		                     </if>) RESERVE
		       ON     SPRD.SALEPRODUCT_ID = RESERVE.SALEPRODUCT_ID
		          AND SPRD.PRODUCT_ID = RESERVE.PRODUCT_ID
		          AND SPRD.STORE_ID = RESERVE.STORE_ID
		 WHERE SPRD.PRODUCT_ID = #{productId}
		   AND SPRD.STORE_ID = #{storeId}
	</select>
	<delete id="deleteSaleProductPriceReserve">	
	/* [pms.product.deleteSaleProductPriceReserve][eddie][2016.06.22] */
		DELETE PMS_SALEPRODUCTPRICERESERVE
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId} AND PRICE_RESERVE_NO = #{priceReserveNo}
	</delete>
	<select id="getProductErpInterfaceItems" resultType="gcp.external.model.ErpApxItemmapping">
	/* [pms.product.getProductErpInterfaceItems][eddie][2016.06.28] */
		SELECT P.ERP_PRODUCT_ID ITEM_ID,
		       S.SALEPRODUCT_ID EX_OPTIONID,
		       P.PRODUCT_ID EX_ITEMID,
		       NVL(O_SIZE.OPTION_VALUE,'') INVENTSIZEID,
		        NVL(O_COLOR.OPTION_VALUE,'') INVENTCOLORID,
		       P.NAME EX_ITEMNAME
		  FROM PMS_PRODUCT P
		       LEFT OUTER JOIN PMS_SALEPRODUCT S
		          ON P.PRODUCT_ID = S.PRODUCT_ID AND P.STORE_ID = S.STORE_ID
		       LEFT OUTER JOIN PMS_SALEPRODUCTOPTIONVALUE O_SIZE
		          ON     S.SALEPRODUCT_ID = O_SIZE.SALEPRODUCT_ID
		             AND O_SIZE.OPTION_NAME = 'size'
		       LEFT OUTER JOIN PMS_SALEPRODUCTOPTIONVALUE O_COLOR
		          ON     S.SALEPRODUCT_ID = O_COLOR.SALEPRODUCT_ID
		             AND O_COLOR.OPTION_NAME = 'color'
		 WHERE P.PRODUCT_ID = #{productId} AND P.STORE_ID = #{storeId}
		   AND P.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
		   AND P.ERP_PRODUCT_ID IS NOT NULL
	</select>
	
	<select id="getSaleproducts" resultType="pmsSaleproduct">
		/* [pms.product.getSaleproducts][dennis][2016. 6. 29.] */
		SELECT /*+ index (a IDX_PMS_SALEPRODUCT_ID ) */
				a.*, COUNT(*) OVER () AS TOTAL_COUNT
		FROM PMS_SALEPRODUCT a
		WHERE a.PRODUCT_ID = #{productId}
		AND a.STORE_ID = #{storeId}
	</select>
	
	<select id="getOffshopstock" resultType="pmsOffshopstock">
		/* [pms.product.getOffshopstock][dennis][2016. 8. 2.] */
		SELECT O.NAME, NVL(OS.REAL_STOCK_QTY,0) AS REAL_STOCK_QTY
		FROM CCS_OFFSHOP O
		LEFT OUTER JOIN PMS_OFFSHOPSTOCK OS
			ON O.OFFSHOP_ID = OS.OFFSHOP_ID
			AND O.STORE_ID = OS.STORE_ID
			AND OS.SALEPRODUCT_ID = #{saleproductId}
		WHERE O.STORE_ID = #{storeId}
		AND O.OFFSHOP_ID = #{offshopId}
		AND O.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'
		AND O.OFFSHOP_PICKUP_YN = 'Y'
	</select>
	
	<resultMap type="pmsProduct" id="productBulk" autoMapping="true">
		<id property="storeId" column="STORE_ID" />
		<id property="productId" column="PRODUCT_ID" />
	    <association property="pmsBrand" column="BRAND_ID" javaType="pmsBrand">
	    	<id property="brandId" column="BRAND_ID"/>
	    	<result property="name" column="BRAND_NAME"/>	    
	    </association>
	</resultMap>
	<select id="getProductBulk" resultMap="productBulk">
		/* [pms.product.getProductBulk][ian][2016. 8. 3.] */
		SELECT PP.*, PB.NAME AS BRAND_NAME
		  FROM    PMS_PRODUCT PP
		       INNER JOIN
		          PMS_BRAND PB
		       ON PB.BRAND_ID = PP.BRAND_ID AND PB.STORE_ID = PP.STORE_ID
		 WHERE     PP.STORE_ID = #{storeId}
			   AND PP.PRODUCT_ID = #{productId} 
			   AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
	</select>
	<delete id="deleteProductages">
	/* [pms.product.deleteProductages][eddie][2016. 8. 18.] */
		DELETE FROM PMS_PRODUCTAGE
		      WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
	</delete>
	<select id="getProductages" resultType="pmsProductage">
	/* [pms.product.getProductages][eddie][2016. 8. 18.] */
		SELECT *
		  FROM PMS_PRODUCTAGE
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
	</select>
	<select id="getProductOptionList" resultType="pmsProductoption">
	/* [pms.product.getProductOptionList][eddie][2016. 8. 18.] */
		  SELECT *
		    FROM PMS_PRODUCTOPTION
		   WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
		ORDER BY SORT_NO
	</select>
	<select id="getOptionValueList" resultType="gcp.pms.model.custom.PmsOptionvalue">
	
	/* [pms.product.getOptionValueList][eddie][2016. 8. 18.] */
		SELECT    OPTION_VALUE
		       || CASE WHEN REAL_STOCK_QTY = 0 THEN ' (품절)' ELSE '' END
		       || CASE
		             WHEN ABS(ADD_SALE_PRICE) > 0 AND CHILD_CNT = 1
		             THEN
		                ' (' || CASE WHEN ADD_SALE_PRICE > 0 THEN '+' ELSE '' END || ADD_SALE_PRICE || '원)'
		             ELSE
		                ''
		          END
		          OPTION_DISP_VALUE,
		          OPTION_VALUE,
		       REAL_STOCK_QTY
	   FROM (
		  SELECT OPTION_VALUE,  
			<if test="pickupProduct=='' or pickupProduct==null"> 
                 MAX (S1.REAL_STOCK_QTY) REAL_STOCK_QTY,
                 MAX (S1.ADD_SALE_PRICE) ADD_SALE_PRICE,
                 COUNT (S1.SALEPRODUCT_ID) CHILD_CNT
			</if>
			<if test="pickupProduct!='' and pickupProduct!=null"> 
                 MAX (OS.REAL_STOCK_QTY) REAL_STOCK_QTY,
                 0 ADD_SALE_PRICE,
                 0 CHILD_CNT			
			</if>
		    FROM PMS_SALEPRODUCT S1
		   <if test="pickupProduct!='' and pickupProduct!=null"> 
		         INNER JOIN
		            PMS_OFFSHOPSTOCK OS 
		            ON S1.SALEPRODUCT_ID = OS.SALEPRODUCT_ID 
		            AND OS.STORE_ID = S1.STORE_ID
		            <if test="offshopId != null and offshopId != ''">
		            AND OS.OFFSHOP_ID = #{offshopId}
		            </if>
                 INNER JOIN CCS_OFFSHOP SHOP
                    ON     OS.OFFSHOP_ID = SHOP.OFFSHOP_ID
                       AND OS.STORE_ID = SHOP.STORE_ID
                       AND SHOP.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'	   
                       AND SHOP.OFFSHOP_PICKUP_YN = 'Y'
                       <if test="offshopId != null and offshopId != ''">
			            AND SHOP.OFFSHOP_ID = #{offshopId}
			            </if>         
		   </if>         
		         INNER JOIN
		            PMS_SALEPRODUCTOPTIONVALUE O1
		         ON S1.SALEPRODUCT_ID = O1.SALEPRODUCT_ID AND O1.OPTION_NAME = #{targetOptionName}
		   WHERE S1.PRODUCT_ID = #{productId} AND S1.STORE_ID = #{storeId}
		   <if test="pickupProduct=='' or pickupProduct==null"><!-- 온라인 상품은 판매중인 것만 --> 
		     AND S1.SALEPRODUCT_STATE_CD = 'SALEPRODUCT_STATE_CD.SALE'
		   </if>   
	       <if test="selectedOptions!=null and selectedOptions.size > 0">
		       <foreach item="option" collection="selectedOptions">
		         AND EXISTS
		                (SELECT 1
		                   FROM PMS_SALEPRODUCTOPTIONVALUE O
		                  WHERE O.SALEPRODUCT_ID = S1.SALEPRODUCT_ID AND OPTION_NAME = #{option.optionName} AND OPTION_VALUE = #{option.optionValue})
		       </foreach>           
	       </if>		   
		GROUP BY O1.OPTION_VALUE)
	</select>
	<select id="getSaleproductByOptions" resultType="pmsSaleproduct">
	/* [pms.product.getSaleproductByOptions][eddie][2016. 8. 18.] */
		SELECT S1.REAL_STOCK_QTY
			 , S1.PRODUCT_ID
			 , S1.SALEPRODUCT_ID
			 , S1.NAME
			 , P1.SALE_PRICE
			 , S1.ADD_SALE_PRICE
			 , P1.COMMISSION_RATE
		<if test="pickupProduct!='' and pickupProduct!=null"> 	 
		     , (SELECT MAX (REAL_STOCK_QTY)
		          FROM PMS_OFFSHOPSTOCK STOCK
		         WHERE     STOCK.SALEPRODUCT_ID = S1.SALEPRODUCT_ID
		               AND STOCK.REAL_STOCK_QTY > 0
		               AND EXISTS
		                      (SELECT 1
		                         FROM CCS_OFFSHOP SHOP
		                        WHERE     SHOP.OFFSHOP_ID = STOCK.OFFSHOP_ID
		                              AND SHOP.STORE_ID = STOCK.STORE_ID
		                              AND SHOP.OFFSHOP_PICKUP_YN = 'Y'
		                              AND SHOP.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'))
		          MAX_SHOP_STOCK_QTY			 
		</if>		          
		  FROM PMS_SALEPRODUCT S1, PMS_PRODUCT P1
		 WHERE     S1.PRODUCT_ID = #{productId} AND S1.STORE_ID = #{storeId}
		   AND S1.PRODUCT_ID = P1.PRODUCT_ID AND S1.STORE_ID = P1.STORE_ID
	       <if test="selectedOptions!=null and selectedOptions.size > 0">
		       <foreach item="option" collection="selectedOptions">
		         AND EXISTS
		                (SELECT 1
		                   FROM PMS_SALEPRODUCTOPTIONVALUE O
		                  WHERE O.SALEPRODUCT_ID = S1.SALEPRODUCT_ID AND OPTION_NAME = #{option.optionName} AND OPTION_VALUE = #{option.optionValue})
		       </foreach>           
	       </if>		
	</select>
	<delete id="deleteProductoption">
	/* [pms.product.deleteProductoption][eddie][2016. 8. 18.] */
	 DELETE FROM PMS_PRODUCTOPTION WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
	</delete>
	<select id="selectSaleproductOptionvalues" resultType="pmsSaleproductoptionvalue">
		SELECT /* [pms.product."selectSaleproductOptionvalues"][eddie][2016. 8. 18.] */ 
		       *
		  FROM PMS_SALEPRODUCTOPTIONVALUE
		 WHERE SALEPRODUCT_ID = #{saleproductId} AND STORE_ID = #{storeId}
	</select>
	<update id="updateProductState">
	
	BEGIN
		/* [일반] 모든 단품의 상태가 '판매중지'일 경우 : 판매중,품절 -> 일시중지 */
		UPDATE PMS_PRODUCT SS
		   SET SALE_STATE_CD = 'SALE_STATE_CD.STOP', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     SS.PRODUCT_ID IN (SELECT PRODUCT_ID
		                               FROM (  SELECT S1.PRODUCT_ID,
		                                              MAX (
		                                                 DECODE (S1.SALEPRODUCT_STATE_CD,
		                                                         'SALEPRODUCT_STATE_CD.STOP', 0,
		                                                         1))
		                                                 AS SALEPRODUCT_STATE_CD
		                                         FROM PMS_SALEPRODUCT S1, PMS_PRODUCT S2
		                                        WHERE     S1.PRODUCT_ID = S2.PRODUCT_ID
		                                              AND S1.STORE_ID = S2.STORE_ID
		                                              AND S1.STORE_ID = #{storeId}
		                                     GROUP BY S1.PRODUCT_ID) S3
		                              WHERE S3.SALEPRODUCT_STATE_CD = 0)
		       AND SS.SALE_STATE_CD IN ('SALE_STATE_CD.SALE', 'SALE_STATE_CD.SOLDOUT')
		       AND SS.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
		    <if test="productId!=null and productId!=''">
		       AND SS.PRODUCT_ID = #{productId}
		    </if>		       
		       AND SS.STORE_ID = #{storeId}; 
		
		/* [일반] 판매중인 1개 이상의 단품 재고가 0이상 : 품절 -> 판매중*/
		UPDATE PMS_PRODUCT P1
		   SET SALE_STATE_CD = 'SALE_STATE_CD.SALE', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     EXISTS
		              (SELECT 'X'
		                 FROM PMS_SALEPRODUCT S1
		                WHERE     P1.PRODUCT_ID = S1.PRODUCT_ID
		                      AND P1.STORE_ID = S1.STORE_ID
		                      AND S1.SALEPRODUCT_STATE_CD = 'SALEPRODUCT_STATE_CD.SALE'
		                      AND S1.REAL_STOCK_QTY > 0)
		       AND P1.SALE_STATE_CD = 'SALE_STATE_CD.SOLDOUT'
		       AND P1.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
		    <if test="productId!=null and productId!=''">
		       AND P1.PRODUCT_ID = #{productId}
		    </if>		  		       
		       AND P1.STORE_ID = #{storeId}; 
		
		
		/* [일반] 모든 판매중 상태의 단품의 재고가 0일 경우 : 판매중 -> 품절*/
		UPDATE PMS_PRODUCT P1
		   SET SALE_STATE_CD = 'SALE_STATE_CD.SOLDOUT', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     P1.PRODUCT_ID IN (SELECT PRODUCT_ID
		                               FROM (  SELECT PRODUCT_ID, SUM (QTY) QTY
		                                         FROM (SELECT S1.PRODUCT_ID,
		                                                      CASE WHEN REAL_STOCK_QTY > 0 THEN 1 ELSE 0 END
		                                                         QTY
		                                                 FROM PMS_SALEPRODUCT S1, PMS_PRODUCT S2
		                                                WHERE     S1.PRODUCT_ID = S2.PRODUCT_ID
		                                                      AND S1.STORE_ID = S2.STORE_ID
		                                                      AND S1.STORE_ID = #{storeId})
		                                     GROUP BY PRODUCT_ID)
		                              WHERE QTY = 00)
		       AND P1.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
		       AND P1.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
		    <if test="productId!=null and productId!=''">
		       AND P1.PRODUCT_ID = #{productId}
		    </if>			       
		       AND P1.STORE_ID = #{storeId}; 
		
		/* [세트] 한 개 이상의 구성상품 상태가 판매중,품절이 아닐때 :판매중, 품절 -> 일시중지 */
		UPDATE PMS_PRODUCT SS
		   SET SALE_STATE_CD = 'SALE_STATE_CD.STOP', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     EXISTS
		              (SELECT 'X'
		                 FROM PMS_SETPRODUCT SET1, PMS_PRODUCT S1
		                WHERE     S1.PRODUCT_ID = SET1.SUB_PRODUCT_ID
		                      AND S1.STORE_ID = SET1.STORE_ID
		                      AND SET1.PRODUCT_ID = SS.PRODUCT_ID
		                      AND SET1.STORE_ID = SS.STORE_ID
		                      AND NOT EXISTS
		                                 (SELECT 'X'
		                                    FROM PMS_PRODUCT AA1
		                                   WHERE     AA1.STORE_ID = S1.STORE_ID
		                                         AND AA1.PRODUCT_ID = S1.PRODUCT_ID
		                                         AND AA1.SALE_STATE_CD IN
		                                                ('SALE_STATE_CD.SALE', 'SALE_STATE_CD.SOLDOUT')))
		       AND SS.SALE_STATE_CD IN ('SALE_STATE_CD.SALE', 'SALE_STATE_CD.SOLDOUT')
		       AND SS.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.SET'
		    <if test="productId!=null and productId!=''">
		       AND SS.PRODUCT_ID = #{productId}
		    </if>			       
		       AND SS.STORE_ID = #{storeId}; 
		       
		       
		/* [세트] 구성상품이 하나이상  품절일경우 :판매중 -> 품절  */
		UPDATE PMS_PRODUCT SS
		   SET SALE_STATE_CD = 'SALE_STATE_CD.SOLDOUT', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     EXISTS
		              (SELECT 'X'
		                 FROM PMS_SETPRODUCT SET1, PMS_PRODUCT S1
		                WHERE     S1.PRODUCT_ID = SET1.SUB_PRODUCT_ID
		                      AND S1.STORE_ID = SET1.STORE_ID
		                      AND S1.PRODUCT_ID = SS.PRODUCT_ID
		                      AND S1.STORE_ID = SS.STORE_ID
		                      AND S1.SALE_STATE_CD = 'SALE_STATE_CD.SOLDOUT'
		                      AND ROWNUM = 1                                      --GROUP BY SET1.PRODUCT_ID
		                                    )
		       AND SS.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
		       AND SS.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.SET'
		    <if test="productId!=null and productId!=''">
		       AND SS.PRODUCT_ID = #{productId}
		    </if>				       
		       AND SS.STORE_ID = #{storeId}; 
		
		/*[세트] 모든 구성상품이 판매중일 경우 : 품절-> 판매중 */
		UPDATE PMS_PRODUCT SS
		   SET SALE_STATE_CD = 'SALE_STATE_CD.SALE', UPD_ID = #{updId}, UPD_DT = SYSDATE
		 WHERE     EXISTS
		              (  SELECT 1
		                   FROM PMS_SETPRODUCT SET1, PMS_PRODUCT S1
		                  WHERE     S1.PRODUCT_ID = SET1.SUB_PRODUCT_ID
		                        AND S1.STORE_ID = SET1.STORE_ID
		                        AND SET1.PRODUCT_ID = SS.PRODUCT_ID
		                        AND SET1.STORE_ID = SS.STORE_ID
		               GROUP BY SET1.PRODUCT_ID
		                 HAVING MIN (DECODE (S1.SALE_STATE_CD, 'SALE_STATE_CD.SALE', 1, 0)) = 1)
		       AND SALE_STATE_CD = 'SALE_STATE_CD.SOLDOUT'
		       AND PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.SET'
		    <if test="productId!=null and productId!=''">
		       AND SS.PRODUCT_ID = #{productId}
		    </if>				       
		       AND SS.STORE_ID = #{storeId}; 
		       
			       		       
	END;			       
	
	</update>
	<select id="getSetProductIdList" resultType="string">
		SELECT PRODUCT_ID
		  FROM PMS_SETPRODUCT
		 WHERE SUB_PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}	
	</select>
	
	
	<!-- 재고 증/차감 -->
<!-- 	<update id="updateStock" parameterType="pmsSaleproduct"> -->
<!-- 		/* [pms.product.updateStock][victor][2016. 08. 31.] */ -->
<!-- 		UPDATE pms_saleproduct -->
<!-- 		   SET upd_dt = #{updDt} -->
<!-- 		      ,upd_id = #{updId} -->
<!-- 		      ,real_stock_qty = (real_stock_qty + #{realStockQty}) -->
<!-- 		 WHERE store_id = #{storeId} -->
<!-- 		   AND saleproduct_id = #{saleproductId}		   		   		 -->
<!-- 	</update> -->
	
	<update id="updateStock" parameterType="pmsSaleproduct" statementType="CALLABLE">
		{call
			DECLARE
					v_realStockQty INTEGER;
					v_return VARCHAR2(1000);
					v_msg VARCHAR2(1000);
					
			CURSOR data_cur IS
					SELECT REAL_STOCK_QTY 
			           FROM PMS_SALEPRODUCT
			          WHERE STORE_ID = #{storeId} 
			          AND SALEPRODUCT_ID = #{saleproductId}
			        FOR UPDATE OF REAL_STOCK_QTY WAIT 10;			         						        			 				
			 BEGIN
			       OPEN data_cur;
			       FETCH data_cur INTO v_realStockQty;
			       CLOSE data_cur;
			       
		       		IF #{stockMinus} = 'MINUS'
		       		   OR (#{realStockQty} &lt; 0 AND v_realStockQty &gt;= ABS(#{realStockQty}))	/* 재고차감 */
		       		   OR #{realStockQty} &gt;= 0 /* 재고증가 */
		       		THEN
		       			UPDATE PMS_SALEPRODUCT
						   SET UPD_DT = SYSDATE
						      ,UPD_ID = #{updId}
						      ,REAL_STOCK_QTY = (REAL_STOCK_QTY + #{realStockQty})
						 WHERE store_id = #{storeId}
						   AND saleproduct_id = #{saleproductId};
						
						v_return := 'SUCCESS';
					ELSE v_return := 'FAIL';
						 v_msg := '재고수량이 부족합니다.';
					END IF;		
						
					#{result,jdbcType=VARCHAR,mode=OUT} := v_return;		
					#{msg,jdbcType=VARCHAR,mode=OUT} := v_msg;
										
			 END
		 }
	</update>
<!-- 	<resultMap type="gcp.pms.model.custom.PmsOffpickupProduct" id="getSaleproductPickupshopInfoResult" autoMapping="true">
		<id property="saleproductId" 							column="SALEPRODUCT_ID"/>
		<result property="productName" 							column="PRODUCT_NAME"/>
		<result property="saleproductName" 						column="SALERPDOCUT_NAME"/>
	    <association property="ccsOffshop" column="offshopId" javaType="ccsOffshop">
	    	<id property="offshopId" 	column="OFFSHOP_ID"/>
	    	<result property="areaDiv1" column="AREA_DIV1"/>
	    	<result property="areaDiv2" column="AREA_DIV2"/>
	    	<result property="name" 	column="OFFSHOP_NAME"/>	    
	    </association>		
	</resultMap>		
	<select id="getSaleproductPickupshopInfo" resultMap="getSaleproductPickupshopInfoResult" >
		SELECT PRD.NAME PRODUCT_NAME,
		       SPRD.SALEPRODUCT_ID,
		       SPRD.NAME SALERPDOCUT_NAME,
		       SHOP.OFFSHOP_ID,
		       SHOP.AREA_DIV1,
		       SHOP.AREA_DIV2,
		       SHOP.NAME OFFSHOP_NAME
		  FROM PMS_SALEPRODUCT SPRD
		       INNER JOIN PMS_PRODUCT PRD
		          ON     PRD.PRODUCT_ID = SPRD.PRODUCT_ID
		             AND PRD.STORE_ID = SPRD.STORE_ID		  
		       LEFT OUTER JOIN PMS_OFFSHOPSTOCK STOCK
		          ON SPRD.SALEPRODUCT_ID = STOCK.SALEPRODUCT_ID AND SPRD.STORE_ID = STOCK.STORE_ID
		       INNER JOIN CCS_OFFSHOP SHOP
		          ON SHOP.OFFSHOP_ID = STOCK.OFFSHOP_ID AND SHOP.STORE_ID = STOCK.STORE_ID
		             AND STOCK.SALEPRODUCT_ID IN 
		         	<foreach item="saleproductId" collection="saleproductIdList" open="(" separator="," close=")">
		         		#{saleproductId}
		         	</foreach>		  		
		         	 AND SPRD.SALEPRODUCT_ID = #{saleproductId}     
		         <if test="offshopId!= null and offshopId!=''">
		         	 AND SHOP.OFFSHOP_ID = #{offshopId}           
		         </if>  
		             AND STOCK.REAL_STOCK_QTY > 0
		             AND SHOP.OFFSHOP_PICKUP_YN = 'Y'
		             AND SHOP.AREA_DIV1 IS NOT NULL
		             AND SHOP.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'
	</select> -->
	<select id="getSalestopTargetProductList" resultType="string">
		  SELECT S1.PRODUCT_ID
		    FROM PMS_SALEPRODUCT S1, PMS_PRODUCT SS
		   WHERE     S1.PRODUCT_ID = SS.PRODUCT_ID
		         AND S1.STORE_ID = SS.STORE_ID
		         AND SS.SALE_STATE_CD IN ('SALE_STATE_CD.SALE', 'SALE_STATE_CD.SOLDOUT')
		         AND SS.PRODUCT_TYPE_CD = 'PRODUCT_TYPE_CD.GENERAL'
		         AND SS.STORE_ID = '1001'
		GROUP BY S1.PRODUCT_ID
		  HAVING MAX (DECODE (S1.SALEPRODUCT_STATE_CD, 'SALEPRODUCT_STATE_CD.STOP', 0, 1)) = 0	
	</select>
	<update id="updateProductsummary">
		BEGIN
		   DELETE FROM PMS_PRODUCTSUMMARY;
		
		   INSERT INTO PMS_PRODUCTSUMMARY
		      SELECT #{storeId},
		             P1.PRODUCT_ID,
		             NVL (I1.ORDER_QTY, 0),
		             NVL (I2.RATING, 0),
		             SYSDATE,
		             #{updId},
		             SYSDATE,
		             #{updId}
		        FROM PMS_PRODUCT P1,
		             (  SELECT '1001',
		                       PRODUCT_ID,
		                       COUNT (1) ORDER_QTY,
		                       0 RATING
		                  FROM OMS_ORDERPRODUCT
		                 WHERE ORDER_DT &gt; (SYSDATE - 60) AND STORE_ID = #{storeId}<!--TODO 주문일수 7일로변경바람 -->
		              GROUP BY PRODUCT_ID) I1,
		             (  SELECT PRODUCT_ID, AVG (RATING) RATING
		                  FROM PMS_REVIEW 
		                 WHERE STORE_ID = #{storeId}
		              GROUP BY PRODUCT_ID) I2
		       WHERE     P1.STORE_ID = #{storeId}
		             AND P1.PRODUCT_ID = I1.PRODUCT_ID(+)
		             AND P1.PRODUCT_ID = I2.PRODUCT_ID(+)
		             AND P1.DISPLAY_YN = 'Y'
		             AND P1.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
		             AND P1.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
		             AND P1.SEARCH_EXC_YN &lt;&gt; 'Y'
		             AND P1.SALE_START_DT &lt; SYSDATE
		             AND P1.SALE_END_DT &gt; SYSDATE;
		END;	
	</update>
	<update id="updateProductprice">
BEGIN
   DELETE FROM PMS_PRODUCTPRICE;

   INSERT INTO PMS_PRODUCTPRICE
      WITH COUPON_PRODUCT
           AS (SELECT PRD.PRODUCT_ID,                                                  /* 상품 적용 쿠폰*/
                      PRD.SALE_PRICE,
                      PRD.POINT_SAVE_RATE,
                      PRD.DELIVERY_FEE_FREE_YN,
                      COUPON.COUPON_ID,
                      COUPON.DC_APPLY_TYPE_CD,
                      COUPON.DC_VALUE,
                      COUPON.DEAL_APPLY_YN,
                      PRD.COMMISSION_RATE,
                      COUPON.FEE_LIMIT_APPLY_YN,
                      NVL (COUPON.MAX_DC_AMT, 0) MAX_DC_AMT
                 FROM SPS_COUPON COUPON
                      INNER JOIN CCS_APPLY APY
                         ON COUPON.APPLY_NO = APY.APPLY_NO AND COUPON.STORE_ID = APY.STORE_ID
                      INNER JOIN CCS_APPLYTARGET TARGET
                         ON TARGET.APPLY_NO = APY.APPLY_NO AND TARGET.STORE_ID = APY.STORE_ID
                      INNER JOIN PMS_PRODUCT PRD
                         ON PRD.PRODUCT_ID = TARGET.TARGET_ID AND TARGET.STORE_ID = PRD.STORE_ID
                WHERE     COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
                      AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.PRODUCT'
                      AND COUPON.COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
                      AND COUPON.DOWN_SHOW_YN = 'Y'
                      AND COUPON.STORE_ID = '1001'
                      AND SYSDATE BETWEEN COUPON.ISSUE_START_DT AND COUPON.ISSUE_END_DT
                      AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                      AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                      AND PRD.DISPLAY_YN = 'Y'
                      AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
               UNION                                                                  /* 브랜드 적용 쿠폰*/
               SELECT /*+ INDEX(PRD PK_PMS_PRODUCT) */
                     PRD.PRODUCT_ID,
                      PRD.SALE_PRICE,
                      PRD.POINT_SAVE_RATE,
                      PRD.DELIVERY_FEE_FREE_YN,
                      COUPON.COUPON_ID,
                      COUPON.DC_APPLY_TYPE_CD,
                      COUPON.DC_VALUE,
                      COUPON.DEAL_APPLY_YN,
                      PRD.COMMISSION_RATE,
                      COUPON.FEE_LIMIT_APPLY_YN,
                      NVL (COUPON.MAX_DC_AMT, 0) MAX_DC_AMT
                 FROM SPS_COUPON COUPON
                      INNER JOIN CCS_APPLY APY
                         ON COUPON.APPLY_NO = APY.APPLY_NO AND COUPON.STORE_ID = APY.STORE_ID
                      INNER JOIN CCS_APPLYTARGET TARGET
                         ON TARGET.APPLY_NO = APY.APPLY_NO AND TARGET.STORE_ID = APY.STORE_ID
                      INNER JOIN PMS_BRAND BRD
                         ON BRD.BRAND_ID = TARGET.TARGET_ID AND BRD.STORE_ID = TARGET.STORE_ID
                      INNER JOIN PMS_PRODUCT PRD
                         ON PRD.BRAND_ID = BRD.BRAND_ID AND PRD.STORE_ID = '1001'
                WHERE     COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
                      AND COUPON.STORE_ID = '1001'
                      AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.BRAND'
                      AND COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
                      AND DOWN_SHOW_YN = 'Y'
                      AND SYSDATE BETWEEN ISSUE_START_DT AND ISSUE_END_DT
                      AND NOT EXISTS
                                 (SELECT 1
                                    FROM CCS_EXCPRODUCT EXC
                                   WHERE     EXC.PRODUCT_ID = PRD.PRODUCT_ID
                                         AND EXC.APPLY_NO = APY.APPLY_NO)
                      AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                      AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                      AND PRD.DISPLAY_YN = 'Y'
                      AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
               UNION                                                                  /* 카테고리 쿠폰  */
               SELECT I2.PRODUCT_ID,
                      I2.SALE_PRICE,
                      I2.POINT_SAVE_RATE,
                      I2.DELIVERY_FEE_FREE_YN,
                      I1.COUPON_ID,
                      I1.DC_APPLY_TYPE_CD,
                      I1.DC_VALUE,
                      I1.DEAL_APPLY_YN,
                      I2.COMMISSION_RATE,
                      I1.FEE_LIMIT_APPLY_YN,
                      NVL (MAX_DC_AMT, 0) MAX_DC_AMT
                 FROM    (SELECT COUPON.COUPON_ID,
                                 COUPON.DC_APPLY_TYPE_CD,
                                 COUPON.DC_VALUE,
                                 APY.APPLY_NO,
                                 TARGET.TARGET_ID,
                                 COUPON.DEAL_APPLY_YN,
                                 COUPON.FEE_LIMIT_APPLY_YN,
                                 COUPON.MAX_DC_AMT
                            FROM SPS_COUPON COUPON
                                 INNER JOIN CCS_APPLY APY
                                    ON     COUPON.APPLY_NO = APY.APPLY_NO
                                       AND COUPON.STORE_ID = APY.STORE_ID
                                 INNER JOIN CCS_APPLYTARGET TARGET
                                    ON     TARGET.APPLY_NO = APY.APPLY_NO
                                       AND TARGET.STORE_ID = APY.STORE_ID
                           WHERE     COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
                                 AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.CATEGORY'
                                 AND COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
                                 AND DOWN_SHOW_YN = 'Y'
                                 AND COUPON.STORE_ID = '1001'
                                 AND SYSDATE BETWEEN ISSUE_START_DT AND ISSUE_END_DT) I1
                      INNER JOIN
                         (SELECT PRD.PRODUCT_ID,
                                 PRD.COMMISSION_RATE,
                                 DCATE.DISPLAY_CATEGORY_ID,
                                 PRD.SALE_PRICE,
                                 PRD.POINT_SAVE_RATE,
                                 PRD.DELIVERY_FEE_FREE_YN
                            FROM    DMS_DISPLAYCATEGORYPRODUCT DCATE
                                 INNER JOIN
                                    PMS_PRODUCT PRD
                                 ON (    PRD.PRODUCT_ID = DCATE.PRODUCT_ID
                                     AND PRD.STORE_ID = DCATE.STORE_ID)
                           WHERE     PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                                 AND PRD.PRODUCT_TYPE_CD IN
                                        ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                                 AND PRD.DISPLAY_YN = 'Y'
                                 AND DCATE.STORE_ID = '1001'
                                 AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT) I2
                      ON (I1.TARGET_ID = I2.DISPLAY_CATEGORY_ID)
                WHERE NOT EXISTS
                         (SELECT 1
                            FROM CCS_EXCPRODUCT EXC
                           WHERE EXC.PRODUCT_ID = I2.PRODUCT_ID AND EXC.APPLY_NO = I1.APPLY_NO)),
           NOMAL_PRICE
           AS (SELECT PRODUCT.PRODUCT_ID,
                      NVL (IJ.MIN_PRICE, PRODUCT.SALE_PRICE) MIN_PRICE,
                      IJ.COUPON_ID,
                      NVL (IJ.POINT_SAVE_RATE, PRODUCT.POINT_SAVE_RATE) POINT_SAVE_RATE,
                      NVL (IJ.DELIVERY_YN, PRODUCT.DELIVERY_FEE_FREE_YN) DELIVERY_YN
                 FROM    PMS_PRODUCT PRODUCT
                      LEFT OUTER JOIN
                         (  SELECT PRODUCT_ID,
                                   MIN (MIN_PRICE) KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      MIN_PRICE,
                                   MIN (COUPON_ID) KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      COUPON_ID,
                                   MIN (PRICE_TYPE) KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      PRICE_TYPE,
                                   MIN (SALE_PRICE) KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      SALE_PRICE,
                                   MIN (POINT_SAVE_RATE)
                                      KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      POINT_SAVE_RATE,
                                   MIN (DELIVERY_FEE_FREE_YN)
                                      KEEP (DENSE_RANK FIRST ORDER BY MIN_PRICE ASC)
                                      DELIVERY_YN
                              FROM (  SELECT PRODUCT_ID,
                                             GREATEST (SALE_PRICE - MAX (NVL (DC_PRICE, 0)) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE DESC), 0) MIN_PRICE,
                                             MAX (COUPON_ID) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE DESC) COUPON_ID,                                                
                                             SALE_PRICE,
                                             POINT_SAVE_RATE,
                                             DELIVERY_FEE_FREE_YN,
                                             'shock' PRICE_TYPE
                                        FROM (SELECT I1.PRODUCT_ID,
                                                     DC_VALUE,
                                                     DC_APPLY_TYPE_CD,
	                                                CASE
	                                                  WHEN     I2.DC_APPLY_TYPE_CD =  'DC_APPLY_TYPE_CD.RATE'
	                                                       AND I2.MAX_DC_AMT > 0
	                                                  THEN
	                                                     LEAST (
	                                                        ROUND (I1.SALE_PRICE * I2.DC_VALUE / 100, -1),
	                                                        I2.MAX_DC_AMT)
	                                                  WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
	                                                  THEN
	                                                     ROUND (I1.SALE_PRICE * I2.DC_VALUE / 100, -1)
	                                                  WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.AMT'
	                                                  THEN
	                                                     DC_VALUE
	                                               END
	                                                  DC_PRICE,
                                                     I2.COUPON_ID,
                                                     I1.SALE_PRICE,
                                                     I1.POINT_SAVE_RATE,
                                                     I1.DELIVERY_FEE_FREE_YN
                                                FROM    (              /*쇼킹딜 적용 상품 (상품중복이면 최신 적용순)*/
                                                         SELECT   MIN ( SALE_PRICE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) SALE_PRICE, 
                                                         		  MIN ( POINT_SAVE_RATE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) POINT_SAVE_RATE,
                                                                  MIN ( DELIVERY_FEE_FREE_YN)  KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC)
                                                                     DELIVERY_FEE_FREE_YN,
                                                                  MIN ( COMMISSION_RATE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC)
                                                                     COMMISSION_RATE,
                                                                  PRODUCT_ID
                                                             FROM (SELECT DP.PRODUCT_ID,
                                                                          DP.SALE_PRICE,
                                                                          DP.POINT_SAVE_RATE,
                                                                          DP.DELIVERY_FEE_FREE_YN,
                                                                          DP.INS_DT,
                                                                          DP.DEAL_PRODUCT_NO,
                                                                          DP.COMMISSION_RATE
                                                                     FROM SPS_DEALPRODUCT DP
                                                                          INNER JOIN SPS_DEAL DEAL
                                                                             ON (    DEAL.DEAL_ID =
                                                                                        DP.DEAL_ID
                                                                                 AND DEAL.STORE_ID =
                                                                                        DP.STORE_ID
                                                                                 AND DEAL.DEAL_TYPE_CD =
                                                                                        'DEAL_TYPE_CD.SHOCKDEAL'
                                                                                 AND DEAL.DISPLAY_YN =
                                                                                        'Y')
                                                                          INNER JOIN PMS_PRODUCT PP
                                                                             ON (    DP.STORE_ID = PP.STORE_ID
                                                                                 AND DP.PRODUCT_ID = PP.PRODUCT_ID)
                                                                    WHERE     DP.STORE_ID = '1001'
                                                                          AND DP.DISPLAY_YN = 'Y'
                                                                          AND SYSDATE BETWEEN DP.START_DT AND DP.END_DT
                                                                          AND DP.DEAL_STOCK_QTY > 0
                                                                          AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN')
                                                         GROUP BY PRODUCT_ID) I1
                                                     LEFT OUTER JOIN
                                                        (SELECT *
                                                           FROM COUPON_PRODUCT CP
                                                          WHERE     DEAL_APPLY_YN = 'Y'
                                                                AND EXISTS
                                                                       (SELECT 1
                                                                          FROM SPS_COUPONDEAL CD
                                                                         WHERE     CD.COUPON_ID =
                                                                                      CP.COUPON_ID
                                                                               AND CD.STORE_ID = '1001'
                                                                               AND CD.DEAL_ID = '1')) I2
                                                     ON I1.PRODUCT_ID = I2.PRODUCT_ID
                                                     AND (   I1.COMMISSION_RATE >= 10
                                                             OR I2.FEE_LIMIT_APPLY_YN = 'Y'))
                                    GROUP BY PRODUCT_ID,
                                             SALE_PRICE,
                                             POINT_SAVE_RATE,
                                             DELIVERY_FEE_FREE_YN
                                    UNION
                                      SELECT PRODUCT_ID,
                                             GREATEST(SALE_PRICE - ( MAX (NVL (DC_PRICE, 0)) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE DESC)),0) MIN_PRICE,
                                             MAX (COUPON_ID) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE DESC) COUPON_ID, 
                                             SALE_PRICE,
                                             POINT_SAVE_RATE,
                                             DELIVERY_FEE_FREE_YN,
                                             'nomal' PRICE_TYPE
                                        FROM (                        /* 일반 쿠폰 적용 ( 상품, 브랜드, 카테고리)*/
                                              SELECT PRODUCT_ID,
                                                     DC_VALUE,
                                                     DC_APPLY_TYPE_CD,
	                                               CASE
	                                                  WHEN     DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
	                                                       AND MAX_DC_AMT > 0
	                                                  THEN
	                                                     LEAST (ROUND (SALE_PRICE * DC_VALUE / 100, -1),
	                                                            MAX_DC_AMT)
	                                                  WHEN DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
	                                                  THEN
	                                                     ROUND (SALE_PRICE * DC_VALUE / 100, -1)
	                                                  WHEN DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.AMT'
	                                                  THEN DC_VALUE
	                                               END
	                                                  DC_PRICE,                                                     
                                                     COUPON_ID,
                                                     SALE_PRICE,
                                                     POINT_SAVE_RATE,
                                                     DELIVERY_FEE_FREE_YN
                                                FROM COUPON_PRODUCT
                                               WHERE COMMISSION_RATE >= 10 OR FEE_LIMIT_APPLY_YN = 'Y')
                                    GROUP BY PRODUCT_ID,
                                             SALE_PRICE,
                                             POINT_SAVE_RATE,
                                             DELIVERY_FEE_FREE_YN)
                          GROUP BY PRODUCT_ID) IJ
                      ON (PRODUCT.PRODUCT_ID = IJ.PRODUCT_ID)
                WHERE     PRODUCT.STORE_ID = '1001'
                      AND PRODUCT.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                      AND PRODUCT.PRODUCT_TYPE_CD IN
                             ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                      AND PRODUCT.DISPLAY_YN = 'Y'
                      AND SYSDATE BETWEEN PRODUCT.SALE_START_DT AND PRODUCT.SALE_END_DT)
      SELECT '1001' STORE_ID,
             PRODUCT_ID,
             SALE_PRICE,
             CASE WHEN POINT_SAVE_RATE > 0 THEN 'Y' ELSE 'N' END POINT_YN,
             DELIVERY_FEE_FREE_YN,
             COUPON_ID,
             0 PRESTIGE_SALE_PRICE,
             'N' PRESTIGE_POINT_YN,
             'N' PRESTIGE_DELIVERY_FEE_FREE_YN,
             '' PRESTIGE_COUPON_ID,
             VIP_SALE_PRICE,
             CASE WHEN V_P_RATE > 0 THEN 'Y' ELSE 'N' END VIP_POINT_YN,
             VIP_DELIVERY_FEE_FREE_YN,
             VIP_COUPON_ID,
             GOLD_SALE_PRICE,
             CASE WHEN G_P_RATE > 0 THEN 'Y' ELSE 'N' END GOLD_POINT_YN,
             GOLD_DELIVERY_FEE_FREE_YN,
             GOLD_COUPON_ID,
             SILVER_SALE_PRICE,
             CASE WHEN S_P_RATE > 0 THEN 'Y' ELSE 'N' END SILVER_POINT_YN,
             SILVER_DELIVERY_FEE_FREE_YN,
             SILVER_COUPON_ID,
             FAMILY_SALE_PRICE,
             CASE WHEN F_P_RATE > 0 THEN 'Y' ELSE 'N' END FAMILY_POINT_YN,
             FAMILY_DELIVERY_FEE_FREE_YN,
             FAMILY_COUPON_ID,
             WELCOME_SALE_PRICE,
             CASE WHEN W_P_RATE > 0 THEN 'Y' ELSE 'N' END WELCOME_POINT_YN,
             WELCOME_DELIVERY_FEE_FREE_YN,
             WELCOME_COUPON_ID,
             SYSDATE,
             #{insId},
             SYSDATE,
             #{insId}
        FROM (SELECT '1001',
                     NOMAL.PRODUCT_ID,
                     NOMAL.MIN_PRICE SALE_PRICE,
                     NOMAL.POINT_SAVE_RATE,
                     NOMAL.DELIVERY_YN DELIVERY_FEE_FREE_YN,
                     NOMAL.COUPON_ID COUPON_ID,
                     CASE
                        WHEN NVL (MEMBERSHIP.VIP_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.MIN_PRICE
                        ELSE
                           MEMBERSHIP.VIP_PRICE
                     END
                        VIP_SALE_PRICE,
                     CASE
                        WHEN NVL (MEMBERSHIP.VIP_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.POINT_SAVE_RATE
                        ELSE
                           MEMBERSHIP.POINT_SAVE_RATE
                     END
                        V_P_RATE,
                     CASE
                        WHEN NVL (MEMBERSHIP.VIP_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.DELIVERY_YN
                        ELSE
                           MEMBERSHIP.DELIVERY_YN
                     END
                        VIP_DELIVERY_FEE_FREE_YN,
                     CASE
                        WHEN NVL (MEMBERSHIP.VIP_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.COUPON_ID
                        ELSE
                           MEMBERSHIP.VIP_COUPON_ID
                     END
                        VIP_COUPON_ID,
                     CASE
                        WHEN NVL (MEMBERSHIP.GOLD_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.MIN_PRICE
                        ELSE
                           MEMBERSHIP.GOLD_PRICE
                     END
                        GOLD_SALE_PRICE,
                     CASE
                        WHEN NVL (MEMBERSHIP.GOLD_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.POINT_SAVE_RATE
                        ELSE
                           MEMBERSHIP.POINT_SAVE_RATE
                     END
                        G_P_RATE,
                     CASE
                        WHEN NVL (MEMBERSHIP.GOLD_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.DELIVERY_YN
                        ELSE
                           MEMBERSHIP.DELIVERY_YN
                     END
                        GOLD_DELIVERY_FEE_FREE_YN,
                     CASE
                        WHEN NVL (MEMBERSHIP.GOLD_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.COUPON_ID
                        ELSE
                           MEMBERSHIP.GOLD_COUPON_ID
                     END
                        GOLD_COUPON_ID,
                     CASE
                        WHEN NVL (MEMBERSHIP.SILVER_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.MIN_PRICE
                        ELSE
                           MEMBERSHIP.SILVER_PRICE
                     END
                        SILVER_SALE_PRICE,
                     CASE
                        WHEN NVL (MEMBERSHIP.SILVER_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.POINT_SAVE_RATE
                        ELSE
                           MEMBERSHIP.POINT_SAVE_RATE
                     END
                        S_P_RATE,
                     CASE
                        WHEN NVL (MEMBERSHIP.SILVER_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.DELIVERY_YN
                        ELSE
                           MEMBERSHIP.DELIVERY_YN
                     END
                        SILVER_DELIVERY_FEE_FREE_YN,
                     CASE
                        WHEN NVL (MEMBERSHIP.SILVER_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.COUPON_ID
                        ELSE
                           MEMBERSHIP.SILVER_COUPON_ID
                     END
                        SILVER_COUPON_ID,
                     CASE
                        WHEN NVL (MEMBERSHIP.FAMILY_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.MIN_PRICE
                        ELSE
                           MEMBERSHIP.FAMILY_PRICE
                     END
                        FAMILY_SALE_PRICE,
                     CASE
                        WHEN NVL (MEMBERSHIP.FAMILY_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.POINT_SAVE_RATE
                        ELSE
                           MEMBERSHIP.POINT_SAVE_RATE
                     END
                        F_P_RATE,
                     CASE
                        WHEN NVL (MEMBERSHIP.FAMILY_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.DELIVERY_YN
                        ELSE
                           MEMBERSHIP.DELIVERY_YN
                     END
                        FAMILY_DELIVERY_FEE_FREE_YN,
                     CASE
                        WHEN NVL (MEMBERSHIP.FAMILY_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.COUPON_ID
                        ELSE
                           MEMBERSHIP.FAMILY_COUPON_ID
                     END
                        FAMILY_COUPON_ID,
                     CASE
                        WHEN NVL (MEMBERSHIP.WELCOME_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.MIN_PRICE
                        ELSE
                           MEMBERSHIP.WELCOME_PRICE
                     END
                        WELCOME_SALE_PRICE,
                     CASE
                        WHEN NVL (MEMBERSHIP.WELCOME_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.POINT_SAVE_RATE
                        ELSE
                           MEMBERSHIP.POINT_SAVE_RATE
                     END
                        W_P_RATE,
                     CASE
                        WHEN NVL (MEMBERSHIP.WELCOME_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.DELIVERY_YN
                        ELSE
                           MEMBERSHIP.DELIVERY_YN
                     END
                        WELCOME_DELIVERY_FEE_FREE_YN,
                     CASE
                        WHEN NVL (MEMBERSHIP.WELCOME_PRICE, NOMAL.MIN_PRICE) >= NOMAL.MIN_PRICE
                        THEN
                           NOMAL.COUPON_ID
                        ELSE
                           MEMBERSHIP.WELCOME_COUPON_ID
                     END
                        WELCOME_COUPON_ID
                FROM    NOMAL_PRICE NOMAL
                     LEFT OUTER JOIN
                        (                                                       /* 멤버십 회원 등급별 최저가 */
                         SELECT *
                           FROM ((  SELECT PRODUCT_ID,
                                           GREATEST(SALE_PRICE - (MIN (NVL (DC_PRICE, 0)) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE DESC)),0) COUPON_PRICE,
                                           MIN (COUPON_ID) KEEP (DENSE_RANK FIRST ORDER BY DC_PRICE ASC) COUPON_ID,
                                           POINT_SAVE_RATE,
                                           DELIVERY_FEE_FREE_YN DELIVERY_YN,
                                           MEM_GRADE_CD
                                      FROM (SELECT I1.PRODUCT_ID,
                                                   DC_VALUE,
                                                   DC_APPLY_TYPE_CD,
		                                             CASE
		                                                WHEN     I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
		                                                     AND I2.MAX_DC_AMT > 0
		                                                THEN
		                                                   LEAST (ROUND (I1.SALE_PRICE * I2.DC_VALUE / 100, -1),
		                                                          I2.MAX_DC_AMT)
		                                                WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
		                                                THEN
		                                                   ROUND (I1.SALE_PRICE * I2.DC_VALUE / 100, -1)
		                                                WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.AMT'
		                                                THEN
		                                                   DC_VALUE
		                                             END
		                                                DC_PRICE,		                                                
	                                                   I2.COUPON_ID,
	                                                   I1.POINT_SAVE_RATE,
	                                                   I1.DELIVERY_FEE_FREE_YN,
	                                                   I1.MEM_GRADE_CD,
                                                       I1.SALE_PRICE
                                              FROM    (     /*멤버십 관 등급별 가격 */
                                                       SELECT   MIN ( SALE_PRICE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) SALE_PRICE,
                                                                MIN ( POINT_SAVE_RATE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) POINT_SAVE_RATE,
                                                                MIN ( DELIVERY_FEE_FREE_YN) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) DELIVERY_FEE_FREE_YN,
                                                                MIN ( COMMISSION_RATE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) COMMISSION_RATE,
                                                                PRODUCT_ID,
                                                                DEAL_TYPE_CD,
                                                                DEAL_ID,
                                                                MEM_GRADE_CD
                                                           FROM (SELECT DP.PRODUCT_ID, /* 멤버십 딜 가격 */
                                                                        DP.POINT_SAVE_RATE,
                                                                        DP.DELIVERY_FEE_FREE_YN,
                                                                        DP.INS_DT,
                                                                        DP.DEAL_PRODUCT_NO,
                                                                        DP.COMMISSION_RATE,
                                                                        DEAL.DEAL_TYPE_CD,
                                                                        DEAL.DEAL_ID,
                                                                        DM.MEM_GRADE_CD,
                                                                        GREATEST ( DP.SALE_PRICE - NVL ( DM.ADD_SALE_PRICE, 0), 0) SALE_PRICE
                                                                   FROM SPS_DEALMEMBER DM
                                                                        INNER JOIN SPS_DEALPRODUCT DP
                                                                           ON (    DM.STORE_ID = DP.STORE_ID
                                                                               AND DM.DEAL_ID = DP.DEAL_ID
                                                                               AND DM.DEAL_PRODUCT_NO = DP.DEAL_PRODUCT_NO)
                                                                        INNER JOIN SPS_DEAL DEAL
                                                                           ON (    DEAL.DEAL_ID = DP.DEAL_ID
                                                                               AND DEAL.STORE_ID = DP.STORE_ID
                                                                               AND DEAL.DEAL_TYPE_CD = 'DEAL_TYPE_CD.MEMBER'
                                                                               AND DEAL.DISPLAY_YN = 'Y')
                                                                        INNER JOIN PMS_PRODUCT PP
                                                                           ON (    DP.STORE_ID = PP.STORE_ID
                                                                               AND DP.PRODUCT_ID = PP.PRODUCT_ID)
                                                                  WHERE     DM.STORE_ID = '1001'
                                                                        AND DP.DISPLAY_YN = 'Y'
                                                                        AND SYSDATE BETWEEN DP.START_DT AND DP.END_DT
                                                                        AND DP.DEAL_STOCK_QTY > 0
                                                                        AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN')
                                                       GROUP BY PRODUCT_ID,
                                                                DEAL_ID,
                                                                DEAL_TYPE_CD,
                                                                MEM_GRADE_CD) I1
                                                   LEFT OUTER JOIN
                                                      (                                /* 딜적용 쿠폰  */
                                                       SELECT CP.*, CD.DEAL_ID
                                                         FROM    COUPON_PRODUCT CP
                                                              INNER JOIN
                                                                 SPS_COUPONDEAL CD
                                                              ON CP.COUPON_ID = CD.COUPON_ID
                                                        WHERE CP.DEAL_APPLY_YN = 'Y') I2
                                                  ON (I1.DEAL_ID = I2.DEAL_ID)
                                             WHERE    I1.COMMISSION_RATE >= 10
                                                   OR I2.FEE_LIMIT_APPLY_YN = 'Y')
                                  GROUP BY PRODUCT_ID,
                                           DC_PRICE,
                                           POINT_SAVE_RATE,
                                           DELIVERY_FEE_FREE_YN,
                                           COUPON_ID,
                                           MEM_GRADE_CD,
                                           SALE_PRICE) PIVOT (MIN (COUPON_PRICE) AS PRICE,
                                                               MIN (COUPON_ID) AS COUPON_ID
                                                         FOR MEM_GRADE_CD
                                                         IN  ('MEM_GRADE_CD.WELCOME' AS "WELCOME",
                                                             'MEM_GRADE_CD.FAMILY' AS "FAMILY",
                                                             'MEM_GRADE_CD.SILVER' AS "SILVER",
                                                             'MEM_GRADE_CD.GOLD' AS "GOLD",
                                                             'MEM_GRADE_CD.VIP' AS "VIP")))) MEMBERSHIP
                     ON (NOMAL.PRODUCT_ID = MEMBERSHIP.PRODUCT_ID));
END;
	</update>
	<resultMap id="getProductListByProductIdsResult" type="pmsProduct">
		<id property="productId" 		column="PRODUCT_ID" />
		<result property="salePrice" 	column="PRD_SALE_PRICE"/>
		<result property="name" 		column="NAME"/>
		<association property="pmsProductprice" javaType="pmsProductprice" resultMap="pmsProductpriceResult"/>
	</resultMap>		
	<resultMap id="pmsProductpriceResult" autoMapping="true" type="pmsProductprice">
		<id property="productId" 		column="PRODUCT_ID" />
	</resultMap>		
	<select id="getProductListByProductIds" resultMap="getProductListByProductIdsResult">
	/* [pms.product.getProductListByProductIds][eddie][2016. 8. 18.] */ 
		SELECT  PRD.PRODUCT_ID, 
		        PRD.SALE_PRICE PRD_SALE_PRICE, 
		        PRD.NAME, 
				PRICE.COUPON_ID,
				PRICE.DELIVERY_FEE_FREE_YN,
				PRICE.POINT_YN,
				PRICE.SALE_PRICE,
				PRICE.PRESTIGE_COUPON_ID,
				PRICE.PRESTIGE_DELIVERY_FEE_FREE_YN,
				PRICE.PRESTIGE_POINT_YN,
				PRICE.PRESTIGE_SALE_PRICE,
				PRICE.FAMILY_COUPON_ID,
				PRICE.FAMILY_DELIVERY_FEE_FREE_YN,
				PRICE.FAMILY_POINT_YN,
				PRICE.FAMILY_SALE_PRICE,
				PRICE.GOLD_COUPON_ID,
				PRICE.GOLD_DELIVERY_FEE_FREE_YN,
				PRICE.GOLD_POINT_YN,
				PRICE.GOLD_SALE_PRICE,
				PRICE.SILVER_COUPON_ID,
				PRICE.SILVER_DELIVERY_FEE_FREE_YN,
				PRICE.SILVER_POINT_YN,
				PRICE.SILVER_SALE_PRICE,
				PRICE.VIP_COUPON_ID,
				PRICE.VIP_DELIVERY_FEE_FREE_YN,
				PRICE.VIP_POINT_YN,
				PRICE.VIP_SALE_PRICE,
				PRICE.WELCOME_COUPON_ID,
				PRICE.WELCOME_DELIVERY_FEE_FREE_YN,
				PRICE.WELCOME_POINT_YN,
				PRICE.WELCOME_SALE_PRICE
		  FROM PMS_PRODUCT PRD 
	           INNER JOIN PMS_PRODUCTPRICE PRICE ON (PRICE.STORE_ID= '1001' AND PRICE.PRODUCT_ID = PRD.PRODUCT_ID)
         WHERE PRD.STORE_ID= '1001' 
               AND PRD.PRODUCT_ID IN
        	<foreach item="value" collection="list" open="(" separator="," close=")">
        		#{value}
        	</foreach> 
	</select>
	<update id="updateClob">
	/* [pms.product.updateClob][eddie][2016. 8. 18.] */ 
		UPDATE PMS_PRODUCT
		   SET DETAIL = #{detail,jdbcType=CLOB},
		       CLAIM_INFO = #{claimInfo,jdbcType=CLOB}
		 WHERE PRODUCT_ID = #{productId}
	</update>

	<select id="existProductCheck" resultType="int">
		SELECT COUNT(*)
		  FROM PMS_PRODUCT
		  WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId}
	</select>
	
	<resultMap id="getBrandBestProductResult" type="pmsProduct" autoMapping="true">
		<id property="productId" 		column="PRODUCT_ID" />
		<association property="pmsProductprice" javaType="pmsProductprice" resultMap="getProductPriceResult"/>
	</resultMap>		
	<resultMap id="getProductPriceResult" autoMapping="true" type="pmsProductprice">
		<id property="productId" 		column="PRODUCT_ID" />
	</resultMap>
	<!-- FO 브랜드관_ 브랜드별 베스트 상품 -->
	<select id="getBrandBestProduct" resultMap="getBrandBestProductResult">
		/* [pms.product.getBrandBestProduct][stella][2016. 10. 10.] */ 
		<include refid="ccs.common.pagingPre" />
		SELECT
			PS.PRODUCT_ID
			, PS.NAME
			, PRI.SALE_PRICE
			, PRI.DELIVERY_FEE_FREE_YN
			, PRI.POINT_YN
			, PRI.COUPON_ID
			, PRI.PRESTIGE_SALE_PRICE
			, PRI.PRESTIGE_DELIVERY_FEE_FREE_YN
			, PRI.PRESTIGE_POINT_YN
			, PRI.PRESTIGE_COUPON_ID
			, PRI.VIP_SALE_PRICE
			, PRI.VIP_DELIVERY_FEE_FREE_YN
			, PRI.VIP_POINT_YN
			, PRI.VIP_COUPON_ID
			, PRI.GOLD_SALE_PRICE
			, PRI.GOLD_DELIVERY_FEE_FREE_YN
			, PRI.GOLD_POINT_YN
			, PRI.GOLD_COUPON_ID
			, PRI.SILVER_SALE_PRICE
			, PRI.SILVER_DELIVERY_FEE_FREE_YN
			, PRI.SILVER_POINT_YN
			, PRI.SILVER_COUPON_ID
			, PRI.FAMILY_SALE_PRICE
			, PRI.FAMILY_DELIVERY_FEE_FREE_YN
			, PRI.FAMILY_POINT_YN
			, PRI.FAMILY_COUPON_ID
			, PRI.WELCOME_SALE_PRICE
			, PRI.WELCOME_DELIVERY_FEE_FREE_YN
			, PRI.WELCOME_POINT_YN
			, PRI.WELCOME_COUPON_ID
		  FROM
		  	PMS_PRODUCTPRICE PRI
		  	, (SELECT
		  			ROW_NUMBER() OVER(ORDER BY PS.ORDER_QTY DESC) AS RN
		  			, PS.PRODUCT_ID
		  			, P.NAME
		  		 FROM
		  		 	PMS_PRODUCT P
		  		 	JOIN PMS_PRODUCTSUMMARY PS
		  		 		ON PS.STORE_ID = P.STORE_ID
		  		 		AND PS.PRODUCT_ID = P.PRODUCT_ID
		  		 		<if test="brandId != null and brandId != ''">
		  		 			AND PS.UPD_DT &gt;= SYSDATE-7
		  		 		</if>
		  		 		<if test="brandId == null or brandId == ''">	<!-- 랭킹베스트 대체. 하루 -->
		  		 			AND PS.PRODUCT_ID IN (SELECT PRODUCT_ID
		  		 									FROM DMS_DISPLAYCATEGORYPRODUCT
		  		 								   WHERE STORE_ID = #{storeId}
		  		 								   		 AND DISPLAY_CATEGORY_ID IN (SELECT DISPLAY_CATEGORY_ID
		  		 								   		 							   FROM DMS_DISPLAYCATEGORY
		  		 								   		 							  WHERE STORE_ID = #{storeId}
		  		 								   		 							  		AND UPPER_DISPLAY_CATEGORY_ID = #{displayCategoryId}))
		  		 			AND PS.UPD_DT &gt;= SYSDATE-1
		  		 		</if>
		  		WHERE
		  			P.STORE_ID = #{storeId}
		  			<if test="brandId != null and brandId != ''">
		  				AND P.BRAND_ID = #{brandId}
		  			</if>
		  		ORDER BY
		  			PS.ORDER_QTY DESC) PS
		 WHERE
		 	PRI.STORE_ID = #{storeId}
		 	AND PRI.PRODUCT_ID = PS.PRODUCT_ID
		 	<if test="brandId != null and brandId != ''">
		 		AND PS.RN &lt;= 8
		 	</if>
		 	<if test="brandId == null or brandId == ''">	<!-- 랭킹베스트 대체. 하루 -->
		 		AND PS.RN &lt;= 50
		 	</if>
		<include refid="ccs.common.pagingPost" />		 	
	</select>
	<select id="getProductMaxImageNo" resultType="String">
		SELECT MAX (IMG_NO) + 1
		  FROM PMS_PRODUCTIMG
		 WHERE PRODUCT_ID = #{productId} AND STORE_ID=#{storeId}
	</select>
	
	<update id="updatePickupStock" parameterType="pmsOffshopstock" statementType="CALLABLE">
		{call
			DECLARE
					v_realStockQty INTEGER;
					v_return VARCHAR2(1000);
					v_msg VARCHAR2(1000);
					
			CURSOR data_cur IS
					SELECT REAL_STOCK_QTY 
			           FROM PMS_OFFSHOPSTOCK
			          WHERE STORE_ID = #{storeId} 
			          AND OFFSHOP_ID = #{offshopId}
			          AND SALEPRODUCT_ID = #{saleproductId}
			        FOR UPDATE OF REAL_STOCK_QTY WAIT 10;			         						        			 				
			 BEGIN
			       OPEN data_cur;
			       FETCH data_cur INTO v_realStockQty;
			       CLOSE data_cur;
			       
		       		IF #{stockMinus} = 'MINUS'
		       		   OR (#{realStockQty} &lt; 0 AND v_realStockQty &gt;= ABS(#{realStockQty}))	/* 재고차감 */
		       		   OR #{realStockQty} &gt;= 0 /* 재고증가 */
		       		THEN
		       			UPDATE PMS_OFFSHOPSTOCK
						   SET UPD_DT = SYSDATE
						      ,UPD_ID = #{updId}
						      ,REAL_STOCK_QTY = (REAL_STOCK_QTY + #{realStockQty})
						 WHERE STORE_ID = #{storeId}
						   AND SALEPRODUCT_ID = #{saleproductId}
						   AND OFFSHOP_ID = #{offshopId}						   
						   ;
						
						v_return := 'SUCCESS';
					ELSE v_return := 'FAIL';
						 v_msg := '재고수량이 부족합니다.';
					END IF;		
						
					#{result,jdbcType=VARCHAR,mode=OUT} := v_return;		
					#{msg,jdbcType=VARCHAR,mode=OUT} := v_msg;
										
			 END
		 }
	</update>
	<select id="getOffshopPickupYn" resultType="string">
	/* [pms.product.getOffshopPickupYn][eddie][2016. 10. 15.] */ 
		SELECT S1.SALEPRODUCT_ID
		  FROM PMS_SALEPRODUCT S1
		       INNER JOIN PMS_OFFSHOPSTOCK OS
		          ON S1.SALEPRODUCT_ID = OS.SALEPRODUCT_ID AND OS.STORE_ID = S1.STORE_ID
		       INNER JOIN CCS_OFFSHOP SHOP
		          ON     OS.OFFSHOP_ID = SHOP.OFFSHOP_ID
		             AND OS.STORE_ID = SHOP.STORE_ID
		             AND SHOP.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'
		             AND SHOP.OFFSHOP_PICKUP_YN = 'Y'
		 WHERE S1.PRODUCT_ID = #{productId} AND S1.STORE_ID = #{storeId} AND ROWNUM = 1 AND OS.REAL_STOCK_QTY > 0	
	</select>
	<select id="getMaxOffshopStockBySaleproduct" resultType="int">
	/* [pms.product.getMaxOffshopStockBySaleproduct][eddie][2016. 10. 15.] */ 
		SELECT MAX (REAL_STOCK_QTY)
		  FROM    PMS_OFFSHOPSTOCK STOCK
		       INNER JOIN
		          CCS_OFFSHOP SHOP
		       ON     SHOP.OFFSHOP_ID = STOCK.OFFSHOP_ID
		          AND SHOP.STORE_ID = STOCK.STORE_ID
		          AND STOCK.SALEPRODUCT_ID = #{saleproductId}
		          AND STOCK.REAL_STOCK_QTY > 0
		          AND SHOP.OFFSHOP_PICKUP_YN = 'Y'
		          AND SHOP.OFFSHOP_STATE_CD = 'OFFSHOP_STATE_CD.RUN'	
	</select>
	<select id="getDisplayCategoryIdPathOfProduct" resultType="string">
	/* [pms.product.getDisplayCategoryIdPathOfProduct][eddie][2016. 10. 15.] */ 
		SELECT CATEPATH
		  FROM (    SELECT LTRIM (SYS_CONNECT_BY_PATH (DISPLAY_CATEGORY_ID, ','), ',') CATEPATH, LEVEL
		              FROM DMS_DISPLAYCATEGORY
		             WHERE STORE_ID = '1001'
		        START WITH UPPER_DISPLAY_CATEGORY_ID = '00001'
		        CONNECT BY PRIOR DISPLAY_CATEGORY_ID = UPPER_DISPLAY_CATEGORY_ID AND LEVEL &lt;= 3) I1,
<if test="displayCategoryId!=null and displayCategoryId!=''">
				(SELECT #{displayCategoryId} DISPLAY_CATEGORY_ID FROM DUAL) I2
</if>		        
<if test="displayCategoryId==null or displayCategoryId==''">		        
		       (SELECT T2.DISPLAY_CATEGORY_ID
		          FROM DMS_DISPLAYCATEGORYPRODUCT T1, DMS_DISPLAYCATEGORY T2
		         WHERE     T1.PRODUCT_ID = #{productId}
		               AND T1.DISPLAY_CATEGORY_ID = T2.DISPLAY_CATEGORY_ID
		               AND T2.DISPLAY_YN = 'Y') I2
</if>		               
		 WHERE I1.CATEPATH LIKE '%' || I2.DISPLAY_CATEGORY_ID || '%' AND ROWNUM = 1		
	</select>
	<select id="getCategoryListByUpper" resultType="dmsDisplayCategory">
	/* [pms.product.getCategoryListByUpper][eddie][2016. 10. 15.] */ 
		SELECT DISPLAY_CATEGORY_ID, NAME, UPPER_DISPLAY_CATEGORY_ID
		  FROM DMS_DISPLAYCATEGORY
		 WHERE UPPER_DISPLAY_CATEGORY_ID = #{displayCategoryId} AND STORE_ID = #{storeId}
	</select>
 </mapper>
