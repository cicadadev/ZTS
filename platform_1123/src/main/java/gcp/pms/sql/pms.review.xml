<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pms.review">


	<resultMap type="pmsReview" id="getProductReviewListResult" autoMapping="true">
		<id property="storeId" 					column="STORE_ID"/>
		<id property="productId" 				column="PRODUCT_ID"/>
		<id property="reviewNo" 				column="REVIEW_NO"/>
		<association property="pmsProduct" javaType="pmsProduct">
			<id property="productId" 				column="PRODUCT_ID"/>
			<result property="name" 				column="PRODUCT_NAME"/>
		</association>
		<association property="mmsMember" javaType="mmsMember">
			<id property="memberNo" 					column="MEMBER_NO"/>
			<result property="memberId" 				column="MEMBER_ID"/>
			<result property="memberName" 				column="MEMBER_NAME"/>
		</association>
	</resultMap>
	<select id="getProductReviewList" resultMap="getProductReviewListResult">
		/* [pms.review.getProductReviewList][emily][2016. 6. 11] */
		<include refid="ccs.common.pagingPre" />
		SELECT R1.REVIEW_NO,
		       R1.TITLE,
		       R1.PRODUCT_ID,
		       P1.NAME PRODUCT_NAME,
		       R1.SALEPRODUCT_ID,
		       R1.MEMBER_NO,
		       M1.MEMBER_ID,
		       M1.MEMBER_NAME,
		       O1.ORDER_DT,
		       R1.DISPLAY_YN,
		       R1.BEST_YN,
		       R1.RATING,
		       R1.INS_DT,
		       R1.UPD_DT,
		       R1.UPD_ID,
		       R1.STORE_ID
		  FROM PMS_REVIEW R1
		       INNER JOIN PMS_PRODUCT P1
		          ON P1.PRODUCT_ID = R1.PRODUCT_ID AND P1.STORE_ID = R1.STORE_ID
		       INNER JOIN MMS_MEMBER M1
		          ON M1.MEMBER_NO = R1.MEMBER_NO
		       LEFT OUTER JOIN OMS_ORDER O1
		          ON O1.ORDER_ID = R1.ORDER_ID AND O1.STORE_ID = R1.STORE_ID
		 WHERE     R1.INS_DT BETWEEN TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
		                         AND TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
		       AND R1.STORE_ID = #{storeId}
		    <if test="displayYn !=null and displayYn!=''">   
		       AND R1.DISPLAY_YN = #{displayYn}
		    </if>   
 		    <if test="memberId !=null and memberId!=''">   
		       AND M1.MEMBER_ID = #{memberId}
		    </if>
		    <if test="memberNo !=null and memberNo!=''">   
		       AND M1.MEMBER_NO = #{memberNo}
		    </if>
			<if test="productId !=null and productId!=''">
		       AND R1.PRODUCT_ID = #{productId}	
			</if>
	     ORDER BY R1.INS_DT DESC	
	   <include refid="ccs.common.pagingPost"/>
	</select>
	
	<resultMap type="pmsReview" id="getPrdReviewDetailResult" autoMapping="true">
		<id property="storeId" 						column="STORE_ID"/>
		<id property="productId" 					column="PRODUCT_ID"/>
		<association property="pmsProduct" 	javaType="pmsProduct">
			<result property="name" 				column="PRD_NAME"/>
			<result	property="categoryId" 			column="CATEGORY_ID"/>
		</association>
		<collection property="pmsReviewratings" 	ofType="gcp.pms.model.PmsReviewrating" >
			<result property="ratingId"				column="RATING_ID"/>
			<result property="rating"				column="RATING_SCORE"/>
			<result property="ratingName"			column="RATING_NAME"/>
	    </collection>
	</resultMap>
	<select id="getPrdReviewDetail" resultMap="getPrdReviewDetailResult">
		/* [pms.review.getPrdReviewDetail][roy][2016. 8. 3] */
			SELECT VI.BEST_YN,
                   VI.DETAIL, 
                   VI.DISPLAY_YN, 
                   VI.INS_DT, 
                   VI.INS_ID, 
                   VI.MEMBER_NO,
                   VI.REVIEW_NO,        
                   VI.TITLE,
                   VI.UPD_DT, 
                   VI.UPD_ID,
                   VI.RATING,
                   VI.ORDER_ID,
                   VI.PRODUCT_ID,
                   VI.SALEPRODUCT_ID,
                   VI.IMG1,
                   VI.IMG2,
                   VI.IMG3,
                   PR.NAME AS PRODUCT_NAME,
				   PS.NAME AS SALEPRODUCT_NAME,
                   VI.STORE_ID,
                   PR.NAME AS PRD_NAME,
                   PR.PRODUCT_TYPE_CD,
                   PC.CATEGORY_ID,
                   PCR.RATING_ID 	AS RATING_ID,
                   PCR.NAME 		AS RATING_NAME,
                   PRR.RATING 		AS RATING_SCORE,
                   MBR.MEMBER_NAME,
		       	   MBR.MEMBER_ID,
		       	   MBR.MEMBER_NAME || '(' || MBR.MEMBER_ID || ')' MEMBERINFO
              FROM	PMS_REVIEW VI	
             		LEFT OUTER JOIN	OMS_ORDER O
              							ON VI.ORDER_ID = O.ORDER_ID AND VI.STORE_ID = O.STORE_ID
              		LEFT OUTER JOIN PMS_SALEPRODUCT PS
              							ON VI.SALEPRODUCT_ID = PS.SALEPRODUCT_ID AND VI.STORE_ID = PS.STORE_ID
              		LEFT OUTER JOIN	PMS_PRODUCT PR
              							ON  VI.PRODUCT_ID = PR.PRODUCT_ID AND VI.STORE_ID = PR.STORE_ID
              		LEFT OUTER JOIN	PMS_CATEGORY PC
       									ON PR.CATEGORY_ID = PC.CATEGORY_ID AND VI.STORE_ID = PC.STORE_ID
       				LEFT OUTER JOIN PMS_CATEGORYRATING PCR
       									ON PCR.CATEGORY_ID = PC.CATEGORY_ID AND PC.STORE_ID = PCR.STORE_ID
       				LEFT OUTER JOIN	PMS_REVIEWRATING PRR
       									ON PCR.RATING_ID = PRR.RATING_ID AND VI.STORE_ID = PRR.STORE_ID  AND PRR.REVIEW_NO = VI.REVIEW_NO
       				LEFT OUTER JOIN MMS_MEMBER MBR
		          		ON MBR.MEMBER_NO = VI.MEMBER_NO
              
              WHERE  VI.STORE_ID = #{storeId}
              <if test="reviewNo != null and reviewNo != ''">
              		AND VI.REVIEW_NO = #{reviewNo}
              </if>
              <if test="productId != null and productId != ''">
	          		AND VI.PRODUCT_ID = #{productId}
              </if>
	</select>	
	<resultMap type="pmsReview" id="getProductReviewListByProductIdResult" autoMapping="true">
		<id property="storeId" 						column="STORE_ID"/>
		<id property="productId" 					column="PRODUCT_ID"/>
		<id property="reviewNo" 					column="REVIEW_NO"/>
		<id property="memberId"						column="MEMBER_ID"/>
		<id property="categoryId"						column="CATEGORY_ID"/>
		<collection property="pmsReviewratings" 	ofType="pmsReviewrating" >
			<id property="ratingId"					column="RATING_ID"/>
			<result property="rating"					column="RATING_SCORE"/>
			<result property="ratingName"				column="RATING_NAME"/>
	    </collection>
	</resultMap>	
	<select id="getProductReviewListByProductId" resultMap="getProductReviewListByProductIdResult">
		SELECT I2.*,
		       CTT.RATING_ID,
		       CTT.RATING_NAME,
		       RR.RATING RATING_SCORE,
		       (SELECT MEMBER_ID
		          FROM MMS_MEMBER M
		         WHERE M.MEMBER_NO = I2.MEMBER_NO)
		          MEMBER_ID	
		       ,(SELECT NAME FROM PMS_PRODUCT     WHERE I2.PRODUCT_ID = PMS_PRODUCT.PRODUCT_ID AND PMS_PRODUCT.STORE_ID = I2.STORE_ID) as PRODUCT_NAME
               ,(SELECT NAME FROM PMS_SALEPRODUCT WHERE I2.SALEPRODUCT_ID = PMS_SALEPRODUCT.SALEPRODUCT_ID AND PMS_SALEPRODUCT.STORE_ID = I2.STORE_ID) as SALEPRODUCT_NAME
               ,(SELECT IMG  FROM PMS_PRODUCTIMG  WHERE I2.PRODUCT_ID = PMS_PRODUCTIMG.PRODUCT_ID AND PMS_PRODUCTIMG.IMG_NO = '0' AND PMS_PRODUCTIMG.STORE_ID = I2.STORE_ID) as PRODUCT_URL
               ,(SELECT CATEGORY_ID FROM PMS_PRODUCT  WHERE I2.PRODUCT_ID = PMS_PRODUCT.PRODUCT_ID AND PMS_PRODUCT.STORE_ID = I2.STORE_ID) as CATEGORY_ID
		  FROM (	
			<include refid="ccs.common.pagingPre" />
			SELECT II.*
			FROM(	
			  SELECT RV.*
				  	, CASE
			          WHEN RV.IMG1 IS NOT NULL OR RV.IMG2 IS NOT NULL OR RV.IMG3 IS NOT NULL 
			          THEN 'Y'
			          ELSE 'N' END IMG_YN
			        , CASE
			          WHEN RV.EVENT_ID IS NOT NULL
			          THEN 'Y'
			          ELSE 'N' END PERMIT_YN
			    FROM PMS_REVIEW RV
			   WHERE RV.STORE_ID = #{storeId} AND RV.PRODUCT_ID =  #{productId} AND RV.DISPLAY_YN = 'Y'
		   ) II
       
	       WHERE 1=1
	       <if test="imgYn != null and imgYn != ''">
					AND II.IMG_YN = #{imgYn}
			</if>
			<if test="permitYn != null and permitYn != ''">
				AND II.PERMIT_YN = #{permitYn}
			</if>
			ORDER BY 
	       <choose>
	           <when test="orderBy != null and orderBy == '02'">		   
			   II.RATING DESC, II.REVIEW_NO DESC
			   </when>
			   <when test="orderBy != null and orderBy == '03'">
			   II.RATING ASC, II.REVIEW_NO DESC
			   </when>
			   <otherwise>
			   II.REVIEW_NO DESC
			   </otherwise>
			</choose>  
			
	       
			<include refid="ccs.common.pagingPost"/>
			) I2
		LEFT OUTER JOIN PMS_REVIEWRATING RR
          ON (    I2.REVIEW_NO = RR.REVIEW_NO
              AND I2.PRODUCT_ID = RR.PRODUCT_ID
              AND I2.STORE_ID = RR.STORE_ID)
       LEFT OUTER JOIN (SELECT CR.RATING_ID, CR.NAME RATING_NAME, PP.PRODUCT_ID
                          FROM    PMS_PRODUCT PP
                               INNER JOIN
                                  PMS_CATEGORYRATING CR
                               ON PP.CATEGORY_ID = CR.CATEGORY_ID AND PP.STORE_ID = CR.STORE_ID
                         WHERE PP.PRODUCT_ID = #{productId} AND PP.STORE_ID = #{storeId}) CTT
          ON RR.RATING_ID = CTT.RATING_ID				
	</select>
	<select id="getProductReviewAvg" resultType="java.lang.Integer">
		SELECT /* [pms.review.getProductReviewAvg][eddie][2016. 8. 3] */  
		        NVL (AVG (RV.RATING), 0) RATING
		  FROM PMS_REVIEW RV
		 WHERE RV.DISPLAY_YN = 'Y' AND RV.PRODUCT_ID = #{productId} AND RV.STORE_ID = #{storeId}
	</select>
	<select id="getProductReviewAvgByRatingId" resultType="pmsReview">
		SELECT /* [pms.review.getProductReviewAvgByRatingId][eddie][2016. 8. 3] */ 
		        NVL(RATING_ID_AVG, 0) RATING_ID_AVG, RATINGS.RATING_ID, CTT.RATING_NAME
		  FROM    (  SELECT AVG (RATING) RATING_ID_AVG, RATING_ID
		               FROM (SELECT RR.RATING_ID, RR.RATING, RR.REVIEW_NO
		                       FROM    PMS_REVIEWRATING RR
		                            INNER JOIN
		                               PMS_REVIEW RV
		                            ON (    RR.REVIEW_NO = RV.REVIEW_NO
		                                AND RR.PRODUCT_ID = RV.PRODUCT_ID
		                                AND RR.STORE_ID = RV.STORE_ID and rv.DISPLAY_YN = 'Y')
		                      WHERE RR.PRODUCT_ID = #{productId} AND RR.STORE_ID = #{storeId})
		           GROUP BY RATING_ID) RATINGS
		       INNER JOIN
		          (SELECT CR.RATING_ID, CR.NAME RATING_NAME, PP.PRODUCT_ID
		             FROM    PMS_PRODUCT PP
		                  INNER JOIN
		                     PMS_CATEGORYRATING CR
		                  ON PP.CATEGORY_ID = CR.CATEGORY_ID AND PP.STORE_ID = CR.STORE_ID
		            WHERE PP.PRODUCT_ID = #{productId} AND PP.STORE_ID = #{storeId}) CTT
		       ON RATINGS.RATING_ID = CTT.RATING_ID
	</select>
	
	<resultMap type="omsOrderproduct" id="getReviewAbleProductResult" autoMapping="true">
		<id property="storeId" 						column="STORE_ID"/>
		<id property="orderId" 						column="ORDER_ID"/>
		<id property="orderProductNo" 				column="ORDER_PRODUCT_NO"/>
		<id property="productId" 					column="PRODUCT_ID"/>
		<id property="productName" 					column="PRODUCT_NAME"/>
		<id property="saleproductId" 				column="SALEPRODUCT_ID"/>
		<id property="saleproductName" 				column="SALEPRODUCT_NAME"/>
		<result property="orderDt" 					column="ORDER_DATE"/>
		<result property="imgUrl"					column="IMG_URL"/>
		<result property="reviewAbleDt"				column="REVIEW_ABLE_DT"/>
	</resultMap>	

	<select id="getReviewAbleProductlist" resultMap="getReviewAbleProductResult">
	/* [pms.review.getReviewAbleProductlist][roy][2016. 9. 12] */
		<include refid="ccs.common.pagingPre" />
		SELECT OO.ORDER_ID,
               TO_CHAR (OO.ORDER_DT, 'YYYY/MM/DD') as ORDER_DATE,
               TO_CHAR (OO.INS_DT + '90', 'YYYY/MM/DD') as REVIEW_ABLE_DT,
               OP.PRODUCT_ID,
               OP.PRODUCT_NAME,
               PS.SALEPRODUCT_ID,
               PS.NAME AS SALEPRODUCT_NAME,
               PI.IMG AS IMG_URL
		  FROM OMS_ORDER OO
		       INNER JOIN MMS_MEMBER_ZTS MMZ
		          ON MMZ.MEMBER_NO = OO.MEMBER_NO AND MMZ.STORE_ID = OO.STORE_ID
		       INNER JOIN OMS_ORDERPRODUCT OP
		          ON OP.ORDER_ID = OO.ORDER_ID AND OP.ORDER_PRODUCT_TYPE_CD != 'ORDER_PRODUCT_TYPE_CD.SUB'
		       INNER JOIN PMS_SALEPRODUCT PS
		          ON     PS.SALEPRODUCT_ID = OP.SALEPRODUCT_ID
		             AND PS.STORE_ID = OP.STORE_ID
		       INNER JOIN PMS_PRODUCT PP
		          ON     PP.PRODUCT_ID = PS.PRODUCT_ID
		             AND PP.STORE_ID = PS.STORE_ID
		             AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
		       LEFT OUTER JOIN PMS_PRODUCTIMG PI
		          ON     PI.PRODUCT_ID = PP.PRODUCT_ID
		             AND PI.STORE_ID = PP.STORE_ID
		             AND PI.IMG_NO = #{imgNo}
		 WHERE     OO.STORE_ID = #{storeId}
		       AND OO.MEMBER_NO = #{memberNo}
		       AND OO.ORDER_STATE_CD != 'ORDER_STATE_CD.CANCEL'
		       AND OO.ORDER_DELIVERY_STATE_CD in ('ORDER_DELIVERY_STATE_CD.DELIVERY', 'ORDER_DELIVERY_STATE_CD.SHIP')
               AND OO.INS_DT + '90' &gt;= SYSDATE
               AND (OO.ORDER_ID, OP.PRODUCT_ID) NOT IN (SELECT ORDER_ID, PRODUCT_ID FROM PMS_REVIEW WHERE MEMBER_NO = #{memberNo}
               																	AND ORDER_ID IS NOT NULL AND PRODUCT_ID IS NOT NULL)
               AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
         GROUP BY OO.ORDER_ID, OO.ORDER_DT, OP.PRODUCT_ID, OP.PRODUCT_NAME, OO.INS_DT, PS.SALEPRODUCT_ID, PS.NAME, PI.IMG
         ORDER BY OO.ORDER_DT DESC, OO.ORDER_ID
         <include refid="ccs.common.pagingPost"/>
	</select>
	
	<select id="getReviewNo" parameterType="pmsReview" resultType="java.math.BigDecimal">
		/* [ccs.review.getReviewNo][roy][2016. 9. 13.] */
		SELECT NVL (REVIEW_NO, 1) REVIEW_NO FROM (SELECT MAX (TO_NUMBER (REVIEW_NO)) REVIEW_NO
          	FROM PMS_REVIEW  WHERE STORE_ID = #{storeId} AND PRODUCT_ID = #{productId}) DUAL
	</select>
	
	<select id="getReviewIdList" resultType="pmsCategoryrating">
		/* [ccs.review.getReviewIdList][roy][2016. 9. 13.] */
		SELECT PC.RATING_ID, PC.NAME
		<if test='reviewNo != null and reviewNo != ""'>
				, PR.RATING			
		</if>
		<if test='reviewNo == null or reviewNo == ""'>
				, 5 as RATING
		</if>
		  FROM PMS_CATEGORYRATING PC 
		<if test='reviewNo != null and reviewNo != ""'>
				LEFT OUTER JOIN PMS_REVIEWRATING PR ON PC.STORE_ID = PR.STORE_ID AND PC.RATING_ID = PR.RATING_ID  AND PR.PRODUCT_ID = #{productId} AND PR.REVIEW_NO = #{reviewNo}
		</if>
		  	WHERE PC.CATEGORY_ID = (SELECT CATEGORY_ID
	                        FROM PMS_PRODUCT
	                       WHERE PRODUCT_ID = #{productId} AND STORE_ID = #{storeId})  
            ORDER BY PC.SORT_NO
			
	                      
	</select>
	
	<select id="getProductReviewListByMemberNo" resultMap="getProductReviewListByProductIdResult">
		/* [ccs.review.getProductReviewListByMemberNo][roy][2016. 9. 13.] */
		SELECT I2.*,
		       CTT.RATING_ID,
		       CTT.RATING_NAME,
		       RR.RATING RATING_SCORE,
		       (SELECT MEMBER_ID
		          FROM MMS_MEMBER M
		         WHERE M.MEMBER_NO = I2.MEMBER_NO)
		          MEMBER_ID
		       , TO_CHAR (O1.ORDER_DT, 'YYYY/MM/DD') as ORDER_DT
		       ,(SELECT NAME FROM PMS_PRODUCT     WHERE I2.PRODUCT_ID = PMS_PRODUCT.PRODUCT_ID AND PMS_PRODUCT.STORE_ID = I2.STORE_ID) as PRODUCT_NAME
               ,(SELECT NAME FROM PMS_SALEPRODUCT WHERE I2.SALEPRODUCT_ID = PMS_SALEPRODUCT.SALEPRODUCT_ID AND PMS_SALEPRODUCT.STORE_ID = I2.STORE_ID) as SALEPRODUCT_NAME
               ,(SELECT IMG  FROM PMS_PRODUCTIMG  WHERE I2.PRODUCT_ID = PMS_PRODUCTIMG.PRODUCT_ID AND PMS_PRODUCTIMG.IMG_NO = '0' AND PMS_PRODUCTIMG.STORE_ID = I2.STORE_ID) as PRODUCT_URL
               		       
		  FROM (
			<include refid="ccs.common.pagingPre" />
			SELECT II.*
			FROM(	
			  SELECT RV.*
				  	, CASE
			          WHEN RV.IMG1 IS NOT NULL OR RV.IMG2 IS NOT NULL OR RV.IMG3 IS NOT NULL 
			          THEN 'Y'
			          ELSE 'N' END IMG_YN
			    FROM PMS_REVIEW RV
			   WHERE RV.STORE_ID = #{storeId} AND RV.MEMBER_NO = #{memberNo} AND RV.DISPLAY_YN = 'Y'
		   			<if test='startDate != null and startDate != ""' >
						<if test='endDate != null and endDate != ""'>
							AND RV.INS_DT BETWEEN TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
			                         AND TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')	   
						</if>
					</if>
		   ) II
       
	       	WHERE 1=1
	       	<if test="imgYn != null and imgYn != ''">
				AND II.IMG_YN = #{imgYn}
			</if>
			ORDER BY II.INS_DT DESC
			<include refid="ccs.common.pagingPost"/>
			) I2
			LEFT OUTER JOIN PMS_REVIEWRATING RR
			          ON (    I2.REVIEW_NO = RR.REVIEW_NO
			              AND I2.PRODUCT_ID = RR.PRODUCT_ID
			              AND I2.STORE_ID = RR.STORE_ID)
	        LEFT OUTER JOIN (SELECT CR.RATING_ID, CR.NAME RATING_NAME, PP.PRODUCT_ID
	                     FROM    PMS_PRODUCT PP
	                          INNER JOIN PMS_CATEGORYRATING CR
	                          ON  PP.CATEGORY_ID = CR.CATEGORY_ID AND PP.STORE_ID = CR.STORE_ID
	                    		WHERE PP.STORE_ID = #{storeId}) CTT
	                  ON RR.RATING_ID = CTT.RATING_ID AND I2.PRODUCT_ID = CTT.PRODUCT_ID
	      	LEFT OUTER JOIN OMS_ORDER O1
                        ON O1.ORDER_ID = I2.ORDER_ID AND O1.STORE_ID = I2.STORE_ID
     </select>
     
     <delete id="deleteReviewrating" parameterType="pmsReviewrating">
		/* [pms.review.deleteReviewrating][roy][2016. 9. 13.] */
			DELETE FROM PMS_REVIEWRATING 
			WHERE STORE_ID = #{storeId} 
				AND PRODUCT_ID = #{productId}
				AND REVIEW_NO = #{reviewNo}
	</delete>
	
	<select id="getProductReviewCountByMemberNo" resultType="pmsReview">
		/* [ccs.review.getProductReviewCountByMemberNo][roy][2016. 9. 19.] */
		SELECT 	COUNT(*) AS CNT_ALL 
				, count(case when IMG_YN = 'Y' then 1 end) CNT_IMG_Y
				, count(case when IMG_YN = 'N' then 1 end) CNT_IMG_N
				, count(case when PERMIT_YN = 'Y' then 1 end) CNT_Permit_Y
		FROM (SELECT RV.REVIEW_NO, RV.PRODUCT_ID, 
               CASE
                  WHEN    RV.IMG1 IS NOT NULL
                       OR RV.IMG2 IS NOT NULL
                       OR RV.IMG3 IS NOT NULL
                  THEN
                     'Y'
                  ELSE
                     'N'
               END
                  IMG_YN
               , CASE
		          WHEN RV.EVENT_ID IS NOT NULL
		          THEN 'Y'
		          ELSE 'N' END PERMIT_YN
          FROM PMS_REVIEW RV
		       LEFT OUTER JOIN PMS_REVIEWRATING RR
		          ON (    RV.REVIEW_NO = RR.REVIEW_NO
		              AND RV.PRODUCT_ID = RR.PRODUCT_ID
		              AND RV.STORE_ID = RR.STORE_ID)
		       LEFT OUTER JOIN (SELECT CR.RATING_ID, CR.NAME RATING_NAME, PP.PRODUCT_ID
		                     FROM    PMS_PRODUCT PP
		                          INNER JOIN
		                             PMS_CATEGORYRATING CR
		                          ON     PP.CATEGORY_ID = CR.CATEGORY_ID
		                             AND PP.STORE_ID = CR.STORE_ID
		                    WHERE PP.STORE_ID = #{storeId}) CTT
		          ON RR.RATING_ID = CTT.RATING_ID AND RV.PRODUCT_ID = CTT.PRODUCT_ID
		         WHERE RV.STORE_ID = #{storeId} AND RV.DISPLAY_YN = 'Y'
		         			<if test='memberNo != null and memberNo != ""'>
								 AND RV.MEMBER_NO = #{memberNo}    
							</if>
							<if test='productId != null and productId != ""'>
								 AND RV.PRODUCT_ID = #{productId}    
							</if>
			               <if test='startDate != null and startDate != ""' >
								<if test='endDate != null and endDate != ""'>
									AND RV.INS_DT BETWEEN TO_DATE (#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
					                         AND TO_DATE (#{endDate}, 'YYYY-MM-DD HH24:MI:SS')	   
								</if>
							</if>
                GROUP BY RV.REVIEW_NO, RV.PRODUCT_ID, RV.IMG1, RV.IMG2, RV.IMG3, RV.EVENT_ID)
     </select>
     
     <sql id="pms.review.getFirstProductReview">
		SELECT COUNT(*)
		  FROM PMS_REVIEW
		  WHERE STORE_ID = #{storeId}
			   AND ORDER_ID = #{orderId}
			   AND MEMBER_NO = #{memberNo}
	</sql>
	<sql id="pms.review.getFirstReview">
		SELECT COUNT(*)
		  FROM PMS_REVIEW
		  WHERE STORE_ID = #{storeId}
			   AND PRODUCT_ID = #{productId}			   
	</sql>
	
	<sql id="pms.review.getExistReview">
		SELECT COUNT(*)
		  FROM PMS_REVIEW
		  WHERE STORE_ID = #{storeId}
			   AND PRODUCT_ID = #{productId}
			   AND ORDER_ID = #{orderId}			   
	</sql>
	
	<select id="getFirstReview" resultType="int">
	/* [pms.review.getFirstReview][roy][2016. 9. 19.] */
		<if test="searchType=='PRODUCT'">
			<include refid="pms.review.getFirstProductReview"/>
		</if>
		<if test="searchType=='ORDER'">
			<include refid="pms.review.getFirstReview"/>
	  	</if>
	  	<if test="searchType=='EXIST'">
			<include refid="pms.review.getExistReview"/>
	  	</if>
	</select>
	
	<update id="updateClob">
	/* [pms.review.updateClob][roy][2016. 9. 27.] */ 
		UPDATE PMS_REVIEW
		   SET STORE_ID = #{storeId}
		   <if test='detail != null and detail != ""'>
		   		, DETAIL = #{detail,jdbcType=CLOB}
		   </if>
		 WHERE REVIEW_NO = #{reviewNo} AND STORE_ID = #{storeId} AND PRODUCT_ID = #{productId}
	</update>
	<select id="gerPointTargetFirstReviews" resultType="pmsReview">
	/* [pms.review.gerFirstReviews][eddie][2016. 10. 15.] */ 
		SELECT I1.*
		  FROM (SELECT PRODUCT_ID,
		               REVIEW_NO,
		               MEMBER_NO,
		               PRD_COUNT,
		               ORDER_ID
		          FROM (SELECT PRODUCT_ID,
		                       REVIEW_NO,
		                       MEMBER_NO,
		                       COUNT (1) OVER (PARTITION BY PRODUCT_ID) PRD_COUNT,
		                       ORDER_ID
		                  FROM PMS_REVIEW
		                 WHERE EVENT_ID IS NULL AND STORE_ID = '1001')
		         WHERE PRD_COUNT = 1) I1,
		       PMS_REVIEW I2
		 WHERE     I1.REVIEW_NO = I2.REVIEW_NO
		       AND I1.PRODUCT_ID = I2.PRODUCT_ID
		       AND I2.BENEFIT_DT IS NULL
		       AND LENGTH (I2.DETAIL) > 100	 
	</select>
	<select id="selectPointTarget" resultType="pmsReview">
	/* [pms.review.selectPointTarget][eddie][2016. 10. 15.] */ 
		SELECT PRODUCT_ID, REVIEW_NO, 
		       IMG1, 
		       MEMBER_NO
		  FROM PMS_REVIEW
		 WHERE LENGTH (DETAIL) > 50 AND STORE_ID = #{storeId}
		   AND BENEFIT_DT IS NULL
	</select>	
</mapper>
