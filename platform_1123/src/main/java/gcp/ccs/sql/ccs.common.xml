<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ccs.common">

	<select id="selectOneTable" resultType="java.util.HashMap">
		${query}
	</select>
	
	<select id="getDbSequence" resultType="string">
		${query}
	</select>
	
	<insert id="insertOneTable">
		${query}
		<selectKey keyProperty="key" resultType="string" order="AFTER">
			<if test='key != null and key != ""'>
				${selectMax}
			</if>
			<if test='key == null or key == ""'>
				select 1 from dual
			</if>
		</selectKey>
	</insert>
	
	<update id="updateOneTable">
		${query}
	</update>	
	<delete id="deleteOneTable">
		${query}
	</delete>

	<sql id="pagingPre">
		<if test='pagingYn != "N"'>
	        SELECT
	            T2.*
	        FROM(
	            SELECT
	                ROWNUM AS RNUM
	                , COUNT(*) OVER () AS TOTAL_COUNT
	                , T1.*
	            FROM( 
		</if> 
	</sql>

	<sql id="pagingPost">
        <if test='pagingYn != "N"'>
        	<if test="sort != null and sort != ''">
	    		<trim prefix="ORDER BY">
	    			${sort} ${direction}
	    		</trim>
	    	</if>
	            ) T1
	        ) T2
	        <if test='firstRow!=null and firstRow!=""'>
	        WHERE T2.RNUM BETWEEN #{firstRow} AND #{lastRow}
	        </if>
        </if>
	</sql>
	
	<resultMap id="ccsFieldResult" autoMapping="true" type="gcp.ccs.model.base.BaseCcsField">
		<id property="fieldCd" column="FIELD_CD"/>
	    <collection property="ccsFieldlangs"  ofType="gcp.ccs.model.CcsFieldlang" >
	    	<id property="langCd" column="LANG_CD"/>
	    	<id property="fieldCd" column="FIELD_CD"/>
	    	<result property="msg" column="LANG_MSG"/>
	    </collection>
	</resultMap>
	<select id="getCcsField" resultMap="ccsFieldResult">
		SELECT a.*, B.LANG_CD, B.MSG LANG_MSG
		  FROM CCS_FIELD a, CCS_FIELDLANG b
		 WHERE A.FIELD_CD = B.FIELD_CD(+)
	</select>
	
	<resultMap id="mssageAllInfoResult" autoMapping="true" type="intune.gsf.model.Message">
		<id property="msgCd" column="msg_cd"/>
	    <collection property="messagelangs" notNullColumn="msg_cd" ofType="intune.gsf.model.Messagelang" >
	    	<id property="langCd" column="lang_cd"/>
	    	<id property="msgCd" column="msg_cd"/>
	    	<result property="msg" column="lang_msg"/>
	    </collection>
	</resultMap>
	<select id="getMessageAllInfo" resultMap="mssageAllInfoResult">
		SELECT a.*, b.msg lang_msg, b.lang_cd
		  FROM ccs_message a, ccs_messagelang b
		 WHERE a.msg_cd = b.msg_cd
	</select>
	
	<resultMap id="codeListAllResult" autoMapping="true" type="gcp.ccs.model.base.BaseCcsCodegroup">
		<id property="cdGroupCd" column="cd_group_cd"/>
	    <collection property="ccsCodes" notNullColumn="cd" ofType="gcp.ccs.model.CcsCode" >
	    	<id property="cdGroupCd" column="cd_group_cd"/>
	    	<id property="cd" column="cd"/>
	    	<result property="name" column="cd_name"/>
	    	<result property="sortNo" column="sort_no"/>
	    	<result property="note" column="CD_NOTE"/>
			<collection property="ccsCodelangs" ofType="gcp.ccs.model.CcsCodelang" >
		    	<id property="langCd" column="lang_cd"/>
		    	<id property="cd" column="cd"/>
		    	<result property="name" column="lang_name"/>
		    </collection>	    	
	    </collection>
	</resultMap>
	<select id="getCodeListAll" resultMap="codeListAllResult">
		  SELECT A.*,
		         B.CD,
		         B.NAME CD_NAME,
		         B.NOTE AS CD_NOTE,
		         B.SORT_NO,
		         C.LANG_CD,
		         C.NAME AS LANG_NAME
		    FROM CCS_CODEGROUP A, CCS_CODE B, CCS_CODELANG C
		   WHERE A.CD_GROUP_CD = B.CD_GROUP_CD AND B.CD = C.CD(+) AND B.USE_YN = 'Y'
		ORDER BY A.CD_GROUP_CD, B.SORT_NO
	</select>
	
	<select id="getChannelList" parameterType="ccsChannelSearch" resultType="ccsChannel">
		  /* [ccsChannel.getChannelList][allen][2016. 5. 10.] */
		  <include refid="ccs.common.pagingPre" />
		  SELECT 
            	   channel.STORE_ID
            	 , channel.CHANNEL_ID
            	 , channel.CHANNEL_TYPE_CD
            	 , channel.BUSINESS_ID
            	 , channel.BUSINESS_CHANNEL_ID
            	 , channel.NAME
            	 , channel.NOTE
            	 , channel.PC_URL
            	 , channel.MOBILE_URL
            	 , channel.CHANNEL_STATE_CD
            	 , channel.INS_DT
            	 , channel.INS_ID
            	 , (SELECT NAME FROM CCS_USER WHERE USER_ID = channel.INS_ID) INS_NAME 
            	 , channel.UPD_DT
            	 , channel.UPD_ID
            	 , (SELECT NAME FROM CCS_USER WHERE USER_ID = channel.UPD_ID) UPD_NAME
      		FROM CCS_CHANNEL channel 
      		LEFT JOIN CCS_BUSINESS business
      		  ON channel.STORE_ID = business.STORE_ID
      		WHERE channel.STORE_ID = #{storeId}
      		  AND channel.BUSINESS_ID = business.BUSINESS_ID
      		  AND business.BUSINESS_STATE_CD = 'BUSINESS_STATE_CD.RUN'
      		  
	      		  <if test="channelStateCds != null and channelStateCds != ''">
	      		  	AND channel.CHANNEL_STATE_CD IN (${channelStateCds})
	      		  </if>
	      		  <if test="name != null and name != ''">
	      		  	AND channel.NAME LIKE = #{name}
	      		  </if>
	      		  <if test="startDate != null and startDate != ''" >
					<if test="endDate != null and endDate != ''">
					AND channel.INS_DT BETWEEN TO_DATE (#{startDate},
                                           'YYYY-MM-DD HH24:MI:SS')
                              AND TO_DATE (#{endDate},
                                           'YYYY-MM-DD HH24:MI:SS')	   
					</if>
					</if>
	      		  <if test="channelTypeCds != null and channelTypeCds != ''">
	      		  	AND channel.CHANNEL_TYPE_CD IN (${channelTypeCds})
	      		  </if>
      		 
     		  <include refid="ccs.common.pagingPost" />
	</select>
	
	
	<select id="getSimpleChannelList" parameterType="ccsChannelSearch" resultType="ccsChannel">
		  /* [ccsChannel.getSimpleChannelList][allen][2016. 5. 17.] */
		  SELECT 
            	 *
      		FROM CCS_CHANNEL
      		WHERE CHANNEL_STATE_CD = 'CHANNEL_STATE_CD.RUN'
      		AND STORE_ID = #{storeId} 
	</select>
	
	<select id="getChannelDetail" parameterType="String" resultType="ccsChannel">
		/* [ccsChannel.getChannelDetail][allen][2016. 5. 10.] */
		SELECT
				channel.*, business.name as businessName 
		  FROM CCS_CHANNEL channel JOIN CCS_BUSINESS business
		  ON channel.BUSINESS_ID = business.BUSINESS_ID 
		 WHERE CHANNEL_ID = #{channelId}
	</select>
	
	<update id="updateChannelStatus">
		/* [ccsChannel.getChannelDetail][allen][2016. 5. 10.] */
		UPDATE CCS_CHANNEL
		   SET
		   		  CHANNEL_STATE_CD = #{channelStateCd}
		   		, UPD_ID = #{updId}
		   		, UPD_DT = SYSDATE
		   WHERE STORE_ID = #{storeId}
		     AND CHANNEL_ID = #{channelId}
	</update>
	
	<select id="getChannelBusinessList" parameterType="String" resultType="ccsBusiness">
		/* [ccsChannel.getChannelBusinessList][allen][2016. 5. 11.] */
		SELECT * 
          FROM CCS_BUSINESS
        WHERE STORE_ID = #{storeId}  
        AND BUSINESS_TYPE_CD = 'BUSINESS_TYPE_CD.AD'
	
	</select>
	
	<resultMap id="allControlInfo" autoMapping="true" type="gcp.ccs.model.CcsControl">
		<id property="storeId" column="STORE_ID"/>
		<id property="controlNo" column="CONTROL_NO"/>
		<result property="channelControlCd" column="CHANNEL_CONTROL_CD"/>
	    <collection property="ccsControlmembertypes" ofType="gcp.ccs.model.CcsControlmembertype" >
	    	<id property="storeId" column="MEMT_STORE_ID"/>
	    	<id property="controlNo" column="MEMT_CONTROL_NO"/>
	    	<id property="memberTypeCd" column="MEMBER_TYPE_CD"/>
	    </collection>
	    <collection property="ccsControlmembergrades" ofType="gcp.ccs.model.CcsControlmembergrade" >
	    	<id property="storeId" column="MEMG_STORE_ID"/>
	    	<id property="controlNo" column="MEMG_CONTROL_NO"/>
	    	<id property="memGradeCd" column="MEM_GRADE_CD"/>
	    </collection>
	    <collection property="ccsControlchannels" ofType="gcp.ccs.model.CcsControlchannel" >
	    	<id property="storeId" column="CHAN_STORE_ID"/>
	    	<id property="controlNo" column="CHAN_CONTROL_NO"/>
	    	<id property="channelId" column="CHANNEL_ID"/>
	    	<result property="name" column="NAME"/>
	    </collection>
	    <collection property="ccsControldevices" ofType="gcp.ccs.model.CcsControldevice" >
	    	<id property="storeId" column="DEVC_STORE_ID"/>
	    	<id property="controlNo" column="DEVC_CONTROL_NO"/>
	    	<id property="deviceTypeCd" column="DEVICE_TYPE_CD"/>
	    </collection>
	</resultMap>
	<select id="getControlInfo" parameterType="ccsControl" resultMap="allControlInfo">
	/* [ccs.common.getControlInfo][peter][2016. 5. 20.] */
		SELECT 
			CTRL.STORE_ID
			, CTRL.CONTROL_NO
			, CTRL.CHANNEL_CONTROL_CD
			
			, MEMT.STORE_ID AS MEMT_STORE_ID
	    	, MEMT.CONTROL_NO AS MEMT_CONTROL_NO
	    	, MEMT.MEMBER_TYPE_CD
	    	
	    	, MEMG.STORE_ID AS MEMG_STORE_ID
	    	, MEMG.CONTROL_NO AS MEMG_CONTROL_NO
	    	, MEMG.MEM_GRADE_CD
	    	
	    	, CHAN.STORE_ID AS CHAN_STORE_ID
	    	, CHAN.CONTROL_NO AS CHAN_CONTROL_NO
	    	, CHAN.CHANNEL_ID
	    	
	    	, (SELECT NAME FROM CCS_CHANNEL WHERE CHANNEL_ID = CHAN.CHANNEL_ID)	AS NAME
	    	
	    	, DEVC.STORE_ID AS DEVC_STORE_ID
	    	, DEVC.CONTROL_NO AS DEVC_CONTROL_NO
	    	, DEVC.DEVICE_TYPE_CD
	    	
		FROM CCS_CONTROL CTRL, CCS_CONTROLMEMBERTYPE MEMT, CCS_CONTROLMEMBERGRADE MEMG, CCS_CONTROLCHANNEL CHAN, CCS_CONTROLDEVICE DEVC
		WHERE CTRL.STORE_ID = #{storeId}
		  AND CTRL.CONTROL_NO = #{controlNo}
		  AND CTRL.STORE_ID = MEMT.STORE_ID(+)
		  AND CTRL.STORE_ID = MEMG.STORE_ID(+)
		  AND CTRL.STORE_ID = CHAN.STORE_ID(+)
		  AND CTRL.STORE_ID = DEVC.STORE_ID(+)
		  AND CTRL.CONTROL_NO = MEMT.CONTROL_NO(+)
		  AND CTRL.CONTROL_NO = MEMG.CONTROL_NO(+)
		  AND CTRL.CONTROL_NO = CHAN.CONTROL_NO(+)
		  AND CTRL.CONTROL_NO = DEVC.CONTROL_NO(+)
	</select>

	<select id="getAllChannelList" parameterType="String" resultType="baseCcsChannel">
	/* [event.getAllChannelList][peter][2016. 5. 19.] */
		SELECT 
	    	CHANNEL_ID
	    	, CHANNEL_TYPE_CD
	    	, NAME
		FROM CCS_CHANNEL
		WHERE USE_YN = 'Y'
		AND STORE_ID = #{storeId}
	</select>
	
	<insert id="insertControl" parameterType="ccsControl">
	<selectKey keyProperty="controlNo" resultType="java.math.BigDecimal" order="BEFORE">
		/* [ccsControl.insertControl][paul][2016. 5. 16.] */
		SELECT NVL (CONTROL_NO, 1) controlNo
		  FROM (SELECT MAX (TO_NUMBER (CONTROL_NO)) + 1 CONTROL_NO FROM CCS_CONTROL WHERE STORE_ID= #{storeId}) DUAL
	</selectKey>	
	INSERT INTO CCS_CONTROL 
							(
			                   STORE_ID,
			                   CONTROL_NO,
		                       CHANNEL_CONTROL_CD,
		                       INS_DT,
		                       INS_ID,
		                       UPD_DT,
		                       UPD_ID)
				     VALUES (#{storeId},
				             #{controlNo},
				             #{channelControlCd},
				             SYSDATE,
				             #{insId},
				             SYSDATE,
				             #{updId}
				     		)
	</insert>
	
	<insert id="insertApply" parameterType="baseCcsApply" >
		<selectKey keyProperty="applyNo" resultType="BigDecimal" order="BEFORE">
		/* [ccs.common.insertApply][ian][2016.06.13] */
		SELECT NVL (APPLY_NO, 1) applyNo 
		  FROM (SELECT MAX (TO_NUMBER (APPLY_NO)) + 1 APPLY_NO FROM CCS_APPLY WHERE STORE_ID= #{storeId}) DUAL
		</selectKey>	
		INSERT INTO CCS_APPLY (STORE_ID,
	                       APPLY_NO,
	                       TARGET_TYPE_CD,
	                       INS_DT,
	                       INS_ID,
	                       UPD_DT,
	                       UPD_ID)
	     VALUES (#{storeId, jdbcType=VARCHAR},
	             #{applyNo, jdbcType=INTEGER},
	             #{targetTypeCd, jdbcType=VARCHAR},
	             SYSDATE,
	             #{insId, jdbcType=VARCHAR},
	             SYSDATE,
	             #{updId, jdbcType=VARCHAR}
	     		)
	</insert>
	
	<delete id="deleteApplytargetByApplyNo">
		/* [ccs.common.deleteApplytargetByApplyNo][dennis][2016. 6. 16.] */
		DELETE FROM CCS_APPLYTARGET WHERE STORE_ID = #{storeId} AND APPLY_NO = #{applyNo}
	</delete>
	
	<insert id="insertApplyTarget" parameterType="ccsApplytarget">
	/* [ccsApply.insertApplyTarget][ian][2016. 5. 13.] */
	INSERT INTO CCS_APPLYTARGET (STORE_ID,
	                             APPLY_NO,
	                             TARGET_ID,
	                             INS_DT,
	                             INS_ID,
	                             UPD_DT,
	                             UPD_ID)
	     VALUES (#{storeId, jdbcType=VARCHAR},
	             #{applyNo, jdbcType=INTEGER},
	             #{targetId, jdbcType=VARCHAR},
	             SYSDATE,
	             #{insId, jdbcType=VARCHAR},
	             SYSDATE,
	             #{updId, jdbcType=VARCHAR}
	             )
	</insert>
	
	<insert id="insertExcProduct" parameterType="ccsExcproduct">
	/* [ccsApply.insertExcProduct][paul][2016. 5. 30.] */
	INSERT INTO CCS_EXCPRODUCT (STORE_ID,
	                             APPLY_NO,
	                             PRODUCT_ID,
	                             INS_DT,
	                             INS_ID,
	                             UPD_DT,
	                             UPD_ID)
	     VALUES (#{storeId, jdbcType=VARCHAR},
	             #{applyNo, jdbcType=INTEGER},
	             #{productId, jdbcType=VARCHAR},
	             SYSDATE,
	             #{insId, jdbcType=VARCHAR},
	             SYSDATE,
	             #{updId, jdbcType=VARCHAR}
	             )
	</insert>
	<delete id="deleteExcproductByApplyNo">
		/* [ccs.common.deleteExcproductByApplyNo][dennis][2016. 6. 16.] */
		DELETE FROM CCS_EXCPRODUCT WHERE STORE_ID = #{storeId} AND APPLY_NO = #{applyNo}
	</delete>
	
	<select id="countCheckIdTarget" parameterType="ccsApplytarget" resultType="int">
		/* [ccsApply.countApplyNo][paul][2016. 5. 31.] */
		SELECT COUNT(*) FROM CCS_APPLYTARGET 
		 WHERE APPLY_NO = #{applyNo}
		   AND STORE_ID = #{storeId}
		   AND TARGET_ID = #{targetId}
		  
	</select>
	
	<select id="countCheckIdExcpro" parameterType="ccsExcproduct" resultType="int">
		/* [ccsApply.countApplyNo][paul][2016. 5. 31.] */
		SELECT COUNT(*) FROM CCS_EXCPRODUCT
		 WHERE APPLY_NO = #{applyNo}
		   AND STORE_ID = #{storeId}
		   AND PRODUCT_ID = #{productId}
		    
	</select>
	
	<delete id="deleteControlDevice" parameterType="ccsControldevice">
		/* [ccs.common.deleteControlDevice][allen][2016. 6. 13.] */
		DELETE 
		  FROM CCS_CONTROLDEVICE 
		 WHERE STORE_ID = #{storeId} 
		   AND CONTROL_NO = #{controlNo} 
	</delete>
	
	<delete id="deleteControlChannel" parameterType="ccsControlchannel">
		/* [ccs.common.deleteControlChannel][peter][2016. 6. 14.] */
		DELETE 
		  FROM CCS_CONTROLCHANNEL 
		 WHERE STORE_ID = #{storeId}
		 <if test="controlNo != null and controlNo != ''">
		   AND CONTROL_NO = #{controlNo} 
		 </if> 
		 <if test="channelId != null and channelId != ''">
		   AND CHANNEL_ID = #{channelId} 
		 </if> 
	</delete>
	
	<delete id="deleteControlMemberGrade" parameterType="ccsControlmembergrade">
		/* [ccs.common.deleteControlMemberGrade][allen][2016. 6. 13.] */
		DELETE 
		  FROM CCS_CONTROLMEMBERGRADE 
		 WHERE STORE_ID = #{storeId} 
		   AND CONTROL_NO = #{controlNo} 
	</delete>
	
	<delete id="deleteControlMemberType" parameterType="ccsControlmembertype">
		/* [ccs.common.deleteControlMemberType][allen][2016. 6. 13.] */
		DELETE 
		  FROM CCS_CONTROLMEMBERTYPE
		 WHERE STORE_ID = #{storeId} 
		   AND CONTROL_NO = #{controlNo} 
	</delete>
	
	<resultMap type="ccsApplytarget" id="getCcsApplytargetPrResult" autoMapping="true">
		<id column="APPLY_NO" property="applyNo"/>
		<id column="TARGET_ID" property="targetId"/>
		<association property="pmsProduct" javaType="pmsProduct" resultMap="getCcsApplytargetResult1"/>				
	</resultMap>
	<resultMap type="pmsProduct" id="getCcsApplytargetResult1" autoMapping="true">
		<association property="pmsBrand" javaType="pmsBrand">
			<id column="BRAND_ID" property="brandId"/>
			<result column="BRAND_NAME" property="name"/>
		</association>
	</resultMap>
	<select id="getCcsApplytargetPr" resultMap="getCcsApplytargetPrResult">
		SELECT
				CA.APPLY_NO,
				CA.TARGET_ID,
				PP.PRODUCT_ID,
				PP.NAME,
				PP.PRODUCT_TYPE_CD,
				PP.SALE_STATE_CD,
				PP.SALE_PRICE,
                PP.DISPLAY_YN,
                PP.SALE_START_DT,
                PP.SALE_END_DT,
				PP.BRAND_ID,
				PB.NAME AS BRAND_NAME,
				CA.INS_DT,
				CA.INS_ID,
				CA.UPD_DT,
				CA.UPD_ID,
				(SELECT US.NAME FROM CCS_USER US WHERE CA.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			  	(SELECT US.NAME FROM CCS_USER US WHERE CA.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
				
		FROM CCS_APPLYTARGET CA,
			 PMS_PRODUCT PP,
			 PMS_BRAND PB
		WHERE CA.TARGET_ID = PP.PRODUCT_ID
		AND PP.BRAND_ID = PB.BRAND_ID(+)
		AND CA.APPLY_NO = #{applyNo} 
	</select>
	
	<resultMap type="ccsApplytarget" id="getCcsApplytargetCaResult" autoMapping="true">
		<id column="APPLY_NO" property="applyNo"/>
		<id column="TARGET_ID" property="targetId"/>
		<association property="dmsDisplaycategory" javaType="dmsDisplaycategory">
			<id column="DISPLAY_CATEGORY_ID" property="displayCategoryId"/>
			<result column="UPPER_DISPLAY_CATEGORY_ID" property="upperDisplayCategoryId"/>
			<result column="NAME" property="name"/>
		</association>				
	</resultMap>
	<select id="getCcsApplytargetCa" resultMap="getCcsApplytargetCaResult">
		SELECT
				CA.APPLY_NO,
				CA.TARGET_ID,
				DC.DISPLAY_CATEGORY_ID,
                DC.UPPER_DISPLAY_CATEGORY_ID,
				DC.NAME,
				CA.INS_DT,
				CA.INS_ID,
				CA.UPD_DT,
				CA.UPD_ID,
				(SELECT US.NAME FROM CCS_USER US WHERE CA.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			  	(SELECT US.NAME FROM CCS_USER US WHERE CA.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME				
		FROM CCS_APPLYTARGET CA,
			 DMS_DISPLAYCATEGORY DC
		WHERE CA.TARGET_ID = DC.DISPLAY_CATEGORY_ID		
		AND CA.APPLY_NO = #{applyNo} 
	</select>
	
	<resultMap type="ccsApplytarget" id="getCcsApplytargetBrResult" autoMapping="true">
		<id column="APPLY_NO" property="applyNo"/>
		<id column="TARGET_ID" property="targetId"/>
		<association property="pmsBrand" javaType="pmsBrand">
			<id column="BRAND_ID" property="brandId"/>

			<result column="NAME" property="name"/>
		</association>				
	</resultMap>
	<select id="getCcsApplytargetBr" resultMap="getCcsApplytargetBrResult">
		SELECT
				CA.APPLY_NO,
				CA.TARGET_ID,
				PB.BRAND_ID,
				PB.NAME,
				CA.INS_DT,
				CA.INS_ID,
				CA.UPD_DT,
				CA.UPD_ID,
				(SELECT US.NAME FROM CCS_USER US WHERE CA.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			  	(SELECT US.NAME FROM CCS_USER US WHERE CA.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME				
		FROM CCS_APPLYTARGET CA,
			 PMS_BRAND PB			 
		WHERE CA.TARGET_ID = PB.BRAND_ID		
		AND CA.APPLY_NO = #{applyNo} 
	</select>
	
	<resultMap type="ccsExcproduct" id="getCcsExcproductResult" autoMapping="true">
		<id column="APPLY_NO" property="applyNo"/>
		<id column="PRODUCT_ID" property="productId"/>
		<association property="pmsProduct" javaType="pmsProduct" resultMap="getCcsExcproductResult1"/>
	</resultMap>
	<resultMap type="pmsProduct" id="getCcsExcproductResult1" autoMapping="true">
		<association property="pmsBrand" javaType="pmsBrand">
			<id column="BRAND_ID" property="brandId"/>
			<result column="BRAND_NAME" property="name"/>
		</association>
	</resultMap>
	<select id="getCcsExcproduct" resultMap="getCcsExcproductResult">		
		SELECT
				CE.APPLY_NO,
				CE.PRODUCT_ID,				
				PP.NAME,
				PP.PRODUCT_TYPE_CD,
				PP.SALE_STATE_CD,
				PP.SALE_PRICE,
                PP.SALE_START_DT,
                PP.SALE_END_DT,
                PP.DISPLAY_YN,
				PP.BRAND_ID,
				PB.NAME AS BRAND_NAME,
				CE.INS_DT,
				CE.INS_ID,
				CE.UPD_DT,
				CE.UPD_ID,
				(SELECT US.NAME FROM CCS_USER US WHERE CE.INS_ID = US.USER_ID AND ROWNUM=1) AS INS_NAME,
			    (SELECT US.NAME FROM CCS_USER US WHERE CE.UPD_ID = US.USER_ID AND ROWNUM=1) AS UPD_NAME
				
		FROM CCS_EXCPRODUCT CE,		
			 PMS_PRODUCT PP,
			 PMS_BRAND PB
		WHERE CE.PRODUCT_ID = PP.PRODUCT_ID
		AND PP.BRAND_ID = PB.BRAND_ID(+)
		AND CE.APPLY_NO = #{applyNo} 			
	</select>
		
	<select id="getExistsTargetList" parameterType="ccsApplySearch" resultType="String">
		SELECT TARGET_ID AS ID
		  FROM CCS_APPLYTARGET
		 WHERE STORE_ID = #{storeId} AND APPLY_NO = #{applyNo}
	</select>
	
	<select id="getExistsExcproductList" parameterType="ccsApplySearch" resultType="String">
		SELECT PRODUCT_ID AS ID
		  FROM CCS_EXCPRODUCT
		 WHERE STORE_ID = #{storeId} AND APPLY_NO = #{applyNo}
	</select>
	
	<sql id="existsCheckApplytarget">
		AND EXISTS
              (SELECT E1.APPLY_NO
                 FROM (SELECT T1.APPLY_NO
                         FROM CCS_APPLY T1
                        WHERE     T1.STORE_ID = #{storeId}
                              AND T1.TARGET_TYPE_CD = 'TARGET_TYPE_CD.ALL'
                              AND NOT EXISTS
                                         (SELECT APPLY_NO
                                            FROM CCS_EXCPRODUCT CE
                                           WHERE     CE.PRODUCT_ID = #{productId}
                                                 AND T1.APPLY_NO = CE.APPLY_NO)
							  AND EXISTS
								         (SELECT 'X'
								            FROM PMS_PRODUCT
								           WHERE PRODUCT_ID = #{productId})
                       UNION
                 	   SELECT T1.APPLY_NO
                         FROM CCS_APPLY T1
                        WHERE     T1.STORE_ID = #{storeId}
                              AND T1.TARGET_TYPE_CD = 'TARGET_TYPE_CD.PRODUCT'
                              AND EXISTS
                                     (SELECT APPLY_NO
                                        FROM    CCS_APPLYTARGET T2
                                             INNER JOIN
                                                PMS_PRODUCT PP
                                             ON     PP.PRODUCT_ID = T2.TARGET_ID
                                                AND PP.PRODUCT_ID = #{productId}
                                                AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                                       WHERE T1.APPLY_NO = T2.APPLY_NO)
                       UNION
                       SELECT T1.APPLY_NO
                         FROM CCS_APPLY T1
                        WHERE     T1.STORE_ID = #{storeId}
                              AND T1.TARGET_TYPE_CD = 'TARGET_TYPE_CD.BRAND'
                              AND EXISTS
                                     (SELECT APPLY_NO
                                        FROM CCS_APPLYTARGET T2
                                             INNER JOIN PMS_BRAND PB
                                                ON     PB.STORE_ID = T2.STORE_ID
                                                   AND PB.BRAND_ID = T2.TARGET_ID
                                             INNER JOIN PMS_PRODUCT PP
                                                ON     PP.STORE_ID = T2.STORE_ID
                                                   AND PP.BRAND_ID = PB.BRAND_ID
                                                   AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                                                   AND PP.PRODUCT_ID = #{productId}
                                       WHERE T1.APPLY_NO = T2.APPLY_NO)
						      AND NOT EXISTS
						                 (SELECT APPLY_NO
						                    FROM CCS_EXCPRODUCT CE
						                   WHERE     CE.STORE_ID = #{storeId}
						                         AND CE.PRODUCT_ID = #{productId}
						                         AND T1.APPLY_NO = CE.APPLY_NO)
                       UNION
                       SELECT T1.APPLY_NO
                         FROM CCS_APPLY T1
                        WHERE     T1.STORE_ID = #{storeId}
                              AND T1.TARGET_TYPE_CD = 'TARGET_TYPE_CD.CATEGORY'
                              AND EXISTS
                                     (SELECT APPLY_NO
								  	    FROM CCS_APPLYTARGET T2
									         INNER JOIN DMS_DISPLAYCATEGORY DC
									            ON     DC.STORE_ID = T2.STORE_ID
									               AND DC.DISPLAY_CATEGORY_ID = T2.TARGET_ID
									         INNER JOIN DMS_DISPLAYCATEGORYPRODUCT DCP
									            ON     DCP.STORE_ID = T2.STORE_ID
									               AND DCP.DISPLAY_CATEGORY_ID = DC.DISPLAY_CATEGORY_ID
									         INNER JOIN PMS_PRODUCT PP
									            ON     PP.STORE_ID = T2.STORE_ID
									               AND PP.PRODUCT_ID = DCP.PRODUCT_ID
									               AND PP.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                                                   AND PP.PRODUCT_ID = #{productId}
                                       WHERE T1.APPLY_NO = T2.APPLY_NO)
						      AND NOT EXISTS
						                 (SELECT APPLY_NO
						                    FROM CCS_EXCPRODUCT CE
						                   WHERE     CE.STORE_ID = #{storeId}
						                         AND CE.PRODUCT_ID = #{productId}
						                         AND T1.APPLY_NO = CE.APPLY_NO) ) E1
                WHERE T1.APPLY_NO = E1.APPLY_NO)
	</sql>

	<resultMap id="dealProductList" type="pmsProduct" autoMapping="true">
		<id property="sotreId" column="STORE_ID" />
		<id property="productId" column="PRODUCT_ID" />
		<result property="name" column="PRODUCT_NAME"/>
		<result property="listPrice" column="LIST_PRICE"/>
		<result property="upperDealGroupNo" column="UPPER_DEAL_GROUP_NO" />
		<result property="dealGroupNo" column="DEAL_GROUP_NO" />
		
		<association property="pmsProductprice" javaType="pmsProductprice" resultMap="dealLowestPrice" />
		<association property="spsDealproduct" javaType="spsDealproduct" resultMap="dealInfo" />
    </resultMap>
    <resultMap id="dealLowestPrice" type="pmsProductprice" autoMapping="true">
        <id property="storeId" column="STORE_ID"/>
        <id property="productId" column="PRODUCT_ID"/>
        
		<result property="salePrice" column="COUPON_PRICE"/>
    </resultMap>
    <resultMap id="dealInfo" type="spsDealproduct" autoMapping="true">
        <id property="storeId" column="STORE_ID"/>
        <id property="dealId" column="DEAL_ID"/>
        <id property="dealProductNo" column="DEAL_PRODUCT_NO"/>
        
        <result property="couponId" column="COUPON_ID"/>
        <result property="presentProductId" column="PRESENT_PRODUCT_ID"/>
        <result property="isCount" column="IS_COUNT"/>
        <result property="isDeadline" column="IS_DEADLINE"/>
    </resultMap>
    
	<select id="getDealProductLowestPriceList" resultMap="dealProductList">
	WITH COUPON_PRODUCT
	     AS (
				SELECT PRD.PRODUCT_ID,                                                                 /* 상품 적용 쿠폰*/
				       PRD.SALE_PRICE,
				       PRD.POINT_SAVE_RATE,
				       PRD.DELIVERY_FEE_FREE_YN,
				       COUPON.COUPON_ID,
				       COUPON.DC_APPLY_TYPE_CD,
				       COUPON.DC_VALUE,
				       COUPON.DEAL_APPLY_YN
				  FROM SPS_COUPON COUPON
				       INNER JOIN CCS_APPLY APY
				          ON COUPON.APPLY_NO = APY.APPLY_NO AND COUPON.STORE_ID = APY.STORE_ID
				       INNER JOIN CCS_APPLYTARGET TARGET
				          ON TARGET.APPLY_NO = APY.APPLY_NO AND TARGET.STORE_ID = APY.STORE_ID
				       INNER JOIN PMS_PRODUCT PRD
				          ON PRD.PRODUCT_ID = TARGET.TARGET_ID AND TARGET.STORE_ID = PRD.STORE_ID
				 WHERE     COUPON.COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
				       AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.PRODUCT'
				       AND COUPON.COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
				       AND COUPON.DOWN_SHOW_YN = 'Y'
				       AND COUPON.STORE_ID = #{storeId}
				       AND SYSDATE BETWEEN COUPON.ISSUE_START_DT AND COUPON.ISSUE_END_DT
				       AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
				       AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
				       AND PRD.DISPLAY_YN = 'Y'
				       AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
				UNION                                                                                 /* 브랜드 적용 쿠폰*/
				SELECT 
				      PRD.PRODUCT_ID,
				       PRD.SALE_PRICE,
				       PRD.POINT_SAVE_RATE,
				       PRD.DELIVERY_FEE_FREE_YN,
				       COUPON.COUPON_ID,
				       COUPON.DC_APPLY_TYPE_CD,
				       COUPON.DC_VALUE,
				       COUPON.DEAL_APPLY_YN
				  FROM SPS_COUPON COUPON
				       INNER JOIN CCS_APPLY APY
				          ON COUPON.APPLY_NO = APY.APPLY_NO AND COUPON.STORE_ID = APY.STORE_ID
				       INNER JOIN CCS_APPLYTARGET TARGET
				          ON TARGET.APPLY_NO = APY.APPLY_NO AND TARGET.STORE_ID = APY.STORE_ID
				       INNER JOIN PMS_BRAND BRD
				          ON BRD.BRAND_ID = TARGET.TARGET_ID AND BRD.STORE_ID = TARGET.STORE_ID
				       INNER JOIN PMS_PRODUCT PRD
				          ON PRD.BRAND_ID = BRD.BRAND_ID AND PRD.STORE_ID = #{storeId}
				 WHERE     COUPON.COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
				       AND COUPON.STORE_ID = #{storeId}
				       AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.BRAND'
				       AND COUPON.COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
				       AND COUPON.DOWN_SHOW_YN = 'Y'
				       AND SYSDATE BETWEEN COUPON.ISSUE_START_DT AND COUPON.ISSUE_END_DT
				       AND NOT EXISTS
				              (SELECT 1
				                 FROM CCS_EXCPRODUCT EXC
				                WHERE EXC.PRODUCT_ID = PRD.PRODUCT_ID AND EXC.APPLY_NO = APY.APPLY_NO)
				       AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
				       AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
				       AND PRD.DISPLAY_YN = 'Y'
				       AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
				UNION                                                                                 /* 카테고리 쿠폰  */
				SELECT I2.PRODUCT_ID,
				       I2.SALE_PRICE,
				       I2.POINT_SAVE_RATE,
				       I2.DELIVERY_FEE_FREE_YN,
				       I1.COUPON_ID,
				       I1.DC_APPLY_TYPE_CD,
				       I1.DC_VALUE,
				       I1.DEAL_APPLY_YN
				  FROM    (SELECT COUPON.COUPON_ID,
				                  COUPON.DC_APPLY_TYPE_CD,
				                  COUPON.DC_VALUE,
				                  APY.APPLY_NO,
				                  TARGET.TARGET_ID,
				                  COUPON.DEAL_APPLY_YN
				             FROM SPS_COUPON COUPON
				                  INNER JOIN CCS_APPLY APY
				                     ON COUPON.APPLY_NO = APY.APPLY_NO AND COUPON.STORE_ID = APY.STORE_ID
				                  INNER JOIN CCS_APPLYTARGET TARGET
				                     ON TARGET.APPLY_NO = APY.APPLY_NO AND TARGET.STORE_ID = APY.STORE_ID
				            WHERE     COUPON.COUPON_STATE_CD = 'COUPON_STATE_CD.RUN'
				                  AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.CATEGORY'
				                  AND COUPON.COUPON_TYPE_CD = 'COUPON_TYPE_CD.PRODUCT'
				                  AND COUPON.DOWN_SHOW_YN = 'Y'
				                  AND COUPON.STORE_ID = #{storeId}
				                  AND SYSDATE BETWEEN COUPON.ISSUE_START_DT AND COUPON.ISSUE_END_DT) I1
				       INNER JOIN
				          (SELECT PRD.PRODUCT_ID,
				                  DCATE.DISPLAY_CATEGORY_ID,
				                  PRD.SALE_PRICE,
				                  PRD.POINT_SAVE_RATE,
				                  PRD.DELIVERY_FEE_FREE_YN
				             FROM    DMS_DISPLAYCATEGORYPRODUCT DCATE
				                  INNER JOIN
				                     PMS_PRODUCT PRD
				                  ON (PRD.PRODUCT_ID = DCATE.PRODUCT_ID AND PRD.STORE_ID = DCATE.STORE_ID)
				            WHERE     PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
				                  AND PRD.PRODUCT_TYPE_CD IN ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
				                  AND PRD.DISPLAY_YN = 'Y'
				                  AND DCATE.STORE_ID = #{storeId}
				                  AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT) I2
				       ON (I1.TARGET_ID = I2.DISPLAY_CATEGORY_ID)
				 WHERE NOT EXISTS
				          (SELECT 1
				             FROM CCS_EXCPRODUCT EXC
				            WHERE EXC.PRODUCT_ID = I2.PRODUCT_ID AND EXC.APPLY_NO = I1.APPLY_NO)
	)
	, PRESENT_PRODUCT
     AS (SELECT PRD.PRODUCT_ID,                                 /* 상품 적용 사은품*/
                PRD.SALE_PRICE,
                PRD.POINT_SAVE_RATE,
                PRD.DELIVERY_FEE_FREE_YN,
                PRESENT.PRESENT_ID,
                PRESENT.DEAL_APPLY_YN,
                SPP.PRODUCT_ID AS PRESENT_PRODUCT_ID
           FROM SPS_PRESENT PRESENT
                INNER JOIN CCS_APPLY APY
                   ON     PRESENT.APPLY_NO = APY.APPLY_NO
                      AND PRESENT.STORE_ID = APY.STORE_ID
                INNER JOIN CCS_APPLYTARGET TARGET
                   ON     TARGET.APPLY_NO = APY.APPLY_NO
                      AND TARGET.STORE_ID = APY.STORE_ID
                INNER JOIN PMS_PRODUCT PRD
                   ON     PRD.PRODUCT_ID = TARGET.TARGET_ID
                      AND TARGET.STORE_ID = PRD.STORE_ID
                INNER JOIN SPS_PRESENTPRODUCT SPP
                   ON     PRESENT.PRESENT_ID = SPP.PRESENT_ID
                      AND PRESENT.STORE_ID = SPP.STORE_ID
          WHERE     PRESENT.PRESENT_STATE_CD = 'PRESENT_STATE_CD.RUN'
                AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.PRODUCT'
                AND PRESENT.PRESENT_TYPE_CD = 'PRESENT_TYPE_CD.PRODUCT'
                AND PRESENT.STORE_ID = #{storeId}
                AND SYSDATE BETWEEN PRESENT.START_DT AND PRESENT.END_DT
                AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                AND PRD.PRODUCT_TYPE_CD IN
                       ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                AND PRD.DISPLAY_YN = 'Y'
                AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
         UNION                                                 /* 브랜드 적용 사은품*/
         SELECT PRD.PRODUCT_ID,
                PRD.SALE_PRICE,
                PRD.POINT_SAVE_RATE,
                PRD.DELIVERY_FEE_FREE_YN,
                PRESENT.PRESENT_ID,
                PRESENT.DEAL_APPLY_YN,
                SPP.PRODUCT_ID AS PRESENT_PRODUCT_ID
           FROM SPS_PRESENT PRESENT
                INNER JOIN CCS_APPLY APY
                   ON     PRESENT.APPLY_NO = APY.APPLY_NO
                      AND PRESENT.STORE_ID = APY.STORE_ID
                INNER JOIN CCS_APPLYTARGET TARGET
                   ON     TARGET.APPLY_NO = APY.APPLY_NO
                      AND TARGET.STORE_ID = APY.STORE_ID
                INNER JOIN PMS_BRAND BRD
                   ON     BRD.BRAND_ID = TARGET.TARGET_ID
                      AND BRD.STORE_ID = TARGET.STORE_ID
                INNER JOIN PMS_PRODUCT PRD
                   ON PRD.BRAND_ID = BRD.BRAND_ID AND PRD.STORE_ID = #{storeId}
                INNER JOIN SPS_PRESENTPRODUCT SPP
                   ON     PRESENT.PRESENT_ID = SPP.PRESENT_ID
                      AND PRESENT.STORE_ID = SPP.STORE_ID
          WHERE     PRESENT.PRESENT_STATE_CD = 'PRESENT_STATE_CD.RUN'
                AND PRESENT.STORE_ID = #{storeId}
                AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.BRAND'
                AND PRESENT.PRESENT_TYPE_CD = 'PRESENT_TYPE_CD.PRODUCT'
                AND SYSDATE BETWEEN PRESENT.START_DT AND PRESENT.END_DT
                AND NOT EXISTS
                           (SELECT 1
                              FROM CCS_EXCPRODUCT EXC
                             WHERE     EXC.PRODUCT_ID = PRD.PRODUCT_ID
                                   AND EXC.APPLY_NO = APY.APPLY_NO)
                AND PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                AND PRD.PRODUCT_TYPE_CD IN
                       ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
                AND PRD.DISPLAY_YN = 'Y'
                AND SYSDATE BETWEEN PRD.SALE_START_DT AND PRD.SALE_END_DT
         UNION                                                 /* 카테고리 사은품  */
         SELECT I2.PRODUCT_ID,
                I2.SALE_PRICE,
                I2.POINT_SAVE_RATE,
                I2.DELIVERY_FEE_FREE_YN,
                I1.PRESENT_ID,
                I1.DEAL_APPLY_YN,
                I1.PRESENT_PRODUCT_ID
           FROM    (SELECT PRESENT.PRESENT_ID,
                           APY.APPLY_NO,
                           TARGET.TARGET_ID,
                           PRESENT.DEAL_APPLY_YN,
                           SPP.PRODUCT_ID AS PRESENT_PRODUCT_ID
                      FROM SPS_PRESENT PRESENT
                           INNER JOIN CCS_APPLY APY
                              ON     PRESENT.APPLY_NO = APY.APPLY_NO
                                 AND PRESENT.STORE_ID = APY.STORE_ID
                           INNER JOIN CCS_APPLYTARGET TARGET
                              ON     TARGET.APPLY_NO = APY.APPLY_NO
                                 AND TARGET.STORE_ID = APY.STORE_ID
                           INNER JOIN SPS_PRESENTPRODUCT SPP
                              ON     PRESENT.PRESENT_ID = SPP.PRESENT_ID
                                 AND PRESENT.STORE_ID = SPP.STORE_ID
                     WHERE     PRESENT.PRESENT_STATE_CD = 'PRESENT_STATE_CD.RUN'
                           AND APY.TARGET_TYPE_CD = 'TARGET_TYPE_CD.CATEGORY'
                           AND PRESENT.PRESENT_TYPE_CD = 'PRESENT_TYPE_CD.PRODUCT'
                           AND PRESENT.STORE_ID = #{storeId}
                           AND SYSDATE BETWEEN PRESENT.START_DT
                                           AND PRESENT.END_DT) I1
                INNER JOIN
                   (SELECT PRD.PRODUCT_ID,
                           DCATE.DISPLAY_CATEGORY_ID,
                           PRD.SALE_PRICE,
                           PRD.POINT_SAVE_RATE,
                           PRD.DELIVERY_FEE_FREE_YN
                      FROM    DMS_DISPLAYCATEGORYPRODUCT DCATE
                           INNER JOIN
                              PMS_PRODUCT PRD
                           ON (    PRD.PRODUCT_ID = DCATE.PRODUCT_ID
                               AND PRD.STORE_ID = DCATE.STORE_ID)
                     WHERE     PRD.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
                           AND PRD.PRODUCT_TYPE_CD IN
                                  ('PRODUCT_TYPE_CD.GENERAL',
                                   'PRODUCT_TYPE_CD.SET')
                           AND PRD.DISPLAY_YN = 'Y'
                           AND DCATE.STORE_ID = #{storeId}
                           AND SYSDATE BETWEEN PRD.SALE_START_DT
                                           AND PRD.SALE_END_DT) I2
                ON (I1.TARGET_ID = I2.DISPLAY_CATEGORY_ID)
          WHERE NOT EXISTS
                       (SELECT 1
                          FROM CCS_EXCPRODUCT EXC
                         WHERE     EXC.PRODUCT_ID = I2.PRODUCT_ID
                               AND EXC.APPLY_NO = I1.APPLY_NO)
    )
	<include refid="ccs.common.pagingPre"/>
	/* [ccs.common.getDealProductLowestPriceList][eddie][2016. 9. 28.] */
	  SELECT POINT_SAVE_RATE,
	         DELIVERY_FEE_FREE_YN,
	         PRODUCT_ID,
	         PRODUCT_NAME,
	         LIST_PRICE,
	         MIN (COUPON_PRICE) KEEP (DENSE_RANK FIRST ORDER BY COUPON_PRICE ASC) COUPON_PRICE,
	         MIN (COUPON_ID) KEEP (DENSE_RANK FIRST ORDER BY COUPON_PRICE ASC) COUPON_ID,
	         DEAL_STOCK_QTY,
	         TOTAL_DEAL_STOCK_QTY,
	         START_DT,
	         END_DT,
	         ORDER_QTY,
	         RATTING,
	         INS_DT,
			 UPPER_DEAL_GROUP_NO,
             DEAL_GROUP_NO,
	         CASE
	            WHEN   TO_DATE (TO_CHAR (END_DT, 'YYYYMMDD HH24:MI:SS'), 'YYYYMMDD HH24:MI:SS')
	            	 - TO_DATE (TO_CHAR (START_DT, 'YYYYMMDD HH24:MI:SS'), 'YYYYMMDD HH24:MI:SS') &lt;= 10
	            THEN 'Y'
	            ELSE 'N'
	         END
	            AS IS_COUNT,
	         CASE
	            WHEN   TO_DATE (TO_CHAR (END_DT, 'YYYYMMDD HH24:MI:SS'), 'YYYYMMDD HH24:MI:SS')
	                 - TO_DATE (TO_CHAR (START_DT, 'YYYYMMDD HH24:MI:SS'), 'YYYYMMDD HH24:MI:SS') &lt;= 1
	            THEN 'Y'
	            ELSE 'N'
	         END
	            AS IS_DAEDLINE,
	         PRESENT_PRODUCT_ID
	    FROM (SELECT /*+LEADING (I1) */
	                I1.SALE_PRICE,
	                 I1.POINT_SAVE_RATE,
	                 I1.DELIVERY_FEE_FREE_YN,
	                 I1.PRODUCT_ID,
	                 I1.PRODUCT_NAME,
	                 I1.DEAL_ID,
	                 I1.LIST_PRICE,
	                 I1.DEAL_STOCK_QTY,
	                 I1.TOTAL_DEAL_STOCK_QTY,
	                 I1.START_DT,
	                 I1.END_DT,
                 	 I1.ORDER_QTY,
                 	 I1.RATTING,
                 	 I1.INS_DT,
					 I1.UPPER_DEAL_GROUP_NO,
                     I1.DEAL_GROUP_NO,
	                 I2.COUPON_ID,
	                 I2.DC_VALUE,
	                 I2.DC_APPLY_TYPE_CD,
	                 CASE
	                    WHEN I2.COUPON_ID IS NULL
	                    THEN
	                       I1.SALE_PRICE
	                    ELSE
	                       CASE
	                          WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.RATE'
	                          THEN
	                             I1.SALE_PRICE - (I1.SALE_PRICE * DC_VALUE / 100)
	                          WHEN I2.DC_APPLY_TYPE_CD = 'DC_APPLY_TYPE_CD.AMT'
	                          THEN
	                             CASE
	                                WHEN I1.SALE_PRICE - DC_VALUE &lt; 0 THEN 0
	                                ELSE I1.SALE_PRICE - DC_VALUE
	                             END
	                       END
	                 END
	                    COUPON_PRICE,
	                 I3.PRESENT_PRODUCT_ID
	            FROM    (
						SELECT 
							   MIN (SALE_PRICE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) SALE_PRICE,
						       MIN (POINT_SAVE_RATE) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) POINT_SAVE_RATE,
						       MIN (DELIVERY_FEE_FREE_YN) KEEP (DENSE_RANK FIRST ORDER BY INS_DT DESC) DELIVERY_FEE_FREE_YN,
						       PRODUCT_ID,
						       PRODUCT_NAME,
						       DEAL_ID,
							   LIST_PRICE,
					           DEAL_STOCK_QTY,
					           TOTAL_DEAL_STOCK_QTY,
					           START_DT,
					           END_DT,
					           <if test="oneItem != null and oneItem != ''">
					           RN, <!-- 비회원 로그인시 카테고리당 상품 두개 출력키 key -->
					           </if>
                               ORDER_QTY,
                               RATTING,
                               INS_DT,
                               UPPER_DEAL_GROUP_NO,
                               DEAL_GROUP_NO
						  FROM (SELECT DP.PRODUCT_ID,
						               DP.POINT_SAVE_RATE,
						               DP.DELIVERY_FEE_FREE_YN,
						               CASE
						                  WHEN DP.SALE_PRICE - NVL (DM.ADD_SALE_PRICE, 0) &lt; 0 THEN 0
						                  ELSE DP.SALE_PRICE - NVL (DM.ADD_SALE_PRICE, 0)
						               END
						                  SALE_PRICE,
						               DP.INS_DT,
                                       DP.DEAL_STOCK_QTY,
                                       DP.TOTAL_DEAL_STOCK_QTY,
                                       DP.START_DT,
                                       DP.END_DT,
						               DEAL.DEAL_TYPE_CD,
						               DEAL.DEAL_ID,
<!-- 						               PP.SALE_PRICE PRD_SALE_PRICE, -->
						               DP.LIST_PRICE LIST_PRICE,
						               PP.NAME PRODUCT_NAME,
						               <if test="oneItem != null and oneItem != ''">
						               RANK () OVER (PARTITION BY DG.UPPER_DEAL_GROUP_NO ORDER BY DP.PRODUCT_ID DESC) AS RN,  <!-- 비회원 로그인시 카테고리당 상품 하나 key -->
						               </if>
                                       NVL (PPS.ORDER_QTY, 0) AS ORDER_QTY,
                                       NVL (PPS.RATING, 0) AS RATTING,
                                       DG.UPPER_DEAL_GROUP_NO,
                                       DG.DEAL_GROUP_NO
						          FROM SPS_DEALPRODUCT DP
	                                   INNER JOIN (    SELECT DEAL_ID,
	                                                          STORE_ID,
	                                                          DEAL_GROUP_NO,
	                                                          CASE
	                                                             WHEN UPPER_DEAL_GROUP_NO IS NULL THEN DEAL_GROUP_NO
	                                                             ELSE UPPER_DEAL_GROUP_NO
	                                                          END
	                                                             AS UPPER_DEAL_GROUP_NO
	                                                     FROM SPS_DEALGROUP
	                                                    WHERE     STORE_ID = #{storeId}
	                                                          AND DEAL_ID = #{dealId}
	                                                          AND DISPLAY_YN = 'Y'
	                                               START WITH     UPPER_DEAL_GROUP_NO IS NULL AND DEAL_ID = #{dealId}
	                                               CONNECT BY     PRIOR DEAL_GROUP_NO = UPPER_DEAL_GROUP_NO AND DEAL_ID = #{dealId}) DG
                                          ON (    DG.DEAL_ID = DP.DEAL_ID
                                              AND DG.STORE_ID = DP.STORE_ID
                                              AND DG.DEAL_GROUP_NO = DP.DEAL_GROUP_NO
                                              <if test="upperDealGroupNo != null and upperDealGroupNo != ''">
                                              AND DG.UPPER_DEAL_GROUP_NO = #{upperDealGroupNo}   <!-- 1DEPTH 조건 -->
                                              </if>
                                              <if test="dealGroupNo != null and dealGroupNo != ''">
                                              AND DG.DEAL_GROUP_NO = #{dealGroupNo}       <!-- 2DEPTH 조건 -->
                                              </if>
                                              )
						               INNER JOIN SPS_DEAL DEAL
						                  ON (    DEAL.DEAL_ID = DP.DEAL_ID
						                      AND DEAL.STORE_ID = DP.STORE_ID
						                      AND DEAL.DEAL_TYPE_CD = #{dealTypeCd}
						                      <if test="dealId != null and dealId != ''">
						                      	AND DEAL.DEAL_ID = #{dealId}
						                      </if>
						                      AND DEAL.DISPLAY_YN = 'Y')
						               INNER JOIN PMS_PRODUCT PP
						                  ON (    DP.STORE_ID = PP.STORE_ID
						                      AND DP.PRODUCT_ID = PP.PRODUCT_ID
						                      AND PP.SALE_STATE_CD = 'SALE_STATE_CD.SALE'
						                      AND PP.PRODUCT_TYPE_CD IN
						                             ('PRODUCT_TYPE_CD.GENERAL', 'PRODUCT_TYPE_CD.SET')
						                      AND PP.DISPLAY_YN = 'Y'
						                      AND SYSDATE BETWEEN PP.SALE_START_DT AND PP.SALE_END_DT
						                      <if test="genderTypeCd != null and genderTypeCd != ''">
						                      AND PP.GENDER_TYPE_CD = #{genderTypeCd}
						                      </if> 
										 	  <if test="benefit!='' and benefit!=null"> /* 혜택1 무료배송 정기배송 매장픽업 */
										 	      AND ( 1 = 2
											   	 <if test="benefit.indexOf('deliveryFeeFreeYn') >= 0">
											   	 	 OR PP.DELIVERY_FEE_FREE_YN = 'Y'
											   	 </if>
											   	 <if test="benefit.indexOf('offshopPickupYn') >= 0">
											   	 	 OR PP.OFFSHOP_PICKUP_YN = 'Y'
											   	 </if>
											   	 <if test="benefit.indexOf('regularDeliveryYn') >= 0">
											   	 	 OR PP.REGULAR_DELIVERY_YN = 'Y'
											   	 </if>
											   	)
										 	  </if>
						                      )
								       LEFT OUTER JOIN PMS_PRODUCTAGE PPA
								          ON     DP.STORE_ID = PPA.STORE_ID
								             AND DP.PRODUCT_ID = PPA.PRODUCT_ID
								             <if test="ageTypeCd != '' and ageTypeCd != null"> /* 상세검색 월령 */
								             	AND PPA.AGE_TYPE_CD IN (${ageTypeCd})
								             </if>
								       <if test="attributeId != '' and attributeId != null">/* 상세검색 색상 소재 */
									       LEFT OUTER JOIN PMS_PRODUCTATTRIBUTE PAT
									          ON     DP.STORE_ID = PAT.STORE_ID
									             AND DP.PRODUCT_ID = PAT.PRODUCT_ID
									             AND PAT.ATTRIBUTE_ID IN (${attributeId})
									             <if test="(color != '' and color != null) or (material != '' and material != null)">
											 	      AND ( 1 = 2
												   	 <if test="color != '' and color != null">
												   	 	 OR PAT.ATTRIBUTE_VALUE IN (${color})
												   	 </if>
												   	 <if test="material != '' and material != null">
												   	 	 OR PAT.ATTRIBUTE_VALUE IN (${material})
												   	 </if>
												   	 )
									             </if>
								       </if>
						               LEFT OUTER JOIN SPS_DEALMEMBER DM
						                  ON (    DM.STORE_ID = DP.STORE_ID
						                      AND DM.DEAL_ID = DP.DEAL_ID
						                      AND DM.DEAL_PRODUCT_NO = DP.DEAL_PRODUCT_NO
						                     <if test="memGradeCd != '' and memGradeCd != null"> /* 회원 등급 */
						                      AND DM.MEM_GRADE_CD = #{memGradeCd}
						                     </if>
						                      )
                                       LEFT JOIN PMS_PRODUCTSUMMARY PPS
                                          ON (    PPS.STORE_ID = PP.STORE_ID
                                              AND PPS.PRODUCT_ID = PP.PRODUCT_ID)
						         WHERE     DP.STORE_ID = #{storeId}
						               AND DP.DISPLAY_YN = 'Y'
						               AND SYSDATE BETWEEN DP.START_DT AND DP.END_DT
						               AND DP.DEAL_STOCK_QTY &gt; 0
						               AND DP.DEAL_STATE_CD = 'DEAL_STATE_CD.RUN'
						               <if test=" 'DEAL_TYPE_CD.PREMIUM'.equals(dealTypeCd)">
						               AND (DP.TOTAL_DEAL_STOCK_QTY IS NOT NULL AND DP.TOTAL_DEAL_STOCK_QTY > 0) <!-- 한정수량 존재하는 상품만 노출-->
						               </if>
						               )
			               <if test="oneItem != null and oneItem != ''">	<!-- 딜 구분타이틀별 아이템 두개씩 출력 key -->
			               	WHERE RN &lt; 3
			               </if>
						GROUP BY PRODUCT_ID,
						         PRODUCT_NAME,
						         DEAL_ID,
                                 LIST_PRICE,
                                 DEAL_STOCK_QTY,
                                 TOTAL_DEAL_STOCK_QTY,
                                 START_DT,
                                 END_DT,
                                 <if test="oneItem != null and oneItem != ''">
                                 RN,
                                 </if>
                                 ORDER_QTY,
                              	 RATTING,
                              	 INS_DT,
                              	 UPPER_DEAL_GROUP_NO,
                               	 DEAL_GROUP_NO
                              	 ) I1
		                 LEFT OUTER JOIN
		                    (							/* 딜적용 쿠폰  */
		                     SELECT CP.*, CD.DEAL_ID
		                       FROM    COUPON_PRODUCT CP
		                            INNER JOIN
		                               SPS_COUPONDEAL CD
		                            ON CP.COUPON_ID = CD.COUPON_ID
		                      WHERE CP.DEAL_APPLY_YN = 'Y') I2
		                 ON (I1.DEAL_ID = I2.DEAL_ID AND I1.PRODUCT_ID = I2.PRODUCT_ID)
		                 LEFT OUTER JOIN (                               /* 딜적용 사은품  */
		                                  SELECT P1.*, P2.DEAL_ID
		                                    FROM    PRESENT_PRODUCT P1
		                                         INNER JOIN
		                                            SPS_PRESENTDEAL P2
		                                         ON P1.PRESENT_ID = P2.PRESENT_ID
		                                   WHERE P1.DEAL_APPLY_YN = 'Y') I3
		                    ON (    I1.DEAL_ID = I3.DEAL_ID
		                        AND I1.PRODUCT_ID = I3.PRODUCT_ID))
		WHERE 1 = 1
			  <if test=" prePrice != null and prePrice != ''">		/* 상세검색 가격*/
				<if test=" postPrice != null and postPrice != ''">
                  AND COUPON_PRICE BETWEEN #{prePrice} AND #{postPrice}   
                </if>
			  </if>
		 	  <if test="benefit != '' and benefit != null"> /* 혜택2 쿠폰 사은품 포인트 */
		 	     AND ( 1 = 2
			  	 <if test="benefit.indexOf('selCoupon') >= 0">
			  	 	 OR COUPON_ID IS NOT NULL
			  	 </if>
			  	 <if test="benefit.indexOf('selPoint') >= 0">
			  	 	 OR POINT_SAVE_RATE &gt; 0
			  	 </if>
			  	 <if test="benefit.indexOf('selPresent') >= 0">
			  	 	 OR PRESENT_PRODUCT_ID IS NOT NULL 
			  	 </if>
			   	 )
		 	  </if>
		GROUP BY POINT_SAVE_RATE,
		         DELIVERY_FEE_FREE_YN,
		         PRODUCT_ID,
		         PRODUCT_NAME,
		         LIST_PRICE,
		         DEAL_STOCK_QTY,
		         TOTAL_DEAL_STOCK_QTY,
		         START_DT,
		         END_DT,
                 ORDER_QTY,
               	 RATTING,
               	 INS_DT,
				 UPPER_DEAL_GROUP_NO,
             	 DEAL_GROUP_NO,
             	 PRESENT_PRODUCT_ID
        <choose>
        	<when test="sortType != null and sortType != ''">
				ORDER BY
					<if test=" 'PRODUCT_SORT_CD.POPULAR'.equals(sortType)">
						ORDER_QTY DESC 		/* 인기상품순 */
					</if>
					<if test=" 'PRODUCT_SORT_CD.REVIEW'.equals(sortType)">
						RATTING DESC		/* 상품평순 */
					</if>
					<if test=" 'PRODUCT_SORT_CD.HIGHPRICE'.equals(sortType)">
						COUPON_PRICE DESC  /* 높은가격순 */
					</if>
					<if test=" 'PRODUCT_SORT_CD.LOWPRICE'.equals(sortType)">
						COUPON_PRICE ASC	 /* 낮은가격순 */
					</if>
					<if test=" 'PRODUCT_SORT_CD.LATEST'.equals(sortType)">
						INS_DT DESC			 /* 최근등록순 */
					</if>
        	</when>
        	<otherwise>
				ORDER BY ORDER_QTY DESC 	 /* 인기상품순 */
        	</otherwise>
        </choose>

	<include refid="ccs.common.pagingPost"/>
	</select>

	<update id="insertCcsControlByCopyReg">
		INSERT INTO CCS_CONTROL
		   SELECT STORE_ID,
				  (SELECT NVL (CONTROL_NO, 1)
           			 FROM (SELECT MAX (CONTROL_NO) + 1 CONTROL_NO
                   			 FROM CCS_CONTROL WHERE STORE_ID = #{storeId})
                  ) CONTROL_NO,
		          CHANNEL_CONTROL_CD,
		          SYSDATE INS_DT,
		          #{insId} INS_ID,
		          SYSDATE UPD_DT,
		          #{updId} UPD_ID
		     FROM CCS_CONTROL
		    WHERE STORE_ID = #{storeId} AND CONTROL_NO = #{controlNo}
	</update>

	<select id="getControlNo" resultType="java.math.BigDecimal">
		SELECT NVL (CONTROL_NO, 1) 
		  FROM (SELECT MAX (CONTROL_NO) CONTROL_NO 
		          FROM CCS_CONTROL 
		         WHERE STORE_ID = #{storeId})
	</select>

	<select id="getChannelByCopyReg" resultType="ccsControlchannel">
		SELECT *
		  FROM CCS_CONTROLCHANNEL
		 WHERE STORE_ID = #{storeId} AND CONTROL_NO = #{controlNo}
	</select>
	<select id="getDeviceByCopyReg" resultType="ccsControldevice">
		SELECT *
		  FROM CCS_CONTROLDEVICE
		 WHERE STORE_ID = #{storeId} AND CONTROL_NO = #{controlNo}
	</select>
	<select id="getGradeByCopyReg" resultType="ccsControlmembergrade">
		SELECT *
		  FROM CCS_CONTROLMEMBERGRADE
		 WHERE STORE_ID = #{storeId} AND CONTROL_NO = #{controlNo}
	</select>
	<select id="getTypeByCopyReg" resultType="ccsControlmembertype">
		SELECT *
		  FROM CCS_CONTROLMEMBERTYPE
		 WHERE STORE_ID = #{storeId} AND CONTROL_NO = #{controlNo}
	</select>

</mapper>